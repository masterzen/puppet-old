#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id46e42358dd', 'grammar.ra', 849

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id46e42358dd

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 63, :_reduce_1,
 1, 63, :_reduce_none,
 1, 64, :_reduce_none,
 2, 64, :_reduce_4,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 4, 74, :_reduce_18,
 5, 74, :_reduce_19,
 3, 74, :_reduce_20,
 2, 74, :_reduce_21,
 1, 80, :_reduce_none,
 1, 80, :_reduce_none,
 3, 80, :_reduce_24,
 3, 80, :_reduce_25,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_34,
 5, 67, :_reduce_35,
 5, 67, :_reduce_36,
 5, 67, :_reduce_37,
 5, 78, :_reduce_38,
 2, 68, :_reduce_39,
 1, 98, :_reduce_40,
 2, 98, :_reduce_41,
 6, 69, :_reduce_42,
 2, 69, :_reduce_43,
 3, 99, :_reduce_44,
 3, 99, :_reduce_45,
 1, 100, :_reduce_none,
 1, 100, :_reduce_none,
 3, 100, :_reduce_48,
 1, 101, :_reduce_none,
 3, 101, :_reduce_50,
 1, 102, :_reduce_51,
 1, 102, :_reduce_52,
 3, 103, :_reduce_53,
 3, 103, :_reduce_54,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 4, 106, :_reduce_57,
 1, 92, :_reduce_none,
 3, 92, :_reduce_59,
 0, 93, :_reduce_none,
 1, 93, :_reduce_none,
 1, 108, :_reduce_62,
 1, 83, :_reduce_63,
 1, 85, :_reduce_64,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 1, 107, :_reduce_none,
 3, 70, :_reduce_72,
 3, 79, :_reduce_73,
 0, 94, :_reduce_74,
 1, 94, :_reduce_75,
 3, 94, :_reduce_76,
 3, 111, :_reduce_77,
 3, 113, :_reduce_78,
 1, 114, :_reduce_none,
 1, 114, :_reduce_none,
 0, 97, :_reduce_81,
 1, 97, :_reduce_82,
 3, 97, :_reduce_83,
 1, 115, :_reduce_none,
 3, 115, :_reduce_85,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 1, 112, :_reduce_none,
 4, 87, :_reduce_104,
 3, 87, :_reduce_105,
 1, 89, :_reduce_106,
 1, 89, :_reduce_107,
 1, 86, :_reduce_108,
 4, 82, :_reduce_109,
 4, 82, :_reduce_110,
 6, 72, :_reduce_111,
 5, 72, :_reduce_112,
 0, 118, :_reduce_none,
 4, 118, :_reduce_114,
 3, 118, :_reduce_115,
 1, 110, :_reduce_none,
 3, 110, :_reduce_117,
 3, 110, :_reduce_118,
 3, 110, :_reduce_119,
 3, 110, :_reduce_120,
 3, 110, :_reduce_121,
 3, 110, :_reduce_122,
 3, 110, :_reduce_123,
 3, 110, :_reduce_124,
 2, 110, :_reduce_125,
 3, 110, :_reduce_126,
 3, 110, :_reduce_127,
 3, 110, :_reduce_128,
 3, 110, :_reduce_129,
 3, 110, :_reduce_130,
 3, 110, :_reduce_131,
 2, 110, :_reduce_132,
 3, 110, :_reduce_133,
 3, 110, :_reduce_134,
 3, 110, :_reduce_135,
 5, 71, :_reduce_136,
 1, 120, :_reduce_none,
 2, 120, :_reduce_138,
 5, 121, :_reduce_139,
 4, 121, :_reduce_140,
 1, 122, :_reduce_none,
 3, 122, :_reduce_142,
 3, 88, :_reduce_143,
 1, 124, :_reduce_none,
 4, 124, :_reduce_145,
 1, 126, :_reduce_none,
 3, 126, :_reduce_147,
 3, 125, :_reduce_148,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_156,
 1, 123, :_reduce_none,
 1, 127, :_reduce_158,
 3, 127, :_reduce_159,
 2, 73, :_reduce_160,
 6, 75, :_reduce_161,
 5, 75, :_reduce_162,
 6, 76, :_reduce_163,
 5, 76, :_reduce_164,
 6, 77, :_reduce_165,
 5, 77, :_reduce_166,
 1, 96, :_reduce_167,
 1, 91, :_reduce_168,
 1, 91, :_reduce_169,
 1, 130, :_reduce_none,
 3, 130, :_reduce_171,
 1, 132, :_reduce_172,
 1, 133, :_reduce_173,
 1, 133, :_reduce_174,
 1, 133, :_reduce_175,
 1, 133, :_reduce_176,
 1, 133, :_reduce_none,
 0, 65, :_reduce_178,
 0, 134, :_reduce_179,
 1, 128, :_reduce_none,
 3, 128, :_reduce_181,
 3, 128, :_reduce_182,
 1, 135, :_reduce_none,
 3, 135, :_reduce_184,
 3, 136, :_reduce_185,
 1, 136, :_reduce_186,
 3, 136, :_reduce_187,
 1, 136, :_reduce_188,
 1, 131, :_reduce_none,
 2, 131, :_reduce_190,
 1, 129, :_reduce_none,
 2, 129, :_reduce_192,
 1, 137, :_reduce_none,
 1, 137, :_reduce_none,
 1, 84, :_reduce_195,
 3, 109, :_reduce_196,
 4, 109, :_reduce_197,
 2, 109, :_reduce_198,
 1, 116, :_reduce_none,
 1, 116, :_reduce_none,
 0, 95, :_reduce_none,
 1, 95, :_reduce_202,
 1, 119, :_reduce_203,
 3, 117, :_reduce_204,
 4, 117, :_reduce_205,
 2, 117, :_reduce_206,
 1, 138, :_reduce_none,
 3, 138, :_reduce_208,
 3, 139, :_reduce_209,
 1, 140, :_reduce_210,
 1, 140, :_reduce_211,
 1, 140, :_reduce_212,
 4, 141, :_reduce_213,
 1, 90, :_reduce_none,
 4, 90, :_reduce_215 ]

racc_reduce_n = 216

racc_shift_n = 355

racc_action_table = [
    79,    57,    60,    57,    60,   270,    79,    57,    60,   144,
    84,    39,    40,   327,   206,   115,    79,    57,    60,   309,
    84,    98,   299,    39,    40,    99,   326,   308,   168,   169,
   215,    48,   306,   268,   269,    59,   123,    48,   100,    67,
   113,    59,    62,   214,   121,    67,    41,    48,    64,    43,
    55,    59,    62,    54,    64,    67,   210,   314,    41,    42,
    55,    43,   101,   170,    64,    42,    79,    57,    60,    42,
    84,   274,   272,   145,   183,    42,   278,  -150,    39,    40,
   271,    42,   268,   269,   183,   182,    75,    79,    57,    60,
   187,    84,   168,   169,   178,   182,   173,    48,   274,   206,
   187,    59,    62,   278,   183,    67,    79,    57,    60,   177,
    55,    82,   145,    41,    64,   182,    43,    89,    48,   284,
   187,   255,    59,    62,   256,    42,    67,   170,    79,    57,
    60,    55,    84,   183,   176,    64,    42,    48,    54,    57,
    60,    59,   220,  -153,   182,    67,    42,   225,    36,   187,
   121,   227,   228,    36,    64,     4,     8,   287,    50,    48,
     4,   180,   159,    59,    62,    42,   180,    67,    36,    48,
   150,   199,    55,    59,    62,     4,    64,    67,    36,   253,
  -154,    51,    55,   227,   254,     4,    64,    42,    79,    57,
    60,   273,    84,   156,   160,   268,   269,    42,   162,   163,
   164,   148,   149,   151,   291,   156,   160,   136,    75,    79,
    57,    60,   293,    84,  -155,   164,   148,    57,    60,    48,
   156,   160,   159,    59,    62,   156,   160,    67,    33,    34,
   150,   295,    55,    82,   227,   337,    64,   164,   148,    89,
    48,   145,   156,   160,    59,    62,  -150,    42,    67,  -152,
    79,    57,    60,    55,    84,    99,   300,    64,   162,   163,
   164,   148,   149,   151,   194,   156,   160,   200,    42,   180,
    75,    79,    57,    60,   203,    84,   162,   163,   164,   148,
  -149,    48,  -151,   156,   160,    59,    62,  -153,   264,    67,
  -154,    75,   227,   228,    55,    82,   146,  -150,    64,  -151,
   301,    89,    48,    98,    42,   205,    59,    62,   193,    42,
    67,   304,   159,  -152,  -149,    55,    82,  -149,   144,    64,
   150,   212,    89,    79,    57,    60,   313,    84,  -167,   208,
    42,   141,  -151,    79,    57,    60,   324,    84,   325,    79,
    57,    60,  -152,    84,   328,   138,   136,   110,   162,   163,
   164,   148,   149,   151,    48,   156,   160,   208,    59,    62,
   279,   208,    67,   338,    48,   301,   340,    55,    59,    62,
    48,    64,    67,   104,    59,    62,   342,    55,    67,  -151,
  -149,    64,    42,    55,    79,    57,    60,    64,    84,  -152,
  -150,  -154,    42,   162,   163,   164,   148,   209,    42,   206,
   156,   160,   102,   136,    75,    79,    57,    60,    47,    84,
   348,  -202,    46,   212,   257,    48,    42,   nil,   159,    59,
    62,   nil,   nil,    67,   nil,   nil,   150,   nil,    55,    82,
   nil,   nil,    64,   nil,   nil,    89,    48,   nil,   nil,   nil,
    59,    62,   nil,    42,    67,   nil,    79,    57,    60,    55,
    84,   nil,   nil,    64,   162,   163,   164,   148,   149,   151,
   nil,   156,   160,   nil,    42,   nil,    75,    79,    57,    60,
   nil,    84,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,    59,    62,   nil,   nil,    67,   nil,    75,   nil,   nil,
    55,    82,   nil,   nil,    64,   nil,   nil,    89,    48,   nil,
   nil,   nil,    59,    62,   nil,    42,    67,   nil,   nil,   nil,
   nil,    55,    82,   nil,   nil,    64,   nil,   nil,    89,    79,
    57,    60,   nil,    84,   nil,   nil,    42,   162,   163,   164,
   148,   149,   151,   nil,   156,   160,   nil,   nil,   nil,    75,
    79,    57,    60,   nil,    84,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,    59,    62,   nil,   nil,    67,   nil,
    75,   nil,   nil,    55,    82,   nil,   nil,    64,   nil,   nil,
    89,    48,   nil,   nil,   nil,    59,    62,   nil,    42,    67,
   nil,   nil,   nil,   nil,    55,    82,   nil,   nil,    64,   nil,
   nil,    89,    79,    57,    60,   nil,    84,   nil,   nil,    42,
   162,   163,   164,   148,   149,   151,   nil,   156,   160,   nil,
   nil,   nil,    75,    79,    57,    60,   nil,    84,   nil,   nil,
   nil,   nil,   nil,    48,   nil,   nil,   nil,    59,    62,   nil,
   nil,    67,   nil,    75,   nil,   nil,    55,    82,   nil,   nil,
    64,   nil,   nil,    89,    48,   nil,   nil,   nil,    59,    62,
   nil,    42,    67,   nil,   nil,   nil,   nil,    55,    82,   nil,
   nil,    64,   nil,   nil,    89,    79,    57,    60,   nil,    84,
   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    75,    79,    57,    60,   165,
    84,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,
    59,    62,   nil,   nil,    67,   nil,   nil,   nil,   nil,    55,
    82,   nil,   nil,    64,   nil,   nil,    89,    48,   nil,   nil,
   nil,    59,    62,   nil,    42,    67,   nil,    79,    57,    60,
    55,    84,   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    42,   nil,    75,    79,    57,
    60,   nil,    84,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,    59,    62,   nil,   nil,    67,   nil,   nil,   nil,
   nil,    55,    82,   nil,   nil,    64,   nil,   nil,    89,    48,
   nil,   nil,   nil,    59,    62,   nil,    42,    67,   nil,    79,
    57,    60,    55,    84,   nil,   nil,    64,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,    75,
    79,    57,    60,   nil,    84,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,    59,    62,   nil,   nil,    67,   nil,
    75,   nil,   nil,    55,    82,   nil,   nil,    64,   nil,   nil,
    89,    48,   nil,   nil,   nil,    59,    62,   nil,    42,    67,
   nil,   nil,   nil,   nil,    55,    82,   nil,   nil,    64,   nil,
   nil,    89,    79,    57,    60,   nil,    84,   nil,   nil,    42,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    75,    79,    57,    60,   nil,    84,   nil,   nil,
   nil,   nil,   nil,    48,   nil,   nil,   nil,    59,    62,   nil,
   nil,    67,   nil,   nil,   nil,   nil,    55,    82,   nil,   nil,
    64,   nil,   nil,    89,    48,   nil,   nil,   nil,    59,    62,
   nil,    42,    67,   nil,    79,    57,    60,    55,    84,   nil,
   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    42,   nil,    75,    79,    57,    60,   nil,    84,
   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,    59,
    62,   nil,   nil,    67,   nil,    75,   nil,   nil,    55,    82,
   nil,   nil,    64,   nil,   nil,    89,    48,   nil,   nil,   nil,
    59,    62,   nil,    42,    67,   nil,   nil,   nil,   nil,    55,
    82,   nil,   nil,    64,   nil,   nil,    89,    79,    57,    60,
   nil,    84,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    79,    57,
    60,   nil,    84,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,    59,    62,   nil,   nil,    67,   nil,    75,   nil,
   nil,    55,    82,   nil,   nil,    64,    57,    60,    89,    48,
   311,   nil,   nil,    59,    62,   nil,    42,    67,   nil,   nil,
   nil,   nil,    55,    82,   nil,   nil,    64,   nil,   nil,    89,
    79,    57,    60,   nil,    84,   nil,   182,    42,    57,    60,
    59,   220,   nil,   nil,    67,   nil,   nil,   nil,   nil,   121,
   nil,   nil,   nil,    64,   nil,   nil,    57,    60,   231,   nil,
   nil,    48,   nil,   nil,    42,    59,    62,   nil,    48,    67,
   nil,   nil,    59,    62,    55,   nil,    67,   nil,    64,   nil,
    51,    55,    57,    60,   nil,    64,   182,   nil,   nil,    42,
    59,   220,    57,    60,    67,   nil,    42,   nil,   nil,   121,
   nil,   nil,   139,    64,   nil,   nil,   nil,   nil,    57,    60,
   nil,   nil,    48,   nil,    42,   nil,    59,    62,    57,    60,
    67,   nil,   182,   nil,    51,    55,    59,   220,   nil,    64,
    67,   nil,   nil,   nil,   nil,   121,   nil,   nil,   182,    64,
    42,   nil,    59,   220,    57,    60,    67,   nil,   182,   nil,
    42,   121,    59,   220,   nil,    64,    67,   nil,   nil,   nil,
   nil,   121,   nil,    57,    60,    64,    42,   nil,   nil,    57,
    60,   nil,   222,   nil,   182,   nil,    42,   nil,    59,   220,
   nil,   nil,    67,   294,   nil,    57,    60,   121,   nil,   nil,
   nil,    64,   nil,    48,   nil,    57,    60,    59,    62,   182,
   nil,    67,    42,    59,   220,    51,    55,    67,   nil,   nil,
    64,   nil,   121,   nil,   nil,   182,    64,   nil,   nil,    59,
   220,    42,   nil,    67,   nil,    48,   161,    42,   121,    59,
    62,   nil,    64,    67,   nil,   154,   159,    51,    55,   nil,
   nil,   nil,    64,    42,   150,   152,   155,   158,   154,   159,
   nil,   nil,   nil,    42,   nil,   nil,   nil,   150,   152,   155,
   158,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   157,
   nil,   nil,   162,   163,   164,   148,   149,   151,   nil,   156,
   160,   153,   157,   nil,   nil,   162,   163,   164,   148,   149,
   151,   nil,   156,   160,   154,   159,   nil,   nil,   nil,   nil,
   nil,   nil,   234,   150,   152,   155,   158,   154,   159,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   150,   152,   155,   158,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   157,   nil,
   nil,   162,   163,   164,   148,   149,   151,   nil,   156,   160,
   153,   157,   nil,   nil,   162,   163,   164,   148,   149,   151,
   nil,   156,   160,   154,   159,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   150,   152,   155,   158,   154,   159,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   150,   152,   155,   158,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   162,   163,   164,   148,   149,   151,   349,   156,   160,   nil,
   157,   nil,   nil,   162,   163,   164,   148,   149,   151,   nil,
   156,   160,   nil,   nil,   nil,   353,   nil,    18,   nil,    22,
    26,   nil,     1,     5,   nil,    11,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,    18,   303,    22,    26,
   nil,     1,     5,   nil,    11,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,   nil,   248,   nil,    18,   nil,
    22,    26,   nil,     1,     5,   nil,    11,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,    18,   280,    22,
    26,   nil,     1,     5,   nil,    11,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,   nil,   351,   nil,    18,
   nil,    22,    26,   nil,     1,     5,   nil,    11,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,   329,
    22,    26,   nil,     1,     5,   nil,    11,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,   nil,   331,   nil,
    18,   nil,    22,    26,   nil,     1,     5,   nil,    11,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,
   346,    22,    26,   nil,     1,     5,   nil,    11,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,   332,
   nil,    18,   nil,    22,    26,   nil,     1,     5,   nil,    11,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   282,    22,    26,   nil,     1,     5,   nil,    11,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,
   354,   nil,    18,   nil,    22,    26,   nil,     1,     5,   nil,
    11,   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,
     8,    18,   nil,    22,    26,   nil,     1,     5,   nil,    11,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   nil,    22,    26,   nil,     1,     5,   nil,    11,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,
   nil,    22,    26,   nil,     1,     5,   nil,    11,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8 ]

racc_action_check = [
    46,    46,    46,    22,    22,   184,   146,   146,   146,   232,
   146,   113,   113,   276,   136,    45,   210,   210,   210,   259,
   210,    23,   232,   115,   115,    23,   276,   259,   256,   256,
   140,    46,   256,   184,   184,    46,    46,   146,    23,    46,
    45,   146,   146,   140,    46,   146,   113,   210,    46,   113,
   146,   210,   210,    62,   146,   210,   136,   266,   115,    46,
   210,   115,    23,   256,   210,   146,    89,    89,    89,   113,
    89,   327,   188,    62,   100,   210,   327,   128,    11,    11,
   188,   115,   266,   266,   267,   100,    89,   138,   138,   138,
   100,   138,    84,    84,    97,   267,    84,    89,   194,   123,
   267,    89,    89,   194,   101,    89,   205,   205,   205,    96,
    89,    89,   123,    11,    89,   101,    11,    89,   138,   204,
   101,   171,   138,   138,   171,    89,   138,    84,   226,   226,
   226,   138,   226,   183,    94,   138,    11,   205,    16,    16,
    16,   205,   205,    92,   183,   205,   138,   143,    30,   183,
   205,   143,   143,     5,   205,    30,    30,   207,    16,   226,
     5,   208,   245,   226,   226,   205,   209,   226,   110,    16,
   245,   110,   226,    16,    16,   110,   226,    16,    26,   166,
    91,    16,    16,   166,   166,    26,    16,   226,    18,    18,
    18,   192,    18,   252,   252,   192,   192,    16,   245,   245,
   245,   245,   245,   245,   211,   245,   245,   212,    18,    20,
    20,    20,   213,    20,    90,   251,   251,   177,   177,    18,
   251,   251,   241,    18,    18,   235,   235,    18,     1,     1,
   241,   217,    18,    18,   297,   297,    18,   250,   250,    18,
    20,   220,   250,   250,    20,    20,    88,    18,    20,    87,
   148,   148,   148,    20,   148,   107,   233,    20,   241,   241,
   241,   241,   241,   241,   103,   241,   241,   111,    20,    99,
   148,   149,   149,   149,   116,   149,   238,   238,   238,   238,
    85,   148,    78,   238,   238,   148,   148,    74,   179,   148,
    73,   149,   179,   179,   148,   148,    70,    69,   148,   119,
   248,   148,   149,    68,   156,   122,   149,   149,   102,   148,
   149,   254,   239,    66,    65,   149,   149,   124,    58,   149,
   239,   263,   149,   328,   328,   328,   265,   328,    55,   125,
   149,    53,    52,   324,   324,   324,   274,   324,   275,    98,
    98,    98,   126,    98,   278,    48,    47,    35,   239,   239,
   239,   239,   239,   239,   328,   239,   239,   289,   328,   328,
   195,   181,   328,   301,   324,   303,   308,   328,   324,   324,
    98,   328,   324,    27,    98,    98,   312,   324,    98,   317,
   318,   324,   328,    98,   150,   150,   150,    98,   150,   320,
   321,   322,   324,   236,   236,   236,   236,   129,    98,   180,
   236,   236,    25,   178,   150,   295,   295,   295,    15,   295,
   336,   337,    12,   137,   174,   150,   160,   nil,   242,   150,
   150,   nil,   nil,   150,   nil,   nil,   242,   nil,   150,   150,
   nil,   nil,   150,   nil,   nil,   150,   295,   nil,   nil,   nil,
   295,   295,   nil,   150,   295,   nil,    33,    33,    33,   295,
    33,   nil,   nil,   295,   242,   242,   242,   242,   242,   242,
   nil,   242,   242,   nil,   295,   nil,    33,    34,    34,    34,
   nil,    34,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,    33,    33,   nil,   nil,    33,   nil,    34,   nil,   nil,
    33,    33,   nil,   nil,    33,   nil,   nil,    33,    34,   nil,
   nil,   nil,    34,    34,   nil,    33,    34,   nil,   nil,   nil,
   nil,    34,    34,   nil,   nil,    34,   nil,   nil,    34,   151,
   151,   151,   nil,   151,   nil,   nil,    34,   246,   246,   246,
   246,   246,   246,   nil,   246,   246,   nil,   nil,   nil,   151,
   152,   152,   152,   nil,   152,   nil,   nil,   nil,   nil,   nil,
   151,   nil,   nil,   nil,   151,   151,   nil,   nil,   151,   nil,
   152,   nil,   nil,   151,   151,   nil,   nil,   151,   nil,   nil,
   151,   152,   nil,   nil,   nil,   152,   152,   nil,   151,   152,
   nil,   nil,   nil,   nil,   152,   152,   nil,   nil,   152,   nil,
   nil,   152,   153,   153,   153,   nil,   153,   nil,   nil,   152,
   237,   237,   237,   237,   237,   237,   nil,   237,   237,   nil,
   nil,   nil,   153,   154,   154,   154,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   153,   nil,   nil,   nil,   153,   153,   nil,
   nil,   153,   nil,   154,   nil,   nil,   153,   153,   nil,   nil,
   153,   nil,   nil,   153,   154,   nil,   nil,   nil,   154,   154,
   nil,   153,   154,   nil,   nil,   nil,   nil,   154,   154,   nil,
   nil,   154,   nil,   nil,   154,    82,    82,    82,   nil,    82,
   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    82,    79,    79,    79,    79,
    79,   nil,   nil,   nil,   nil,   nil,    82,   nil,   nil,   nil,
    82,    82,   nil,   nil,    82,   nil,   nil,   nil,   nil,    82,
    82,   nil,   nil,    82,   nil,   nil,    82,    79,   nil,   nil,
   nil,    79,    79,   nil,    82,    79,   nil,   162,   162,   162,
    79,   162,   nil,   nil,    79,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,   nil,   162,    54,    54,
    54,   nil,    54,   nil,   nil,   nil,   nil,   nil,   162,   nil,
   nil,   nil,   162,   162,   nil,   nil,   162,   nil,   nil,   nil,
   nil,   162,   162,   nil,   nil,   162,   nil,   nil,   162,    54,
   nil,   nil,   nil,    54,    54,   nil,   162,    54,   nil,   155,
   155,   155,    54,   155,   nil,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,   155,
   164,   164,   164,   nil,   164,   nil,   nil,   nil,   nil,   nil,
   155,   nil,   nil,   nil,   155,   155,   nil,   nil,   155,   nil,
   164,   nil,   nil,   155,   155,   nil,   nil,   155,   nil,   nil,
   155,   164,   nil,   nil,   nil,   164,   164,   nil,   155,   164,
   nil,   nil,   nil,   nil,   164,   164,   nil,   nil,   164,   nil,
   nil,   164,   157,   157,   157,   nil,   157,   nil,   nil,   164,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   157,   257,   257,   257,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   157,   nil,   nil,   nil,   157,   157,   nil,
   nil,   157,   nil,   nil,   nil,   nil,   157,   157,   nil,   nil,
   157,   nil,   nil,   157,   257,   nil,   nil,   nil,   257,   257,
   nil,   157,   257,   nil,   158,   158,   158,   257,   158,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   257,   nil,   158,   163,   163,   163,   nil,   163,
   nil,   nil,   nil,   nil,   nil,   158,   nil,   nil,   nil,   158,
   158,   nil,   nil,   158,   nil,   163,   nil,   nil,   158,   158,
   nil,   nil,   158,   nil,   nil,   158,   163,   nil,   nil,   nil,
   163,   163,   nil,   158,   163,   nil,   nil,   nil,   nil,   163,
   163,   nil,   nil,   163,   nil,   nil,   163,    75,    75,    75,
   nil,    75,   nil,   nil,   163,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,   159,   159,
   159,   nil,   159,   nil,   nil,   nil,   nil,   nil,    75,   nil,
   nil,   nil,    75,    75,   nil,   nil,    75,   nil,   159,   nil,
   nil,    75,    75,   nil,   nil,    75,   261,   261,    75,   159,
   261,   nil,   nil,   159,   159,   nil,    75,   159,   nil,   nil,
   nil,   nil,   159,   159,   nil,   nil,   159,   nil,   nil,   159,
   206,   206,   206,   nil,   206,   nil,   261,   159,   145,   145,
   261,   261,   nil,   nil,   261,   nil,   nil,   nil,   nil,   261,
   nil,   nil,   nil,   261,   nil,   nil,   272,   272,   145,   nil,
   nil,   206,   nil,   nil,   261,   206,   206,   nil,   145,   206,
   nil,   nil,   145,   145,   206,   nil,   145,   nil,   206,   nil,
   145,   145,    50,    50,   nil,   145,   272,   nil,   nil,   206,
   272,   272,   176,   176,   272,   nil,   145,   nil,   nil,   272,
   nil,   nil,    50,   272,   nil,   nil,   nil,   nil,   309,   309,
   nil,   nil,    50,   nil,   272,   nil,    50,    50,   335,   335,
    50,   nil,   176,   nil,    50,    50,   176,   176,   nil,    50,
   176,   nil,   nil,   nil,   nil,   176,   nil,   nil,   309,   176,
    50,   nil,   309,   309,   222,   222,   309,   nil,   335,   nil,
   176,   309,   335,   335,   nil,   309,   335,   nil,   nil,   nil,
   nil,   335,   nil,   215,   215,   335,   309,   nil,   nil,   141,
   141,   nil,   141,   nil,   222,   nil,   335,   nil,   222,   222,
   nil,   nil,   222,   215,   nil,   271,   271,   222,   nil,   nil,
   nil,   222,   nil,   215,   nil,   144,   144,   215,   215,   141,
   nil,   215,   222,   141,   141,   215,   215,   141,   nil,   nil,
   215,   nil,   141,   nil,   nil,   271,   141,   nil,   nil,   271,
   271,   215,   nil,   271,   nil,   144,    76,   141,   271,   144,
   144,   nil,   271,   144,   nil,    76,    76,   144,   144,   nil,
   nil,   nil,   144,   271,    76,    76,    76,    76,   109,   109,
   nil,   nil,   nil,   144,   nil,   nil,   nil,   109,   109,   109,
   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,    76,
   nil,   nil,    76,    76,    76,    76,    76,    76,   nil,    76,
    76,   109,   109,   nil,   nil,   109,   109,   109,   109,   109,
   109,   nil,   109,   109,   147,   147,   nil,   nil,   nil,   nil,
   nil,   nil,   147,   147,   147,   147,   147,   108,   108,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   108,   108,   108,   108,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,   147,   nil,
   nil,   147,   147,   147,   147,   147,   147,   nil,   147,   147,
   108,   108,   nil,   nil,   108,   108,   108,   108,   108,   108,
   nil,   108,   108,   244,   244,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   244,   244,   244,   244,   240,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   240,   240,   240,   240,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   244,   244,   244,   244,   244,   244,   338,   244,   244,   nil,
   240,   nil,   nil,   240,   240,   240,   240,   240,   240,   nil,
   240,   240,   nil,   nil,   nil,   350,   nil,   338,   nil,   338,
   338,   nil,   338,   338,   nil,   338,   nil,   338,   nil,   338,
   nil,   338,   nil,   nil,   338,   338,   350,   249,   350,   350,
   nil,   350,   350,   nil,   350,   nil,   350,   nil,   350,   nil,
   350,   nil,   nil,   350,   350,   nil,   161,   nil,   249,   nil,
   249,   249,   nil,   249,   249,   nil,   249,   nil,   249,   nil,
   249,   nil,   249,   nil,   nil,   249,   249,   161,   200,   161,
   161,   nil,   161,   161,   nil,   161,   nil,   161,   nil,   161,
   nil,   161,   nil,   nil,   161,   161,   nil,   340,   nil,   200,
   nil,   200,   200,   nil,   200,   200,   nil,   200,   nil,   200,
   nil,   200,   nil,   200,   nil,   nil,   200,   200,   340,   279,
   340,   340,   nil,   340,   340,   nil,   340,   nil,   340,   nil,
   340,   nil,   340,   nil,   nil,   340,   340,   nil,   281,   nil,
   279,   nil,   279,   279,   nil,   279,   279,   nil,   279,   nil,
   279,   nil,   279,   nil,   279,   nil,   nil,   279,   279,   281,
   330,   281,   281,   nil,   281,   281,   nil,   281,   nil,   281,
   nil,   281,   nil,   281,   nil,   nil,   281,   281,   nil,   283,
   nil,   330,   nil,   330,   330,   nil,   330,   330,   nil,   330,
   nil,   330,   nil,   330,   nil,   330,   nil,   nil,   330,   330,
   283,   203,   283,   283,   nil,   283,   283,   nil,   283,   nil,
   283,   nil,   283,   nil,   283,   nil,   nil,   283,   283,   nil,
   352,   nil,   203,   nil,   203,   203,   nil,   203,   203,   nil,
   203,   nil,   203,   nil,   203,   nil,   203,   nil,   nil,   203,
   203,   352,   nil,   352,   352,   nil,   352,   352,   nil,   352,
   nil,   352,   nil,   352,   nil,   352,   nil,   nil,   352,   352,
    29,   nil,    29,    29,   nil,    29,    29,   nil,    29,   nil,
    29,   nil,    29,   nil,    29,   nil,   nil,    29,    29,     0,
   nil,     0,     0,   nil,     0,     0,   nil,     0,   nil,     0,
   nil,     0,   nil,     0,   nil,   nil,     0,     0 ]

racc_action_pointer = [
  1691,   215,   nil,   nil,   nil,   115,   nil,   nil,   nil,   nil,
   nil,    75,   406,   nil,   nil,   402,   136,   nil,   186,   nil,
   207,   nil,     0,    19,   nil,   402,   140,   331,   nil,  1672,
   110,   nil,   nil,   444,   465,   312,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,    -2,   308,   343,   nil,
  1119,   nil,   311,   310,   746,   326,   nil,   nil,   308,   nil,
   nil,   nil,    51,   nil,   nil,   293,   292,   nil,   301,   276,
   294,   nil,   nil,   269,   266,   995,  1260,   nil,   261,   684,
   nil,   nil,   663,   nil,    89,   259,   nil,   228,   225,    64,
   193,   159,   122,   nil,   128,   nil,    99,    88,   337,   231,
    52,    82,   308,   242,   nil,   nil,   nil,   249,  1332,  1273,
   130,   261,   nil,     8,   nil,    20,   268,   nil,   nil,   278,
   nil,   nil,   266,    90,   296,   319,   321,   nil,    56,   379,
   nil,   nil,   nil,   nil,   nil,   nil,     5,   403,    85,   nil,
    20,  1206,   nil,   142,  1232,  1075,     4,  1319,   248,   269,
   382,   517,   538,   590,   611,   787,   243,   860,   922,  1016,
   355,  1489,   725,   943,   808,   nil,   174,   nil,   nil,   nil,
   nil,   114,   nil,   nil,   405,   nil,  1129,   214,   365,   283,
   390,   351,   nil,   111,   -15,   nil,   nil,   nil,    56,   nil,
   nil,   nil,   147,   nil,    65,   354,   nil,   nil,   nil,   nil,
  1511,   nil,   nil,  1634,   112,   104,  1068,   150,   123,   128,
    14,   197,   169,   207,   nil,  1200,   nil,   222,   nil,   nil,
   219,   nil,  1181,   nil,   nil,   nil,   126,   nil,   nil,   nil,
   nil,   nil,    -1,   251,   nil,   166,   341,   548,   224,   296,
  1391,   206,   402,   nil,  1378,   146,   475,   nil,   271,  1470,
   183,   161,   134,   nil,   306,   nil,    25,   881,   nil,     9,
   nil,  1043,   nil,   311,   nil,   319,    34,    62,   nil,   nil,
   nil,  1222,  1093,   nil,   323,   315,     3,   nil,   331,  1552,
   nil,  1571,   nil,  1612,   nil,   nil,   nil,   nil,   nil,   347,
   nil,   nil,   nil,   nil,   nil,   403,   nil,   225,   nil,   nil,
   nil,   357,   nil,   336,   nil,   nil,   nil,   nil,   360,  1145,
   nil,   nil,   369,   nil,   nil,   nil,   nil,   358,   359,   nil,
   368,   369,   370,   nil,   331,   nil,   nil,    38,   321,   nil,
  1593,   nil,   nil,   nil,   nil,  1155,   403,   404,  1429,   nil,
  1530,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1448,   nil,  1653,   nil,   nil ]

racc_action_default = [
  -178,  -216,   -15,    -3,  -169,  -216,   -16,    -5,  -167,   -17,
    -6,  -216,  -216,    -7,    -8,  -216,  -168,    -9,  -216,   -10,
  -216,   -11,  -216,  -216,   -12,  -216,  -216,   -40,   -13,    -1,
  -216,   -14,    -2,  -216,  -216,  -178,  -168,  -170,  -172,  -175,
  -174,  -173,  -203,  -176,  -177,  -178,   -74,   -81,  -195,   -31,
  -216,   -34,   -32,  -216,  -216,   -64,   -33,  -106,   -21,  -108,
  -107,   -22,   -63,   -23,   -62,   -26,   -27,  -156,  -216,   -28,
  -214,  -157,  -155,   -29,   -30,  -216,  -216,   -96,   -92,  -216,
  -116,  -100,  -216,  -101,  -216,   -93,   -99,   -97,   -94,  -216,
  -103,   -95,  -102,   -98,  -216,  -158,  -160,   -43,  -216,   -74,
  -178,  -178,  -216,  -178,   -41,    -4,   -39,  -216,   -72,   -73,
  -216,  -216,  -191,  -216,  -189,  -216,  -216,   -68,   -75,   -65,
   -71,   -64,   -60,   -63,   -66,  -201,   -69,   -58,   -67,  -216,
  -154,  -153,   -70,   -79,   -80,   -82,  -216,  -201,  -216,   -20,
  -216,  -216,   -84,  -216,  -216,  -216,  -216,  -216,  -216,  -216,
  -216,  -216,  -216,  -216,  -216,  -216,  -216,  -216,  -216,  -216,
  -216,  -216,  -216,  -216,  -216,  -198,  -216,  -132,  -212,  -211,
  -210,  -216,  -207,  -206,  -216,  -125,  -216,  -216,   -81,  -216,
  -216,  -201,  -195,  -178,  -216,   -47,   -49,   -63,  -216,   -56,
   -55,   -46,  -216,   355,  -179,  -216,  -180,  -193,  -192,  -194,
  -216,  -190,  -171,  -216,  -216,   -61,  -216,  -216,  -202,   -74,
  -216,  -216,  -202,  -216,   -18,  -216,  -151,  -216,  -143,  -144,
   -63,  -149,  -216,  -152,  -150,  -109,  -216,  -199,  -200,   -24,
   -25,  -105,  -216,  -216,  -135,  -121,  -123,  -127,  -124,  -129,
  -134,  -131,  -128,  -117,  -133,  -130,  -126,  -118,  -113,  -216,
  -119,  -120,  -122,  -196,  -200,  -204,  -216,  -216,  -137,  -216,
  -141,  -216,  -159,  -201,  -110,  -216,  -216,  -216,   -52,   -51,
   -45,  -216,  -216,   -44,  -188,  -216,  -216,  -183,  -186,  -216,
  -164,  -216,  -166,  -216,   -35,   -59,   -77,   -36,   -76,  -201,
   -78,   -38,   -83,  -213,   -19,  -216,  -146,  -201,   -85,  -104,
  -215,  -216,  -112,  -113,  -197,  -208,  -205,  -209,  -216,  -216,
  -138,  -136,  -216,   -37,   -50,   -48,   -90,   -86,   -87,   -53,
   -91,   -88,   -89,   -54,  -216,  -181,  -182,  -216,  -216,  -162,
  -216,  -163,  -165,   -57,  -148,  -216,  -216,  -200,  -216,  -111,
  -216,  -142,   -42,  -187,  -184,  -185,  -161,  -147,  -145,  -115,
  -216,  -140,  -216,  -114,  -139 ]

racc_goto_table = [
    23,    29,   172,   105,   219,    15,   125,   277,    65,    37,
    58,   127,   137,    72,   258,   217,    35,   132,   229,   184,
   192,    63,   302,    32,   319,   323,    56,   207,   133,    23,
   107,   204,   143,   335,    15,    49,   261,   103,   124,   211,
   292,   106,    65,    72,   140,   218,   315,    72,   297,    96,
   260,   195,   111,    45,   116,    63,   120,   166,   112,   181,
    56,    97,   201,   275,   276,   117,   122,    52,   114,    49,
   198,   171,    25,    95,   nil,   nil,   179,   339,   nil,   nil,
   nil,   nil,   nil,   265,    44,   296,   nil,   nil,   nil,   229,
   nil,   nil,   189,   189,   nil,   nil,   217,   119,   nil,   310,
   nil,    52,   266,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    94,   202,    74,   nil,   nil,   nil,   nil,   nil,
   nil,   197,    69,   nil,   nil,   nil,   196,   nil,   nil,   nil,
   nil,   nil,   nil,   221,   nil,   260,    65,    65,    72,   232,
   344,    72,    72,   263,   131,   nil,   142,    66,    74,   230,
    63,   nil,   128,   nil,    56,    56,    69,   nil,   nil,   133,
   nil,    23,   249,    49,    49,   312,    15,   nil,   221,   289,
   285,   142,   nil,    72,   305,   189,   132,   126,   nil,   nil,
   nil,    66,   nil,   341,   nil,   nil,    44,   nil,    44,   288,
   142,   333,   216,   133,   nil,    52,    52,   124,   347,   336,
    23,   281,    72,    23,   283,    15,   nil,    65,    15,   217,
   nil,   nil,    72,   nil,   221,   120,   nil,   nil,   nil,    72,
   230,   nil,   nil,   105,   117,    56,   nil,   216,   262,   243,
   213,   190,   190,   247,    49,   nil,   nil,    73,   233,   131,
   nil,   nil,    74,    74,   nil,   nil,   nil,   224,   nil,    23,
    69,    69,   nil,   221,    15,   105,   119,   105,    72,   189,
   nil,   nil,   nil,   318,   318,   nil,    52,   130,    72,    72,
   nil,    73,   223,   216,   131,    66,    66,   nil,   nil,    23,
   330,    23,   224,    23,    15,   nil,    15,   nil,    15,   nil,
   316,   316,   nil,   nil,   nil,   nil,   nil,   nil,   286,   nil,
   nil,   221,   290,   131,   105,   nil,    72,   223,   nil,   nil,
   nil,   128,   216,    74,   190,   nil,   nil,   nil,   298,   nil,
   131,    69,   317,   317,   105,   nil,   105,   221,   224,   nil,
    23,   nil,    72,   nil,   nil,    15,   126,   nil,    23,   350,
    23,   352,   nil,    15,   nil,    15,    66,   nil,   nil,   307,
    23,   nil,    23,   223,   nil,    15,   nil,    15,   nil,   131,
   216,   nil,   130,   nil,    76,    73,    73,   224,   nil,   131,
   131,   nil,   nil,   nil,   nil,   nil,   nil,   321,   321,   108,
   109,   nil,   nil,   nil,   nil,   nil,   216,   334,   nil,   nil,
   nil,   nil,   223,   nil,   nil,   nil,   nil,   130,   190,   nil,
   nil,   nil,   320,   320,   nil,   nil,   nil,   131,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   224,   343,   nil,   nil,   nil,
   345,   147,   nil,   nil,   nil,   nil,   130,   nil,   167,   nil,
   nil,   nil,   nil,   131,   nil,   175,    73,   nil,   nil,   nil,
   223,   224,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   223,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   322,   322,   235,   236,   237,   238,   239,   240,
   241,   242,   nil,   244,   245,   246,   nil,   nil,   250,   251,
   252,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   130 ]

racc_goto_check = [
    34,     2,    77,     4,    63,    20,    32,    74,    21,    70,
    18,    44,    35,    46,    59,    61,    29,    47,    19,    38,
    38,    20,    56,     3,    43,    43,    28,    33,    49,    34,
    34,    31,    53,    54,    20,    26,    58,    29,    21,    33,
    52,     5,    21,    46,    18,    62,    39,    46,    64,    65,
    61,    66,    67,    68,    69,    20,    28,    53,     3,    32,
    28,    37,    71,    72,    73,    26,    30,    27,     3,    26,
    75,    76,     1,    27,   nil,   nil,    53,    56,   nil,   nil,
   nil,   nil,   nil,    33,    57,    63,   nil,   nil,   nil,    19,
   nil,   nil,    21,    21,   nil,   nil,    61,    27,   nil,    59,
   nil,    27,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,    70,    25,   nil,   nil,   nil,   nil,   nil,
   nil,    29,    23,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,    61,    21,    21,    46,    18,
    74,    46,    46,    35,    25,   nil,    50,    22,    25,    20,
    20,   nil,    23,   nil,    28,    28,    23,   nil,   nil,    49,
   nil,    34,     2,    26,    26,    33,    20,   nil,    21,    32,
    44,    50,   nil,    46,    77,    21,    47,    22,   nil,   nil,
   nil,    22,   nil,    61,   nil,   nil,    57,   nil,    57,    49,
    50,    33,    27,    49,   nil,    27,    27,    21,    63,    33,
    34,     2,    46,    34,     2,    20,   nil,    21,    20,    61,
   nil,   nil,    46,   nil,    21,    28,   nil,   nil,   nil,    46,
    20,   nil,   nil,     4,    26,    28,   nil,    27,    27,    57,
    50,    22,    22,    57,    26,   nil,   nil,    24,    50,    25,
   nil,   nil,    25,    25,   nil,   nil,   nil,    23,   nil,    34,
    23,    23,   nil,    21,    20,     4,    27,     4,    46,    21,
   nil,   nil,   nil,    21,    21,   nil,    27,    24,    46,    46,
   nil,    24,    22,    27,    25,    22,    22,   nil,   nil,    34,
     2,    34,    23,    34,    20,   nil,    20,   nil,    20,   nil,
    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,    21,    50,    25,     4,   nil,    46,    22,   nil,   nil,
   nil,    23,    27,    25,    22,   nil,   nil,   nil,    50,   nil,
    25,    23,    27,    27,     4,   nil,     4,    21,    23,   nil,
    34,   nil,    46,   nil,   nil,    20,    22,   nil,    34,     2,
    34,     2,   nil,    20,   nil,    20,    22,   nil,   nil,    50,
    34,   nil,    34,    22,   nil,    20,   nil,    20,   nil,    25,
    27,   nil,    24,   nil,    48,    24,    24,    23,   nil,    25,
    25,   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,    48,
    48,   nil,   nil,   nil,   nil,   nil,    27,    50,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,    24,    22,   nil,
   nil,   nil,    22,    22,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,    50,   nil,   nil,   nil,
    50,    48,   nil,   nil,   nil,   nil,    24,   nil,    48,   nil,
   nil,   nil,   nil,    25,   nil,    48,    24,   nil,   nil,   nil,
    22,    23,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,    24,    48,    48,    48,    48,    48,    48,
    48,    48,   nil,    48,    48,    48,   nil,   nil,    48,    48,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24 ]

racc_goto_pointer = [
   nil,    72,     1,    23,   -26,    11,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -6,  -126,
     5,    -8,   131,   106,   221,    98,    19,    51,    10,    11,
    20,   -91,   -40,   -98,     0,   -35,   nil,    38,   -81,  -221,
   nil,   nil,   nil,  -247,   -35,   nil,    -3,   -29,   346,   -19,
    92,   nil,  -172,   -22,  -264,   nil,  -226,    73,  -140,  -162,
   nil,  -126,   -96,  -137,  -174,    27,   -52,    17,    42,     9,
    -2,   -51,  -131,  -130,  -187,   -40,   -13,   -82,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   191,     3,     7,    10,    13,    14,    17,
    19,    21,    24,    28,    31,     2,     6,     9,   nil,    61,
    83,    85,    87,    88,    91,    92,    77,    78,    81,    12,
   nil,   nil,   nil,   nil,    68,   nil,    30,   nil,   nil,   185,
   267,   186,   188,   nil,   nil,   129,    90,    93,   nil,   118,
    80,   134,   135,   nil,   226,    86,   nil,    71,   nil,   nil,
   259,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   174,    70 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :APPENDS => 14,
 :LESSEQUAL => 15,
 :NOTEQUAL => 16,
 :DOT => 17,
 :COLON => 18,
 :LLCOLLECT => 19,
 :RRCOLLECT => 20,
 :QMARK => 21,
 :LPAREN => 22,
 :RPAREN => 23,
 :ISEQUAL => 24,
 :GREATEREQUAL => 25,
 :GREATERTHAN => 26,
 :LESSTHAN => 27,
 :IF => 28,
 :ELSE => 29,
 :IMPORT => 30,
 :DEFINE => 31,
 :ELSIF => 32,
 :VARIABLE => 33,
 :CLASS => 34,
 :INHERITS => 35,
 :NODE => 36,
 :BOOLEAN => 37,
 :NAME => 38,
 :SEMIC => 39,
 :CASE => 40,
 :DEFAULT => 41,
 :AT => 42,
 :LCOLLECT => 43,
 :RCOLLECT => 44,
 :CLASSNAME => 45,
 :CLASSREF => 46,
 :NOT => 47,
 :OR => 48,
 :AND => 49,
 :UNDEF => 50,
 :PARROW => 51,
 :PLUS => 52,
 :MINUS => 53,
 :TIMES => 54,
 :DIV => 55,
 :LSHIFT => 56,
 :RSHIFT => 57,
 :UMINUS => 58,
 :MATCH => 59,
 :NOMATCH => 60,
 :REGEX => 61 }

racc_use_result_var = true

racc_nt_base = 62

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'hasharrayaccesses',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'hash',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'qtexts',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'nodename',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault',
'hashpairs',
'hashpair',
'key',
'hasharrayaccess']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 44
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 60
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 84
  def _reduce_18( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 92
  def _reduce_19( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 98
  def _reduce_20( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 106
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 114
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 123
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'grammar.ra', 137
  def _reduce_34( val, _values, result )
                    result = ast AST::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 159
  def _reduce_35( val, _values, result )
    @lexer.commentpop
    array = val[2]
    if array.instance_of?(AST::ResourceInstance)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInstance)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 162
  def _reduce_36( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 165
  def _reduce_37( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 171
  def _reduce_38( val, _values, result )
    @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_39( val, _values, result )
    type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 199
  def _reduce_40( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 200
  def _reduce_41( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 224
  def _reduce_42( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 243
  def _reduce_43( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 253
  def _reduce_44( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 261
  def _reduce_45( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 46 omitted

 # reduce 47 omitted

module_eval <<'.,.,', 'grammar.ra', 269
  def _reduce_48( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 49 omitted

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_50( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 276
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 277
  def _reduce_52( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 284
  def _reduce_53( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 289
  def _reduce_54( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 55 omitted

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 296
  def _reduce_57( val, _values, result )
    result = ast AST::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 58 omitted

module_eval <<'.,.,', 'grammar.ra', 306
  def _reduce_59( val, _values, result )
    if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 60 omitted

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 313
  def _reduce_62( val, _values, result )
    result = ast AST::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 317
  def _reduce_63( val, _values, result )
    result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 321
  def _reduce_64( val, _values, result )
    result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 338
  def _reduce_72( val, _values, result )
    if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 343
  def _reduce_73( val, _values, result )
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 348
  def _reduce_74( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 348
  def _reduce_75( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 357
  def _reduce_76( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 361
  def _reduce_77( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 366
  def _reduce_78( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true
   result
  end
.,.,

 # reduce 79 omitted

 # reduce 80 omitted

module_eval <<'.,.,', 'grammar.ra', 374
  def _reduce_81( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 374
  def _reduce_82( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 383
  def _reduce_83( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 84 omitted

module_eval <<'.,.,', 'grammar.ra', 392
  def _reduce_85( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 86 omitted

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

 # reduce 102 omitted

 # reduce 103 omitted

module_eval <<'.,.,', 'grammar.ra', 421
  def _reduce_104( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 426
  def _reduce_105( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 430
  def _reduce_106( val, _values, result )
    result = ast AST::String, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 432
  def _reduce_107( val, _values, result )
    result = ast AST::FlatString, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 436
  def _reduce_108( val, _values, result )
    result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 441
  def _reduce_109( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 443
  def _reduce_110( val, _values, result )
    result = ast AST::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 457
  def _reduce_111( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 470
  def _reduce_112( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 113 omitted

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_114( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 480
  def _reduce_115( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)
   result
  end
.,.,

 # reduce 116 omitted

module_eval <<'.,.,', 'grammar.ra', 497
  def _reduce_117( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 500
  def _reduce_118( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 503
  def _reduce_119( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 506
  def _reduce_120( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 509
  def _reduce_121( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 512
  def _reduce_122( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 515
  def _reduce_123( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 518
  def _reduce_124( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 521
  def _reduce_125( val, _values, result )
    result = ast AST::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 524
  def _reduce_126( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 527
  def _reduce_127( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 530
  def _reduce_128( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 533
  def _reduce_129( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 536
  def _reduce_130( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 539
  def _reduce_131( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 542
  def _reduce_132( val, _values, result )
    result = ast AST::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 545
  def _reduce_133( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 548
  def _reduce_134( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 551
  def _reduce_135( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 560
  def _reduce_136( val, _values, result )
    @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 137 omitted

module_eval <<'.,.,', 'grammar.ra', 570
  def _reduce_138( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 575
  def _reduce_139( val, _values, result )
    @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 581
  def _reduce_140( val, _values, result )
    @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 141 omitted

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_142( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 595
  def _reduce_143( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 144 omitted

module_eval <<'.,.,', 'grammar.ra', 601
  def _reduce_145( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 146 omitted

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_147( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 615
  def _reduce_148( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

 # reduce 152 omitted

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

module_eval <<'.,.,', 'grammar.ra', 626
  def _reduce_156( val, _values, result )
    result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 157 omitted

module_eval <<'.,.,', 'grammar.ra', 629
  def _reduce_158( val, _values, result )
 result = [val[0].value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 633
  def _reduce_159( val, _values, result )
    results = val[0] << val[2].value
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 641
  def _reduce_160( val, _values, result )
    val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 652
  def _reduce_161( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 657
  def _reduce_162( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 666
  def _reduce_163( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :code => val[4], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 672
  def _reduce_164( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_165( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 682
  def _reduce_166( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 683
  def _reduce_167( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 685
  def _reduce_168( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 686
  def _reduce_169( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 170 omitted

module_eval <<'.,.,', 'grammar.ra', 696
  def _reduce_171( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 700
  def _reduce_172( val, _values, result )
    result = ast AST::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 701
  def _reduce_173( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 702
  def _reduce_174( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 703
  def _reduce_175( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 704
  def _reduce_176( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 177 omitted

module_eval <<'.,.,', 'grammar.ra', 710
  def _reduce_178( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 714
  def _reduce_179( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 180 omitted

module_eval <<'.,.,', 'grammar.ra', 719
  def _reduce_181( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 723
  def _reduce_182( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 183 omitted

module_eval <<'.,.,', 'grammar.ra', 730
  def _reduce_184( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 735
  def _reduce_185( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 739
  def _reduce_186( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 741
  def _reduce_187( val, _values, result )
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 743
  def _reduce_188( val, _values, result )
    result = [val[0][:value]]
   result
  end
.,.,

 # reduce 189 omitted

module_eval <<'.,.,', 'grammar.ra', 748
  def _reduce_190( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 191 omitted

module_eval <<'.,.,', 'grammar.ra', 753
  def _reduce_192( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 193 omitted

 # reduce 194 omitted

module_eval <<'.,.,', 'grammar.ra', 759
  def _reduce_195( val, _values, result )
    result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 767
  def _reduce_196( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 774
  def _reduce_197( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 776
  def _reduce_198( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 199 omitted

 # reduce 200 omitted

 # reduce 201 omitted

module_eval <<'.,.,', 'grammar.ra', 781
  def _reduce_202( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 786
  def _reduce_203( val, _values, result )
    result = ast AST::Regex, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 794
  def _reduce_204( val, _values, result )
    if val[1].instance_of?(AST::ASTHash)
        result = val[1]
    else
        result = ast AST::ASTHash, { :value => val[1] }
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 801
  def _reduce_205( val, _values, result )
    if val[1].instance_of?(AST::ASTHash)
        result = val[1]
    else
        result = ast AST::ASTHash, { :value => val[1] }
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 803
  def _reduce_206( val, _values, result )
    result = ast AST::ASTHash
   result
  end
.,.,

 # reduce 207 omitted

module_eval <<'.,.,', 'grammar.ra', 813
  def _reduce_208( val, _values, result )
    if val[0].instance_of?(AST::ASTHash)
        result = val[0].merge(val[2])
    else
        result = ast AST::ASTHash, :value => val[0]
        result.merge(val[2])
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 817
  def _reduce_209( val, _values, result )
    result = ast AST::ASTHash, { :value => { val[0] => val[2] } }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 818
  def _reduce_210( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 819
  def _reduce_211( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 820
  def _reduce_212( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 825
  def _reduce_213( val, _values, result )
    result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]
   result
  end
.,.,

 # reduce 214 omitted

module_eval <<'.,.,', 'grammar.ra', 830
  def _reduce_215( val, _values, result )
    result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
