#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id0c32fac69d', 'grammar.ra', 797

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id0c32fac69d

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 63, :_reduce_1,
 1, 63, :_reduce_none,
 1, 64, :_reduce_none,
 2, 64, :_reduce_4,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 4, 74, :_reduce_18,
 5, 74, :_reduce_19,
 3, 74, :_reduce_20,
 2, 74, :_reduce_21,
 1, 80, :_reduce_none,
 1, 80, :_reduce_none,
 3, 80, :_reduce_24,
 3, 80, :_reduce_25,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_33,
 5, 67, :_reduce_34,
 5, 67, :_reduce_35,
 5, 67, :_reduce_36,
 5, 78, :_reduce_37,
 2, 68, :_reduce_38,
 1, 97, :_reduce_39,
 2, 97, :_reduce_40,
 6, 69, :_reduce_41,
 2, 69, :_reduce_42,
 3, 98, :_reduce_43,
 3, 98, :_reduce_44,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 3, 99, :_reduce_47,
 1, 100, :_reduce_none,
 3, 100, :_reduce_49,
 1, 101, :_reduce_50,
 1, 101, :_reduce_51,
 3, 102, :_reduce_52,
 3, 102, :_reduce_53,
 1, 103, :_reduce_none,
 1, 103, :_reduce_none,
 4, 105, :_reduce_56,
 1, 91, :_reduce_none,
 3, 91, :_reduce_58,
 0, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 107, :_reduce_61,
 1, 83, :_reduce_62,
 1, 85, :_reduce_63,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 3, 70, :_reduce_70,
 3, 79, :_reduce_71,
 0, 93, :_reduce_72,
 1, 93, :_reduce_73,
 3, 93, :_reduce_74,
 3, 110, :_reduce_75,
 3, 112, :_reduce_76,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 0, 96, :_reduce_79,
 1, 96, :_reduce_80,
 3, 96, :_reduce_81,
 1, 114, :_reduce_none,
 3, 114, :_reduce_83,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 4, 87, :_reduce_100,
 3, 87, :_reduce_101,
 1, 89, :_reduce_102,
 1, 89, :_reduce_103,
 1, 86, :_reduce_104,
 4, 82, :_reduce_105,
 4, 82, :_reduce_106,
 6, 72, :_reduce_107,
 5, 72, :_reduce_108,
 0, 116, :_reduce_none,
 4, 116, :_reduce_110,
 3, 116, :_reduce_111,
 1, 109, :_reduce_none,
 3, 109, :_reduce_113,
 3, 109, :_reduce_114,
 3, 109, :_reduce_115,
 3, 109, :_reduce_116,
 3, 109, :_reduce_117,
 3, 109, :_reduce_118,
 3, 109, :_reduce_119,
 3, 109, :_reduce_120,
 2, 109, :_reduce_121,
 3, 109, :_reduce_122,
 3, 109, :_reduce_123,
 3, 109, :_reduce_124,
 3, 109, :_reduce_125,
 3, 109, :_reduce_126,
 3, 109, :_reduce_127,
 2, 109, :_reduce_128,
 3, 109, :_reduce_129,
 3, 109, :_reduce_130,
 3, 109, :_reduce_131,
 5, 71, :_reduce_132,
 1, 118, :_reduce_none,
 2, 118, :_reduce_134,
 5, 119, :_reduce_135,
 4, 119, :_reduce_136,
 1, 120, :_reduce_none,
 3, 120, :_reduce_138,
 3, 88, :_reduce_139,
 1, 122, :_reduce_none,
 4, 122, :_reduce_141,
 1, 124, :_reduce_none,
 3, 124, :_reduce_143,
 3, 123, :_reduce_144,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_152,
 1, 121, :_reduce_none,
 1, 125, :_reduce_154,
 3, 125, :_reduce_155,
 2, 73, :_reduce_156,
 6, 75, :_reduce_157,
 5, 75, :_reduce_158,
 6, 76, :_reduce_159,
 5, 76, :_reduce_160,
 6, 77, :_reduce_161,
 5, 77, :_reduce_162,
 1, 95, :_reduce_163,
 1, 90, :_reduce_164,
 1, 90, :_reduce_165,
 1, 128, :_reduce_none,
 3, 128, :_reduce_167,
 1, 130, :_reduce_168,
 1, 130, :_reduce_169,
 1, 130, :_reduce_170,
 1, 130, :_reduce_171,
 0, 65, :_reduce_172,
 0, 131, :_reduce_173,
 1, 126, :_reduce_none,
 3, 126, :_reduce_175,
 3, 126, :_reduce_176,
 1, 132, :_reduce_none,
 3, 132, :_reduce_178,
 3, 133, :_reduce_179,
 1, 133, :_reduce_180,
 3, 133, :_reduce_181,
 1, 133, :_reduce_182,
 1, 129, :_reduce_none,
 2, 129, :_reduce_184,
 1, 127, :_reduce_none,
 2, 127, :_reduce_186,
 1, 134, :_reduce_none,
 1, 134, :_reduce_none,
 1, 84, :_reduce_189,
 3, 108, :_reduce_190,
 4, 108, :_reduce_191,
 2, 108, :_reduce_192,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 0, 94, :_reduce_none,
 1, 94, :_reduce_196,
 1, 117, :_reduce_197 ]

racc_reduce_n = 198

racc_shift_n = 327

racc_action_table = [
    75,    53,    56,   285,   185,    38,    39,   247,    88,   245,
    51,   298,    89,   158,   142,   246,  -145,   124,   150,   154,
    71,    75,    53,    56,   297,    90,    38,    39,   243,   244,
   136,    45,    38,    39,   259,    55,    58,   243,   244,    66,
    40,    71,   121,    42,    52,    76,   192,   163,    61,    91,
  -151,    82,    45,    75,    53,    56,    55,    58,    45,    60,
    66,    40,   163,   168,    42,    52,    76,    40,   205,    61,
    42,   163,    82,    45,    75,    53,    56,  -148,   168,   163,
    60,   204,    45,   185,    45,   135,    36,   168,    55,   199,
    45,   283,    66,     4,    71,   168,   136,   109,   275,   282,
   262,    61,    53,    56,    36,    45,    75,    53,    56,    55,
    58,     4,    60,    66,    36,   251,    36,   181,    52,    76,
   254,     4,    61,     4,     8,    82,   161,    75,    53,    56,
   158,   142,   161,    60,   215,   150,   154,    45,   208,   216,
  -145,    55,    58,  -147,   239,    66,   268,    71,   208,   209,
    52,   206,   251,   128,    61,   208,   209,   254,    45,    51,
    53,    56,    55,    58,   248,    60,    66,   270,   243,   244,
   136,    52,    76,    33,    34,    61,   150,   154,    82,    48,
    75,    53,    56,    53,    56,  -149,    60,   150,   154,  -150,
    45,   208,   309,  -146,    55,    58,   256,   276,    66,   128,
    71,  -146,    49,    52,  -148,   187,  -148,    61,    88,  -145,
   185,    45,    75,    53,    56,    55,    58,   135,    60,    66,
  -163,  -150,   278,  -147,    52,    76,  -149,   159,    61,   161,
   130,    82,    60,    75,    53,    56,   284,   173,   174,    60,
   128,   188,   194,    45,   296,    60,   194,    55,    58,   300,
   103,    66,  -146,    71,   187,   175,    52,    97,   176,   310,
    61,   278,   312,    89,    45,    75,    53,    56,    55,    58,
  -147,    60,    66,  -145,  -148,  -146,  -150,    52,    76,   314,
    95,    61,   182,  -147,    82,    44,    75,    53,    56,   190,
   320,  -196,    60,    37,   184,   187,    45,   299,   nil,   nil,
    55,    58,   nil,   nil,    66,   nil,   nil,   nil,   nil,    52,
   nil,   nil,   nil,    61,   nil,   nil,   nil,    45,    75,    53,
    56,    55,    58,   nil,    60,    66,   nil,   nil,   nil,   nil,
    52,   nil,   nil,   nil,    61,   nil,   nil,   nil,    71,    75,
    53,    56,   nil,   nil,   nil,    60,   nil,   nil,   nil,    45,
   nil,   nil,   nil,    55,    58,   nil,   nil,    66,   nil,   nil,
   nil,   nil,    52,    76,   nil,   nil,    61,   nil,   nil,    82,
    45,    75,    53,    56,    55,    58,   nil,    60,    66,   nil,
   nil,   nil,   nil,    52,   nil,   nil,   nil,    61,   nil,   nil,
   nil,    71,    75,    53,    56,   nil,   nil,   nil,    60,   nil,
   nil,   nil,    45,   nil,   nil,   nil,    55,    58,   nil,   nil,
    66,   nil,    71,   nil,   nil,    52,    76,   nil,   nil,    61,
   nil,   nil,    82,    45,    75,    53,    56,    55,    58,   nil,
    60,    66,   nil,   nil,   nil,   nil,    52,    76,   nil,   nil,
    61,   nil,   nil,    82,    71,    75,    53,    56,   nil,   nil,
   nil,    60,   nil,   nil,   nil,    45,   nil,   nil,   nil,    55,
    58,   nil,   nil,    66,   nil,    71,   nil,   nil,    52,    76,
   nil,   nil,    61,   nil,   nil,    82,    45,    75,    53,    56,
    55,    58,   nil,    60,    66,   nil,   nil,   nil,   nil,    52,
    76,   nil,   nil,    61,   nil,   nil,    82,    71,    75,    53,
    56,   nil,   nil,   nil,    60,   nil,   nil,   nil,    45,   nil,
   nil,   nil,    55,    58,   nil,   nil,    66,    75,    53,    56,
   139,    52,    76,   nil,   nil,    61,   nil,   nil,    82,    45,
   nil,   nil,   nil,    55,   111,   nil,    60,    66,    75,    53,
    56,   nil,   109,   nil,   nil,   nil,    61,   nil,    45,    53,
    56,   nil,    55,    58,   nil,   nil,    66,    60,   nil,   nil,
   nil,    52,   nil,   nil,   nil,    61,   nil,   nil,   nil,    45,
    75,    53,    56,    55,    58,   nil,    60,    66,   nil,    45,
   nil,   nil,    52,    55,   199,   nil,    61,    66,    75,    53,
    56,   nil,   109,   nil,   nil,   nil,    61,    60,   nil,   nil,
   nil,    45,   nil,   nil,   nil,    55,    58,    60,    71,    66,
    75,    53,    56,   nil,    52,   nil,   nil,   nil,    61,    45,
   nil,   nil,   nil,    55,    58,   nil,   nil,    66,   nil,    60,
    71,   nil,    52,    76,   nil,   nil,    61,   nil,   nil,    82,
   nil,    45,    75,    53,    56,    55,    58,    60,   nil,    66,
   nil,   nil,   nil,   nil,    52,    76,   nil,   nil,    61,   nil,
   nil,    82,   nil,    75,    53,    56,   nil,   nil,   nil,    60,
   nil,   nil,   nil,    45,   nil,   nil,   nil,    55,    58,   nil,
   nil,    66,   nil,    71,   nil,   nil,    52,   nil,   nil,   nil,
    61,   nil,   nil,   nil,    45,    75,    53,    56,    55,    58,
   nil,    60,    66,   nil,   nil,   nil,   nil,    52,    76,   nil,
   nil,    61,   nil,   nil,    82,    71,    75,    53,    56,   nil,
   nil,   nil,    60,   nil,   nil,   nil,    45,   nil,   nil,   nil,
    55,    58,   nil,   nil,    66,   nil,    71,   nil,   nil,    52,
    76,   nil,   nil,    61,   nil,   nil,    82,    45,    75,    53,
    56,    55,    58,   nil,    60,    66,   nil,   nil,   nil,   nil,
    52,    76,   nil,   nil,    61,   nil,   nil,    82,    71,    75,
    53,    56,   nil,   nil,   nil,    60,   nil,   nil,   nil,    45,
   nil,   nil,   nil,    55,    58,   nil,   nil,    66,   nil,    71,
   nil,   nil,    52,    76,   nil,   nil,    61,   nil,   nil,    82,
    45,    75,    53,    56,    55,    58,   nil,    60,    66,   nil,
   nil,   nil,   nil,    52,    76,   nil,   nil,    61,   nil,   nil,
    82,   nil,    75,    53,    56,   nil,   nil,   nil,    60,   nil,
   nil,   nil,    45,   nil,   nil,   nil,    55,    58,   nil,   nil,
    66,   nil,    71,   nil,   nil,    52,   nil,   nil,   nil,    61,
   nil,   nil,   nil,    45,    53,    56,   nil,    55,    58,   nil,
    60,    66,   nil,   nil,   nil,   nil,    52,    76,    53,    56,
    61,   nil,   nil,    82,   273,    53,    56,   nil,   nil,   nil,
   nil,    60,   nil,   nil,    45,   nil,   nil,   nil,    55,    58,
   nil,   nil,    66,    53,    56,   131,    49,    52,    45,   nil,
   nil,    61,    55,   199,   nil,    45,    66,    53,    56,    55,
    58,   109,    60,    66,   nil,    61,   nil,    49,    52,   nil,
   nil,   nil,    61,    45,   nil,   nil,    60,    55,   199,    53,
    56,    66,   nil,    60,   nil,   nil,   109,    45,   nil,   nil,
    61,    55,   199,    53,    56,    66,   nil,   nil,   nil,   nil,
   109,    60,   nil,   nil,    61,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,    55,   199,    60,   nil,    66,    53,    56,
    53,    56,   109,    45,   nil,   nil,    61,    55,   199,   nil,
   nil,    66,   nil,   nil,   nil,   nil,   109,    60,   212,   nil,
    61,   nil,   nil,   nil,   nil,    53,    56,   nil,    45,   280,
    45,    60,    55,    58,    55,    58,    66,   nil,    66,   nil,
    49,    52,    49,    52,   nil,    61,   nil,    61,   nil,   nil,
    53,    56,   nil,   201,   nil,    45,    60,   nil,    60,    55,
   199,   nil,   nil,    66,   nil,   nil,   nil,   nil,   109,   nil,
   nil,   nil,    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   155,   nil,    60,    55,   199,   nil,   nil,    66,   nil,
   148,   153,   nil,   109,   nil,   nil,   nil,    61,   nil,   144,
   146,   149,   152,   148,   153,   nil,   nil,   nil,    60,   nil,
   nil,   214,   144,   146,   149,   152,   nil,   nil,   156,   157,
   158,   142,   nil,   147,   151,   150,   154,   156,   157,   158,
   142,   143,   145,   nil,   150,   154,   147,   151,   nil,   nil,
   156,   157,   158,   142,   143,   145,   nil,   150,   154,   148,
   153,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   144,   146,
   149,   152,   148,   153,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   144,   146,   149,   152,   nil,   nil,   156,   157,   158,
   142,   nil,   147,   151,   150,   154,   156,   157,   158,   142,
   143,   145,   nil,   150,   154,   nil,   nil,   nil,   nil,   156,
   157,   158,   142,   143,   145,   nil,   150,   154,   148,   153,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   144,   146,   149,
   152,   148,   153,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   144,   146,   149,   152,   nil,   153,   nil,   nil,   nil,   nil,
   nil,   nil,   151,   144,   nil,   156,   157,   158,   142,   143,
   145,   nil,   150,   154,   147,   151,   153,   nil,   156,   157,
   158,   142,   143,   145,   144,   150,   154,   nil,   nil,   153,
   nil,   156,   157,   158,   142,   143,   145,   144,   150,   154,
   153,   nil,   156,   157,   158,   142,   143,   145,   144,   150,
   154,   nil,   156,   157,   158,   142,   143,   145,   nil,   150,
   154,   nil,   nil,   nil,   318,   156,   157,   158,   142,   143,
   145,   nil,   150,   154,   nil,   nil,   156,   157,   158,   142,
   143,   145,   nil,   150,   154,    18,   265,    23,    26,   nil,
     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,
   nil,   nil,     4,     8,   nil,   303,   nil,    18,   nil,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,    18,   305,    23,    26,
   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,   nil,   279,   nil,    18,   nil,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,    18,   230,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,   nil,   321,   nil,    18,
   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,   257,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,   nil,   323,   nil,
    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,
   325,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,   301,
   nil,    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   326,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,
   nil,   nil,    18,   nil,    23,    26,   nil,     1,     5,   nil,
    12,   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,
     8,    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,   156,
   157,   158,   142,   143,   145,   nil,   150,   154 ]

racc_action_check = [
    34,    34,    34,   241,   128,   121,   121,   167,    21,   164,
    58,   252,    21,   233,   233,   167,   113,    41,   233,   233,
    34,   158,   158,   158,   252,    21,    12,    12,   241,   241,
    58,    34,   124,   124,   183,    34,    34,   164,   164,    34,
   121,   158,    41,   121,    34,    34,   128,    90,    34,    21,
    80,    34,   158,   184,   184,   184,   158,   158,    90,    34,
   158,    12,   163,    90,    12,   158,   158,   124,   132,   158,
   124,    91,   158,   163,   142,   142,   142,    79,   163,   242,
   158,   132,    91,   111,   184,   213,     5,    91,   184,   184,
   242,   238,   184,     5,   142,   242,   111,   184,   213,   238,
   186,   184,    23,    23,    26,   142,   185,   185,   185,   142,
   142,    26,   184,   142,   103,   176,    28,   103,   142,   142,
   176,   103,   142,    28,    28,   142,   187,   143,   143,   143,
   232,   232,   188,   142,   138,   232,   232,   185,   138,   138,
    78,   185,   185,    74,   160,   185,   193,   143,   160,   160,
   185,   134,   298,   194,   185,   134,   134,   298,   143,    16,
    16,    16,   143,   143,   172,   185,   143,   195,   172,   172,
   199,   143,   143,     1,     1,   143,   217,   217,   143,    16,
    18,    18,    18,   174,   174,    70,   143,   234,   234,    69,
    16,   272,   272,    68,    16,    16,   177,   216,    16,   173,
    18,    81,    16,    16,   115,   162,    65,    16,    64,    62,
   161,    18,    20,    20,    20,    18,    18,    54,    16,    18,
    52,    84,   230,    50,    18,    18,    86,    87,    18,    89,
    46,    18,   154,   144,   144,   144,   240,    92,    94,    18,
    44,   116,   249,    20,   251,   150,   129,    20,    20,   255,
    35,    20,   117,   144,   264,    95,    20,    27,    96,   278,
    20,   279,   282,    99,   144,   299,   299,   299,   144,   144,
   288,    20,   144,   290,   291,   292,   293,   144,   144,   295,
    25,   144,   104,   108,   144,    15,   296,   296,   296,   122,
   308,   309,   144,     9,   110,   112,   299,   254,   nil,   nil,
   299,   299,   nil,   nil,   299,   nil,   nil,   nil,   nil,   299,
   nil,   nil,   nil,   299,   nil,   nil,   nil,   296,   157,   157,
   157,   296,   296,   nil,   299,   296,   nil,   nil,   nil,   nil,
   296,   nil,   nil,   nil,   296,   nil,   nil,   nil,   157,   270,
   270,   270,   nil,   nil,   nil,   296,   nil,   nil,   nil,   157,
   nil,   nil,   nil,   157,   157,   nil,   nil,   157,   nil,   nil,
   nil,   nil,   157,   157,   nil,   nil,   157,   nil,   nil,   157,
   270,   145,   145,   145,   270,   270,   nil,   157,   270,   nil,
   nil,   nil,   nil,   270,   nil,   nil,   nil,   270,   nil,   nil,
   nil,   145,   146,   146,   146,   nil,   nil,   nil,   270,   nil,
   nil,   nil,   145,   nil,   nil,   nil,   145,   145,   nil,   nil,
   145,   nil,   146,   nil,   nil,   145,   145,   nil,   nil,   145,
   nil,   nil,   145,   146,    33,    33,    33,   146,   146,   nil,
   145,   146,   nil,   nil,   nil,   nil,   146,   146,   nil,   nil,
   146,   nil,   nil,   146,    33,    76,    76,    76,   nil,   nil,
   nil,   146,   nil,   nil,   nil,    33,   nil,   nil,   nil,    33,
    33,   nil,   nil,    33,   nil,    76,   nil,   nil,    33,    33,
   nil,   nil,    33,   nil,   nil,    33,    76,   147,   147,   147,
    76,    76,   nil,    33,    76,   nil,   nil,   nil,   nil,    76,
    76,   nil,   nil,    76,   nil,   nil,    76,   147,    37,    37,
    37,   nil,   nil,   nil,    76,   nil,   nil,   nil,   147,   nil,
   nil,   nil,   147,   147,   nil,   nil,   147,    75,    75,    75,
    75,   147,   147,   nil,   nil,   147,   nil,   nil,   147,    37,
   nil,   nil,   nil,    37,    37,   nil,   147,    37,   192,   192,
   192,   nil,    37,   nil,   nil,   nil,    37,   nil,    75,   201,
   201,   nil,    75,    75,   nil,   nil,    75,    37,   nil,   nil,
   nil,    75,   nil,   nil,   nil,    75,   nil,   nil,   nil,   192,
   207,   207,   207,   192,   192,   nil,    75,   192,   nil,   201,
   nil,   nil,   192,   201,   201,   nil,   192,   201,    71,    71,
    71,   nil,   201,   nil,   nil,   nil,   201,   192,   nil,   nil,
   nil,   207,   nil,   nil,   nil,   207,   207,   201,    71,   207,
   148,   148,   148,   nil,   207,   nil,   nil,   nil,   207,    71,
   nil,   nil,   nil,    71,    71,   nil,   nil,    71,   nil,   207,
   148,   nil,    71,    71,   nil,   nil,    71,   nil,   nil,    71,
   nil,   148,    51,    51,    51,   148,   148,    71,   nil,   148,
   nil,   nil,   nil,   nil,   148,   148,   nil,   nil,   148,   nil,
   nil,   148,   nil,   149,   149,   149,   nil,   nil,   nil,   148,
   nil,   nil,   nil,    51,   nil,   nil,   nil,    51,    51,   nil,
   nil,    51,   nil,   149,   nil,   nil,    51,   nil,   nil,   nil,
    51,   nil,   nil,   nil,   149,   151,   151,   151,   149,   149,
   nil,    51,   149,   nil,   nil,   nil,   nil,   149,   149,   nil,
   nil,   149,   nil,   nil,   149,   151,   152,   152,   152,   nil,
   nil,   nil,   149,   nil,   nil,   nil,   151,   nil,   nil,   nil,
   151,   151,   nil,   nil,   151,   nil,   152,   nil,   nil,   151,
   151,   nil,   nil,   151,   nil,   nil,   151,   152,   153,   153,
   153,   152,   152,   nil,   151,   152,   nil,   nil,   nil,   nil,
   152,   152,   nil,   nil,   152,   nil,   nil,   152,   153,   156,
   156,   156,   nil,   nil,   nil,   152,   nil,   nil,   nil,   153,
   nil,   nil,   nil,   153,   153,   nil,   nil,   153,   nil,   156,
   nil,   nil,   153,   153,   nil,   nil,   153,   nil,   nil,   153,
   156,    88,    88,    88,   156,   156,   nil,   153,   156,   nil,
   nil,   nil,   nil,   156,   156,   nil,   nil,   156,   nil,   nil,
   156,   nil,    82,    82,    82,   nil,   nil,   nil,   156,   nil,
   nil,   nil,    88,   nil,   nil,   nil,    88,    88,   nil,   nil,
    88,   nil,    82,   nil,   nil,    88,   nil,   nil,   nil,    88,
   nil,   nil,   nil,    82,   205,   205,   nil,    82,    82,   nil,
    88,    82,   nil,   nil,   nil,   nil,    82,    82,   246,   246,
    82,   nil,   nil,    82,   205,    48,    48,   nil,   nil,   nil,
   nil,    82,   nil,   nil,   205,   nil,   nil,   nil,   205,   205,
   nil,   nil,   205,   247,   247,    48,   205,   205,   246,   nil,
   nil,   205,   246,   246,   nil,    48,   246,   159,   159,    48,
    48,   246,   205,    48,   nil,   246,   nil,    48,    48,   nil,
   nil,   nil,    48,   247,   nil,   nil,   246,   247,   247,   283,
   283,   247,   nil,    48,   nil,   nil,   247,   159,   nil,   nil,
   247,   159,   159,   307,   307,   159,   nil,   nil,   nil,   nil,
   159,   247,   nil,   nil,   159,   nil,   nil,   nil,   nil,   283,
   nil,   nil,   nil,   283,   283,   159,   nil,   283,   136,   136,
   135,   135,   283,   307,   nil,   nil,   283,   307,   307,   nil,
   nil,   307,   nil,   nil,   nil,   nil,   307,   283,   136,   nil,
   307,   nil,   nil,   nil,   nil,   236,   236,   nil,   136,   236,
   135,   307,   136,   136,   135,   135,   136,   nil,   135,   nil,
   136,   136,   135,   135,   nil,   136,   nil,   135,   nil,   nil,
   130,   130,   nil,   130,   nil,   236,   136,   nil,   135,   236,
   236,   nil,   nil,   236,   nil,   nil,   nil,   nil,   236,   nil,
   nil,   nil,   236,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   130,    85,   nil,   236,   130,   130,   nil,   nil,   130,   nil,
    85,    85,   nil,   130,   nil,   nil,   nil,   130,   nil,    85,
    85,    85,    85,   137,   137,   nil,   nil,   nil,   130,   nil,
   nil,   137,   137,   137,   137,   137,   nil,   nil,   218,   218,
   218,   218,   nil,    85,    85,   218,   218,    85,    85,    85,
    85,    85,    85,   nil,    85,    85,   137,   137,   nil,   nil,
   137,   137,   137,   137,   137,   137,   nil,   137,   137,   102,
   102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   102,   102,
   102,   102,   226,   226,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   226,   226,   226,   226,   nil,   nil,   220,   220,   220,
   220,   nil,   102,   102,   220,   220,   102,   102,   102,   102,
   102,   102,   nil,   102,   102,   nil,   nil,   nil,   nil,   226,
   226,   226,   226,   226,   226,   nil,   226,   226,   222,   222,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   222,   222,   222,
   222,   101,   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   101,   101,   101,   101,   nil,   223,   nil,   nil,   nil,   nil,
   nil,   nil,   222,   223,   nil,   222,   222,   222,   222,   222,
   222,   nil,   222,   222,   101,   101,   224,   nil,   101,   101,
   101,   101,   101,   101,   224,   101,   101,   nil,   nil,   221,
   nil,   223,   223,   223,   223,   223,   223,   221,   223,   223,
   227,   nil,   219,   219,   219,   219,   219,   219,   227,   219,
   219,   nil,   224,   224,   224,   224,   224,   224,   nil,   224,
   224,   nil,   nil,   nil,   302,   221,   221,   221,   221,   221,
   221,   nil,   221,   221,   nil,   nil,   227,   227,   227,   227,
   227,   227,   nil,   227,   227,   302,   190,   302,   302,   nil,
   302,   302,   nil,   302,   nil,   302,   nil,   302,   nil,   302,
   nil,   nil,   302,   302,   nil,   258,   nil,   190,   nil,   190,
   190,   nil,   190,   190,   nil,   190,   nil,   190,   nil,   190,
   nil,   190,   nil,   nil,   190,   190,   258,   266,   258,   258,
   nil,   258,   258,   nil,   258,   nil,   258,   nil,   258,   nil,
   258,   nil,   nil,   258,   258,   nil,   231,   nil,   266,   nil,
   266,   266,   nil,   266,   266,   nil,   266,   nil,   266,   nil,
   266,   nil,   266,   nil,   nil,   266,   266,   231,   155,   231,
   231,   nil,   231,   231,   nil,   231,   nil,   231,   nil,   231,
   nil,   231,   nil,   nil,   231,   231,   nil,   310,   nil,   155,
   nil,   155,   155,   nil,   155,   155,   nil,   155,   nil,   155,
   nil,   155,   nil,   155,   nil,   nil,   155,   155,   310,   182,
   310,   310,   nil,   310,   310,   nil,   310,   nil,   310,   nil,
   310,   nil,   310,   nil,   nil,   310,   310,   nil,   312,   nil,
   182,   nil,   182,   182,   nil,   182,   182,   nil,   182,   nil,
   182,   nil,   182,   nil,   182,   nil,   nil,   182,   182,   312,
   322,   312,   312,   nil,   312,   312,   nil,   312,   nil,   312,
   nil,   312,   nil,   312,   nil,   nil,   312,   312,   nil,   256,
   nil,   322,   nil,   322,   322,   nil,   322,   322,   nil,   322,
   nil,   322,   nil,   322,   nil,   322,   nil,   nil,   322,   322,
   256,   324,   256,   256,   nil,   256,   256,   nil,   256,   nil,
   256,   nil,   256,   nil,   256,   nil,   nil,   256,   256,   nil,
   nil,   nil,   324,   nil,   324,   324,   nil,   324,   324,   nil,
   324,   nil,   324,   nil,   324,   nil,   324,   nil,   nil,   324,
   324,    30,   nil,    30,    30,   nil,    30,    30,   nil,    30,
   nil,    30,   nil,    30,   nil,    30,   nil,   nil,    30,    30,
     0,   nil,     0,     0,   nil,     0,     0,   nil,     0,   nil,
     0,   nil,     0,   nil,     0,   nil,   nil,     0,     0,   228,
   228,   228,   228,   228,   228,   nil,   228,   228 ]

racc_action_pointer = [
  1532,   160,   nil,   nil,   nil,    48,   nil,   nil,   nil,   287,
   nil,   nil,    23,   nil,   nil,   279,   157,   nil,   178,   nil,
   210,     6,   nil,    99,   nil,   280,    66,   215,    78,   nil,
  1513,   nil,   nil,   422,    -2,   215,   nil,   496,   nil,   nil,
   nil,     7,   nil,   nil,   202,   nil,   209,   nil,   872,   nil,
   202,   640,   218,   nil,   207,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   188,   nil,   206,   185,   nil,   nil,   172,   168,
   164,   586,   nil,   nil,   122,   515,   443,   nil,   119,    56,
    29,   180,   820,   nil,   200,  1045,   205,   221,   799,   191,
    25,    49,   231,   nil,   228,   255,   236,   nil,   nil,   257,
   nil,  1176,  1104,    76,   276,   nil,   nil,   nil,   262,   nil,
   255,    74,   285,    -5,   nil,   183,   223,   231,   nil,   nil,
   nil,     2,   283,   nil,    29,   nil,   nil,   nil,    -5,   236,
  1017,   nil,    58,   nil,   146,   967,   965,  1058,   129,   nil,
   nil,   nil,    72,   125,   231,   369,   390,   475,   608,   661,
   184,   693,   714,   746,   171,  1371,   767,   316,    19,   904,
   139,   201,   195,    40,   -11,   nil,   nil,    -9,   nil,   nil,
   nil,   nil,   120,   161,   180,   nil,    82,   190,   nil,   nil,
   nil,   nil,  1412,    27,    51,   104,    93,    88,    94,   nil,
  1289,   nil,   536,   139,   115,   158,   nil,   nil,   nil,   148,
   nil,   546,   nil,   nil,   nil,   851,   nil,   568,   nil,   nil,
   nil,   nil,   nil,    75,   nil,   nil,   192,   117,  1036,  1200,
  1095,  1223,  1163,  1189,  1210,   nil,  1117,  1234,  1527,   nil,
   193,  1349,    76,   -41,   128,   nil,   992,   nil,    81,   nil,
   229,   -20,    57,   nil,   nil,   nil,   865,   890,   nil,   232,
   nil,   231,     1,   nil,   284,   226,  1472,   nil,  1308,   nil,
   nil,   nil,   nil,   nil,   244,   nil,  1330,   nil,   nil,   nil,
   337,   nil,   182,   nil,   nil,   nil,   nil,   nil,   253,   232,
   nil,   nil,   256,   926,   nil,   nil,   nil,   nil,   249,   nil,
   252,   253,   254,   255,   nil,   272,   284,   nil,   119,   263,
   nil,   nil,  1267,   nil,   nil,   nil,   nil,   940,   283,   284,
  1390,   nil,  1431,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1453,   nil,  1494,   nil,   nil ]

racc_action_default = [
  -172,  -198,   -15,    -3,  -165,  -198,   -16,    -5,  -163,  -198,
   -17,    -6,  -198,    -7,    -8,  -198,  -164,    -9,  -198,   -10,
  -198,  -198,   -11,  -198,   -12,  -198,  -198,   -39,  -198,   -13,
    -1,   -14,    -2,  -198,  -198,  -172,  -164,   -72,  -170,  -169,
  -168,  -172,  -171,  -166,   -79,  -189,  -198,   -31,  -198,   -33,
   -32,  -198,   -63,  -102,   -21,  -104,  -103,   -22,   -62,   -23,
  -197,   -61,   -26,  -153,  -198,   -27,  -152,  -151,   -28,   -29,
   -30,  -198,   -94,  -112,   -90,  -198,  -198,   -97,   -91,   -95,
   -99,   -92,  -198,   -96,   -93,  -198,   -98,  -198,  -198,   -72,
  -172,  -172,   -42,  -154,  -156,  -198,  -172,   -40,   -38,  -198,
    -4,   -70,   -71,  -198,  -198,  -185,   -73,   -67,   -64,   -63,
   -59,   -62,  -195,   -65,   -57,   -68,  -198,   -66,  -150,   -69,
  -149,  -198,  -198,  -183,  -198,   -77,   -78,   -80,  -198,  -195,
  -198,   -20,  -198,   -82,  -198,  -198,  -198,  -198,  -198,  -192,
  -128,  -121,  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,
  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,
  -198,  -198,  -195,  -172,  -198,   -46,   -48,  -198,   -62,   -55,
   -54,   -45,  -198,   -79,  -198,   327,  -173,  -198,  -174,  -187,
  -186,  -188,  -198,  -198,   -60,  -198,  -198,  -196,   -72,  -184,
  -198,  -167,  -198,  -198,  -196,  -198,  -147,  -139,  -140,   -62,
  -145,  -198,  -148,  -146,   -18,  -198,  -105,  -198,  -193,  -194,
   -24,   -25,  -101,  -198,  -131,  -190,  -194,  -117,  -119,  -123,
  -120,  -125,  -130,  -127,  -124,  -113,  -129,  -126,  -122,  -114,
  -109,  -198,  -115,  -116,  -118,  -137,  -198,  -133,  -198,  -106,
  -198,  -198,  -198,   -51,   -50,   -44,  -198,  -198,   -43,  -195,
  -155,  -182,  -198,  -177,  -180,  -198,  -198,  -160,  -198,   -34,
   -58,   -75,   -35,   -74,  -195,  -162,  -198,   -76,   -37,   -81,
  -198,  -142,  -195,   -19,   -83,  -100,  -191,  -108,  -198,  -109,
  -132,  -134,  -198,  -198,   -36,   -49,   -47,   -88,   -84,   -52,
   -85,   -89,   -86,   -87,   -53,  -198,  -198,  -176,  -198,  -198,
  -175,  -158,  -198,  -159,   -56,  -161,  -144,  -198,  -198,  -194,
  -198,  -107,  -198,  -138,   -41,  -181,  -178,  -179,  -157,  -143,
  -141,  -111,  -198,  -136,  -198,  -110,  -135 ]

racc_goto_table = [
    21,    15,   100,   198,    30,   186,   114,   195,   253,    54,
   112,   119,    43,    35,   237,   164,   172,    59,   129,    32,
   210,    47,   193,   277,    67,   125,    25,   134,    99,   225,
    21,    15,   269,   229,    96,   307,   235,   289,   294,   236,
   286,   132,   107,    92,   197,    67,   183,   272,    94,    59,
    50,   138,    69,    47,   105,   240,    67,    93,   177,   104,
   123,    41,   162,   122,   160,   110,   255,   252,    98,   180,
   nil,   108,   311,   118,   271,   nil,   nil,    87,   195,   nil,
   nil,   nil,    50,   nil,    69,   nil,   nil,   nil,   241,   nil,
   210,   281,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   133,   nil,
   nil,   179,   nil,   235,   nil,   178,   nil,   nil,   nil,   nil,
   nil,   189,   nil,   nil,   191,   nil,   nil,   nil,   nil,   213,
   316,   nil,   133,   nil,   nil,   nil,   211,    59,    67,   nil,
    47,    47,   295,    67,    67,   133,   nil,   249,   nil,   nil,
   nil,   nil,   nil,   260,   125,    21,    15,   304,   119,   231,
   313,   264,   nil,   nil,   196,   308,   118,    67,   263,    50,
    50,    69,    69,   nil,   nil,   125,   nil,   nil,   nil,   nil,
   319,   nil,    21,    15,   195,   nil,   258,   nil,   nil,   107,
    21,    15,    67,   196,   266,   118,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   100,   nil,   nil,   211,   nil,   250,    67,
    47,   nil,   nil,    67,   nil,    65,   nil,   nil,   108,   nil,
   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   100,    21,    15,   nil,   nil,   196,   115,   118,   100,    50,
   nil,    69,   261,   nil,    67,   nil,   nil,    65,   nil,   267,
   nil,   287,   287,   nil,    67,    67,    21,    15,    21,    15,
   302,   nil,   nil,   nil,   274,    62,    21,    15,   nil,   nil,
   196,   nil,   118,   nil,   100,   nil,   nil,   nil,   nil,   nil,
   288,   288,   293,   293,   nil,   nil,   113,   nil,   nil,   170,
   170,    67,   nil,   nil,   100,   nil,   100,    62,   nil,    68,
   nil,   nil,    21,    15,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    15,    21,    15,   322,    67,   324,   196,   nil,   118,
   117,   nil,    21,    15,    21,    15,   nil,   306,   nil,   202,
   nil,    68,   nil,    70,    65,    65,   nil,   nil,   nil,   169,
   169,   196,   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   315,   120,   nil,   317,   nil,   202,   nil,
   nil,   nil,   170,   nil,   nil,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   nil,   nil,   nil,   115,    62,    62,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   202,   nil,   nil,   nil,    65,   nil,   nil,   nil,   200,   nil,
    85,   nil,   169,   203,   nil,   nil,   nil,   nil,    68,    68,
   nil,   nil,   nil,   nil,   nil,   101,   102,   nil,   nil,   nil,
   nil,   nil,   nil,   113,   nil,   202,   nil,   nil,   nil,   nil,
   nil,   170,   203,   nil,   nil,   291,   291,   120,   nil,   nil,
   200,   nil,    70,    70,    62,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   137,   nil,   nil,   nil,   117,   140,   nil,
   nil,   nil,   nil,   nil,   141,   nil,   120,   nil,   nil,   nil,
   nil,   nil,   202,   nil,   203,   200,   nil,   nil,    68,   nil,
   nil,   169,   nil,   nil,   nil,   290,   290,   nil,   nil,   nil,
   nil,   120,   nil,   nil,   nil,   nil,   202,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,   203,
   nil,   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,   292,
   292,   nil,   200,   nil,   217,   218,   219,   220,   221,   222,
   223,   224,   nil,   226,   227,   228,   nil,   nil,   232,   233,
   234,   nil,   nil,   120,   nil,   nil,   200,   nil,   nil,   nil,
   nil,   nil,   nil,   120,   120,   nil,   203,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   203,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   120 ]

racc_goto_check = [
    33,    20,     4,    61,     2,    32,    43,    59,    71,    18,
    31,    46,    68,    28,    57,    37,    37,    20,    34,     3,
    19,    26,    32,    54,    45,    48,     1,    52,    33,    55,
    33,    20,    51,    55,    28,    53,    59,    42,    42,    56,
    38,    18,    26,    36,    60,    45,    30,    62,    63,    20,
    27,    52,    24,    26,     3,    32,    45,    27,    64,    65,
     3,    66,    31,    67,    52,    29,    69,    70,     5,    72,
   nil,    27,    54,    24,    61,   nil,   nil,    49,    59,   nil,
   nil,   nil,    27,   nil,    24,   nil,   nil,   nil,    37,   nil,
    19,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,
   nil,    28,   nil,    59,   nil,     3,   nil,   nil,   nil,   nil,
   nil,    68,   nil,   nil,    68,   nil,   nil,   nil,   nil,    18,
    71,   nil,    49,   nil,   nil,   nil,    20,    20,    45,   nil,
    26,    26,    32,    45,    45,    49,   nil,    34,   nil,   nil,
   nil,   nil,   nil,    43,    48,    33,    20,    32,    46,     2,
    59,    31,   nil,   nil,    27,    32,    24,    45,    48,    27,
    27,    24,    24,   nil,   nil,    48,   nil,   nil,   nil,   nil,
    61,   nil,    33,    20,    59,   nil,     2,   nil,   nil,    26,
    33,    20,    45,    27,     2,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,   nil,    20,   nil,    27,    45,
    26,   nil,   nil,    45,   nil,    22,   nil,   nil,    27,   nil,
    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,    33,    20,   nil,   nil,    27,    22,    24,     4,    27,
   nil,    24,    49,   nil,    45,   nil,   nil,    22,   nil,    49,
   nil,    26,    26,   nil,    45,    45,    33,    20,    33,    20,
     2,   nil,   nil,   nil,    49,    21,    33,    20,   nil,   nil,
    27,   nil,    24,   nil,     4,   nil,   nil,   nil,   nil,   nil,
    27,    27,    24,    24,   nil,   nil,    21,   nil,   nil,    22,
    22,    45,   nil,   nil,     4,   nil,     4,    21,   nil,    23,
   nil,   nil,    33,    20,   nil,   nil,   nil,   nil,   nil,   nil,
    33,    20,    33,    20,     2,    45,     2,    27,   nil,    24,
    23,   nil,    33,    20,    33,    20,   nil,    49,   nil,    22,
   nil,    23,   nil,    25,    22,    22,   nil,   nil,   nil,    21,
    21,    27,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,    25,   nil,    49,   nil,    22,   nil,
   nil,   nil,    22,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,    22,    21,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,    22,   nil,   nil,   nil,    21,   nil,
    47,   nil,    21,    23,   nil,   nil,   nil,   nil,    23,    23,
   nil,   nil,   nil,   nil,   nil,    47,    47,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,    22,   nil,   nil,   nil,   nil,
   nil,    22,    23,   nil,   nil,    22,    22,    25,   nil,   nil,
    21,   nil,    25,    25,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,    23,    47,   nil,
   nil,   nil,   nil,   nil,    47,   nil,    25,   nil,   nil,   nil,
   nil,   nil,    22,   nil,    23,    21,   nil,   nil,    23,   nil,
   nil,    21,   nil,   nil,   nil,    21,    21,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,    23,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,    23,
    23,   nil,    21,   nil,    47,    47,    47,    47,    47,    47,
    47,    47,   nil,    47,    47,    47,   nil,   nil,    47,    47,
    47,   nil,   nil,    25,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,    25,    25,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    26,     4,    19,   -28,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -7,  -115,
     1,   249,   199,   283,    36,   317,     5,    34,     8,    28,
   -64,   -27,  -107,     0,   -26,   nil,    22,   -75,  -202,   nil,
   nil,   nil,  -209,   -31,   nil,     8,   -26,   392,   -19,    57,
   nil,  -162,   -24,  -237,  -207,  -121,  -120,  -145,   nil,  -123,
   -86,  -127,  -154,    25,   -38,    24,    49,    22,     0,  -110,
  -109,  -168,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,   171,     3,     7,    11,    13,    14,    17,
    19,    22,    24,    29,    31,     2,     6,    10,   nil,    57,
    77,    78,    79,    81,    84,    86,    72,    74,     9,   nil,
   nil,   nil,   nil,    64,   nil,    28,   nil,   nil,   165,   242,
   166,   167,   nil,   nil,   116,    80,    83,   nil,   106,    73,
   126,   127,   nil,   207,   nil,    63,   nil,   nil,   238,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :APPENDS => 14,
 :LESSEQUAL => 15,
 :NOTEQUAL => 16,
 :DOT => 17,
 :COLON => 18,
 :LLCOLLECT => 19,
 :RRCOLLECT => 20,
 :QMARK => 21,
 :LPAREN => 22,
 :RPAREN => 23,
 :ISEQUAL => 24,
 :GREATEREQUAL => 25,
 :GREATERTHAN => 26,
 :LESSTHAN => 27,
 :IF => 28,
 :ELSE => 29,
 :IMPORT => 30,
 :DEFINE => 31,
 :ELSIF => 32,
 :VARIABLE => 33,
 :CLASS => 34,
 :INHERITS => 35,
 :NODE => 36,
 :BOOLEAN => 37,
 :NAME => 38,
 :SEMIC => 39,
 :CASE => 40,
 :DEFAULT => 41,
 :AT => 42,
 :LCOLLECT => 43,
 :RCOLLECT => 44,
 :CLASSNAME => 45,
 :CLASSREF => 46,
 :NOT => 47,
 :OR => 48,
 :AND => 49,
 :UNDEF => 50,
 :PARROW => 51,
 :PLUS => 52,
 :MINUS => 53,
 :TIMES => 54,
 :DIV => 55,
 :LSHIFT => 56,
 :RSHIFT => 57,
 :UMINUS => 58,
 :MATCH => 59,
 :NOMATCH => 60,
 :REGEX => 61 }

racc_use_result_var = true

racc_nt_base = 62

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'qtexts',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 44
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 60
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 84
  def _reduce_18( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 92
  def _reduce_19( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 98
  def _reduce_20( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 106
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 114
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 123
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

module_eval <<'.,.,', 'grammar.ra', 136
  def _reduce_33( val, _values, result )
                    result = ast AST::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 158
  def _reduce_34( val, _values, result )
    @lexer.commentpop
    array = val[2]
    if array.instance_of?(AST::ResourceInstance)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInstance)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 161
  def _reduce_35( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 164
  def _reduce_36( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 170
  def _reduce_37( val, _values, result )
    @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 197
  def _reduce_38( val, _values, result )
    type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_39( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 199
  def _reduce_40( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 223
  def _reduce_41( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_42( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 252
  def _reduce_43( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_44( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 45 omitted

 # reduce 46 omitted

module_eval <<'.,.,', 'grammar.ra', 268
  def _reduce_47( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 48 omitted

module_eval <<'.,.,', 'grammar.ra', 274
  def _reduce_49( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_50( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 276
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 283
  def _reduce_52( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 288
  def _reduce_53( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 54 omitted

 # reduce 55 omitted

module_eval <<'.,.,', 'grammar.ra', 295
  def _reduce_56( val, _values, result )
    result = ast AST::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 57 omitted

module_eval <<'.,.,', 'grammar.ra', 305
  def _reduce_58( val, _values, result )
    if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

module_eval <<'.,.,', 'grammar.ra', 312
  def _reduce_61( val, _values, result )
    result = ast AST::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 316
  def _reduce_62( val, _values, result )
    result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 320
  def _reduce_63( val, _values, result )
    result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 64 omitted

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

module_eval <<'.,.,', 'grammar.ra', 336
  def _reduce_70( val, _values, result )
    if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 341
  def _reduce_71( val, _values, result )
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_72( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_73( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 355
  def _reduce_74( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 359
  def _reduce_75( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 364
  def _reduce_76( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true
   result
  end
.,.,

 # reduce 77 omitted

 # reduce 78 omitted

module_eval <<'.,.,', 'grammar.ra', 372
  def _reduce_79( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 372
  def _reduce_80( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 381
  def _reduce_81( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 82 omitted

module_eval <<'.,.,', 'grammar.ra', 390
  def _reduce_83( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

module_eval <<'.,.,', 'grammar.ra', 417
  def _reduce_100( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 422
  def _reduce_101( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 426
  def _reduce_102( val, _values, result )
    result = ast AST::String, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 428
  def _reduce_103( val, _values, result )
    result = ast AST::FlatString, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 432
  def _reduce_104( val, _values, result )
    result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_105( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 439
  def _reduce_106( val, _values, result )
    result = ast AST::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 453
  def _reduce_107( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 466
  def _reduce_108( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 109 omitted

module_eval <<'.,.,', 'grammar.ra', 472
  def _reduce_110( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_111( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)
   result
  end
.,.,

 # reduce 112 omitted

module_eval <<'.,.,', 'grammar.ra', 493
  def _reduce_113( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 496
  def _reduce_114( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 499
  def _reduce_115( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 502
  def _reduce_116( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 505
  def _reduce_117( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 508
  def _reduce_118( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 511
  def _reduce_119( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 514
  def _reduce_120( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 517
  def _reduce_121( val, _values, result )
    result = ast AST::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 520
  def _reduce_122( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 523
  def _reduce_123( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 526
  def _reduce_124( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 529
  def _reduce_125( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 532
  def _reduce_126( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 535
  def _reduce_127( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 538
  def _reduce_128( val, _values, result )
    result = ast AST::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 541
  def _reduce_129( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 544
  def _reduce_130( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 547
  def _reduce_131( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 556
  def _reduce_132( val, _values, result )
    @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 133 omitted

module_eval <<'.,.,', 'grammar.ra', 566
  def _reduce_134( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 571
  def _reduce_135( val, _values, result )
    @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_136( val, _values, result )
    @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 137 omitted

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_138( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_139( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 140 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_141( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 142 omitted

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_143( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_144( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 145 omitted

 # reduce 146 omitted

 # reduce 147 omitted

 # reduce 148 omitted

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_152( val, _values, result )
    result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 153 omitted

module_eval <<'.,.,', 'grammar.ra', 625
  def _reduce_154( val, _values, result )
 result = [val[0].value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 629
  def _reduce_155( val, _values, result )
    results = val[0] << val[2].value
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 637
  def _reduce_156( val, _values, result )
    val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 648
  def _reduce_157( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 653
  def _reduce_158( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 662
  def _reduce_159( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :code => val[4], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 668
  def _reduce_160( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 674
  def _reduce_161( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_162( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 679
  def _reduce_163( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_164( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 682
  def _reduce_165( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 166 omitted

module_eval <<'.,.,', 'grammar.ra', 692
  def _reduce_167( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 693
  def _reduce_168( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 694
  def _reduce_169( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 695
  def _reduce_170( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 696
  def _reduce_171( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 701
  def _reduce_172( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 705
  def _reduce_173( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 174 omitted

module_eval <<'.,.,', 'grammar.ra', 710
  def _reduce_175( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 714
  def _reduce_176( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 177 omitted

module_eval <<'.,.,', 'grammar.ra', 721
  def _reduce_178( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 726
  def _reduce_179( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 730
  def _reduce_180( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 732
  def _reduce_181( val, _values, result )
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 734
  def _reduce_182( val, _values, result )
    result = [val[0][:value]]
   result
  end
.,.,

 # reduce 183 omitted

module_eval <<'.,.,', 'grammar.ra', 739
  def _reduce_184( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 185 omitted

module_eval <<'.,.,', 'grammar.ra', 744
  def _reduce_186( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 187 omitted

 # reduce 188 omitted

module_eval <<'.,.,', 'grammar.ra', 750
  def _reduce_189( val, _values, result )
    result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 758
  def _reduce_190( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 765
  def _reduce_191( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 767
  def _reduce_192( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 193 omitted

 # reduce 194 omitted

 # reduce 195 omitted

module_eval <<'.,.,', 'grammar.ra', 772
  def _reduce_196( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 777
  def _reduce_197( val, _values, result )
    result = ast AST::Regex, :value => val[0][:value]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
