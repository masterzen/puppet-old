#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id19142e6f7f', 'grammar.ra', 866

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id19142e6f7f

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 70, :_reduce_1,
 1, 70, :_reduce_none,
 1, 71, :_reduce_none,
 2, 71, :_reduce_4,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 3, 87, :_reduce_19,
 3, 87, :_reduce_20,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 89, :_reduce_none,
 1, 89, :_reduce_none,
 1, 89, :_reduce_none,
 1, 89, :_reduce_none,
 4, 81, :_reduce_28,
 5, 81, :_reduce_29,
 3, 81, :_reduce_30,
 2, 81, :_reduce_31,
 1, 91, :_reduce_none,
 1, 91, :_reduce_none,
 3, 91, :_reduce_34,
 3, 91, :_reduce_35,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_44,
 5, 74, :_reduce_45,
 5, 74, :_reduce_46,
 5, 74, :_reduce_47,
 5, 85, :_reduce_48,
 2, 75, :_reduce_49,
 1, 108, :_reduce_50,
 2, 108, :_reduce_51,
 6, 76, :_reduce_52,
 2, 76, :_reduce_53,
 3, 109, :_reduce_54,
 3, 109, :_reduce_55,
 1, 110, :_reduce_none,
 1, 110, :_reduce_none,
 3, 110, :_reduce_58,
 1, 111, :_reduce_none,
 3, 111, :_reduce_60,
 1, 112, :_reduce_61,
 1, 112, :_reduce_62,
 3, 113, :_reduce_63,
 3, 113, :_reduce_64,
 1, 114, :_reduce_none,
 1, 114, :_reduce_none,
 4, 116, :_reduce_67,
 1, 102, :_reduce_none,
 3, 102, :_reduce_69,
 0, 103, :_reduce_none,
 1, 103, :_reduce_none,
 1, 118, :_reduce_72,
 1, 93, :_reduce_73,
 1, 95, :_reduce_74,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 3, 77, :_reduce_82,
 3, 77, :_reduce_83,
 3, 86, :_reduce_84,
 0, 104, :_reduce_85,
 1, 104, :_reduce_86,
 3, 104, :_reduce_87,
 3, 122, :_reduce_88,
 3, 124, :_reduce_89,
 1, 125, :_reduce_none,
 1, 125, :_reduce_none,
 0, 107, :_reduce_92,
 1, 107, :_reduce_93,
 3, 107, :_reduce_94,
 1, 126, :_reduce_none,
 3, 126, :_reduce_96,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 1, 123, :_reduce_none,
 4, 97, :_reduce_115,
 3, 97, :_reduce_116,
 1, 99, :_reduce_117,
 2, 99, :_reduce_118,
 2, 129, :_reduce_119,
 1, 130, :_reduce_120,
 2, 130, :_reduce_121,
 1, 96, :_reduce_122,
 4, 90, :_reduce_123,
 4, 90, :_reduce_124,
 6, 79, :_reduce_125,
 5, 79, :_reduce_126,
 0, 131, :_reduce_none,
 4, 131, :_reduce_128,
 3, 131, :_reduce_129,
 1, 120, :_reduce_none,
 3, 120, :_reduce_131,
 3, 120, :_reduce_132,
 3, 120, :_reduce_133,
 3, 120, :_reduce_134,
 3, 120, :_reduce_135,
 3, 120, :_reduce_136,
 3, 120, :_reduce_137,
 3, 120, :_reduce_138,
 3, 120, :_reduce_139,
 2, 120, :_reduce_140,
 3, 120, :_reduce_141,
 3, 120, :_reduce_142,
 3, 120, :_reduce_143,
 3, 120, :_reduce_144,
 3, 120, :_reduce_145,
 3, 120, :_reduce_146,
 2, 120, :_reduce_147,
 3, 120, :_reduce_148,
 3, 120, :_reduce_149,
 3, 120, :_reduce_150,
 5, 78, :_reduce_151,
 1, 133, :_reduce_none,
 2, 133, :_reduce_153,
 5, 134, :_reduce_154,
 4, 134, :_reduce_155,
 1, 135, :_reduce_none,
 3, 135, :_reduce_157,
 3, 98, :_reduce_158,
 1, 137, :_reduce_none,
 4, 137, :_reduce_160,
 1, 139, :_reduce_none,
 3, 139, :_reduce_162,
 3, 138, :_reduce_163,
 1, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 136, :_reduce_171,
 1, 136, :_reduce_none,
 1, 140, :_reduce_173,
 1, 141, :_reduce_none,
 3, 141, :_reduce_175,
 2, 80, :_reduce_176,
 6, 82, :_reduce_177,
 5, 82, :_reduce_178,
 7, 83, :_reduce_179,
 6, 83, :_reduce_180,
 6, 84, :_reduce_181,
 5, 84, :_reduce_182,
 1, 106, :_reduce_183,
 1, 101, :_reduce_184,
 1, 101, :_reduce_185,
 1, 101, :_reduce_186,
 1, 144, :_reduce_none,
 3, 144, :_reduce_188,
 1, 146, :_reduce_189,
 1, 147, :_reduce_190,
 1, 147, :_reduce_191,
 1, 147, :_reduce_192,
 1, 147, :_reduce_none,
 0, 72, :_reduce_194,
 0, 148, :_reduce_195,
 1, 142, :_reduce_none,
 3, 142, :_reduce_197,
 3, 142, :_reduce_198,
 1, 149, :_reduce_none,
 3, 149, :_reduce_200,
 3, 150, :_reduce_201,
 1, 150, :_reduce_202,
 3, 150, :_reduce_203,
 1, 150, :_reduce_204,
 1, 145, :_reduce_none,
 2, 145, :_reduce_206,
 1, 143, :_reduce_none,
 2, 143, :_reduce_208,
 1, 151, :_reduce_none,
 1, 151, :_reduce_none,
 1, 94, :_reduce_211,
 3, 119, :_reduce_212,
 4, 119, :_reduce_213,
 2, 119, :_reduce_214,
 1, 127, :_reduce_none,
 1, 127, :_reduce_none,
 0, 105, :_reduce_none,
 1, 105, :_reduce_218,
 1, 132, :_reduce_219,
 3, 128, :_reduce_220,
 4, 128, :_reduce_221,
 2, 128, :_reduce_222,
 1, 152, :_reduce_none,
 3, 152, :_reduce_224,
 3, 153, :_reduce_225,
 1, 154, :_reduce_226,
 1, 154, :_reduce_227,
 4, 121, :_reduce_228,
 1, 100, :_reduce_none,
 4, 100, :_reduce_230 ]

racc_reduce_n = 231

racc_shift_n = 381

racc_action_table = [
   255,   256,    55,    63,   162,    64,   227,    48,   155,    82,
   250,   244,   181,   204,   209,   161,    46,    47,    65,   243,
   168,   216,   200,   202,   205,   208,   219,   183,    72,    75,
    72,    75,   102,   157,    72,    75,   227,   192,   240,   241,
    58,  -166,    62,    60,    72,    75,   203,   207,   229,   183,
   212,   195,   196,   197,   199,   201,   277,   206,   210,   276,
    55,    71,  -168,    59,   198,    83,   142,    71,   191,    92,
   304,    83,    86,   116,   136,    92,   302,   161,    89,    76,
    79,    83,   267,   305,    89,    92,    72,    75,   325,    59,
   136,   303,   268,   162,    89,    59,    72,    75,    58,   162,
    55,    60,    72,    75,   161,    59,   102,   253,   106,   168,
   161,    72,    75,   240,   241,   168,    59,   180,   346,   161,
   254,    59,   306,    83,   267,  -169,   216,    92,   309,   161,
   343,   219,   136,    83,   267,    71,    89,    92,    58,    83,
    86,    60,   136,    92,    72,    75,    89,    59,    79,   191,
    72,    75,    89,   162,   102,    37,   106,    59,  -165,    38,
   353,    59,   172,    59,   161,   312,    11,   270,   354,   168,
   245,   365,    97,    63,   196,   197,   172,    71,  -167,   206,
   210,    83,    86,    71,   151,    92,   198,    83,    86,    76,
    79,    92,   317,   318,    89,  -167,    79,   100,    72,    75,
    89,  -164,   102,    94,   106,    59,  -165,   212,   195,   196,
   197,    59,    37,  -183,   206,   210,    38,  -164,    37,   180,
    97,   198,    38,    11,    72,    75,   206,   210,    82,    11,
    14,    71,    48,   198,   335,    83,    86,   230,   274,    92,
   206,   210,   245,   273,    79,   100,    74,   198,    89,    72,
    75,    94,    37,   102,   337,   106,   126,    71,  -166,    59,
   175,    83,    86,    11,    14,    92,   340,   183,   269,    76,
    79,    97,   245,   246,    89,    72,    75,   174,  -170,   102,
    37,   106,    71,   344,   126,    59,    83,    86,    59,   239,
    92,    11,    14,   240,   241,    79,   100,    97,   172,    89,
    72,    75,    94,  -169,   102,  -168,   106,   213,    71,    64,
    59,   214,    83,    86,    72,    75,    92,   221,   102,    37,
   106,    79,   100,    38,    82,    89,   321,   248,    94,   154,
    11,   245,   246,    71,   120,   151,    59,    83,    86,    72,
    75,    92,   222,   102,   120,   106,    79,    71,  -166,   275,
    89,    83,    86,   349,   224,    92,  -164,   225,    72,    75,
    79,    59,   116,  -167,    89,   352,   -21,   -21,   -21,   -21,
  -165,   228,    71,   225,   209,    59,    83,    86,   196,   197,
    92,    52,   200,   206,   210,    79,   151,  -166,  -164,    89,
   198,   161,  -167,  -165,  -169,    83,   267,    72,    75,    92,
    59,   102,   363,   106,   136,    50,   230,   349,    89,   369,
   212,   195,   196,   197,   199,   201,    49,   206,   210,    59,
   371,   227,    72,    75,   198,  -218,   102,   225,   106,   374,
    71,    40,    39,   233,    83,    86,   236,   nil,    92,    44,
    45,    41,    42,    79,    97,   nil,   nil,    89,    72,    75,
   nil,   nil,   102,   nil,   106,    71,   nil,   nil,    59,    83,
    86,   nil,   nil,    92,   -23,   -23,   -23,   -23,    79,   100,
    97,   nil,    89,   nil,   nil,    94,   nil,   nil,    72,    75,
   nil,    71,   102,    59,   106,    83,    86,   nil,   nil,    92,
    44,    45,    41,    42,    79,   100,   nil,   nil,    89,   nil,
    97,    94,   nil,   nil,    72,    75,   nil,   nil,   102,    59,
   106,    71,   nil,   nil,   nil,    83,    86,   nil,   nil,    92,
   nil,   nil,   nil,   nil,    79,   100,    97,   nil,    89,   nil,
   nil,    94,   nil,   nil,    72,    75,   nil,    71,   102,    59,
   106,    83,    86,   nil,   nil,    92,   nil,   nil,   nil,   nil,
    79,   100,   nil,   nil,    89,   nil,    97,    94,   nil,   nil,
    72,    75,   nil,   nil,   102,    59,   106,    71,   nil,   nil,
   nil,    83,    86,   nil,   nil,    92,   nil,   nil,   nil,   nil,
    79,   100,    72,    75,    89,   nil,   102,    94,   106,   nil,
   nil,   nil,   nil,    71,   nil,    59,   nil,    83,    86,   nil,
   nil,    92,   nil,    72,    75,   nil,    79,   102,   nil,   106,
    89,   nil,   nil,   nil,   nil,    71,   nil,   nil,   nil,    83,
    86,    59,   nil,    92,   nil,    97,   nil,   nil,    79,    72,
    75,   nil,    89,   102,   nil,   106,    71,   nil,   nil,   nil,
    83,    86,   nil,    59,    92,   nil,   nil,   nil,   nil,    79,
   100,    97,   nil,    89,   nil,   nil,    94,   nil,   nil,    72,
    75,   nil,    71,   102,    59,   106,    83,    86,   nil,   nil,
    92,   nil,   nil,   nil,   nil,    79,   100,   nil,   nil,    89,
   nil,    97,    94,   nil,   nil,    72,    75,   nil,   nil,   102,
    59,   106,    71,   nil,   nil,   nil,    83,    86,   nil,   nil,
    92,   nil,   nil,   nil,   nil,    79,   100,    97,   nil,    89,
   nil,   nil,    94,   nil,   nil,    72,    75,   nil,    71,   102,
    59,   106,    83,    86,   nil,   nil,    92,   nil,   nil,   nil,
   nil,    79,   100,   nil,   nil,    89,   nil,    97,    94,   nil,
   nil,    72,    75,   nil,   nil,   102,    59,   106,    71,   nil,
   nil,   nil,    83,    86,   nil,   nil,    92,   nil,   nil,   nil,
   nil,    79,   100,    72,    75,    89,   nil,   102,    94,   106,
   nil,   nil,   nil,   nil,    71,   nil,    59,   nil,    83,    86,
   nil,   nil,    92,   nil,   nil,    97,   nil,    79,    72,    75,
   nil,    89,   102,   nil,   106,   nil,    71,   nil,    72,    75,
    83,    86,    59,   nil,    92,   nil,   nil,   nil,   nil,    79,
   100,   nil,   nil,    89,   209,   nil,    94,   nil,   nil,   nil,
   nil,    71,   200,   nil,    59,    83,    86,   nil,   nil,    92,
   nil,   161,   nil,   nil,    79,    83,   267,   nil,    89,    92,
   nil,    72,    75,   nil,   136,   102,   nil,   106,    89,    59,
   212,   195,   196,   197,   199,   201,   nil,   206,   210,    59,
    72,    75,   nil,    97,   198,   nil,    72,    75,   nil,   nil,
   102,   nil,   106,   nil,    71,   nil,   nil,   nil,    83,    86,
   nil,   nil,    92,   338,   nil,    72,    75,    79,   100,   nil,
   nil,    89,   nil,    71,    94,   nil,   nil,    83,    86,    71,
   nil,    92,    59,    83,    86,    76,    79,    92,   176,   nil,
    89,   nil,    79,   nil,   nil,   nil,    89,   nil,    71,   nil,
   nil,    59,    83,    86,   nil,   nil,    92,    59,    72,    75,
    76,    79,   102,   nil,   106,    89,   nil,   212,   195,   196,
   197,   199,   201,   nil,   206,   210,    59,    72,    75,   nil,
    97,   198,   nil,    72,    75,   nil,   212,   195,   196,   197,
   nil,    71,   nil,   206,   210,    83,    86,   nil,   nil,    92,
   198,   nil,   nil,   nil,    79,   100,   nil,   nil,    89,   nil,
   161,    94,   nil,   nil,    83,   267,   161,   nil,    92,    59,
    83,   267,   nil,   136,    92,   nil,   nil,    89,   nil,   136,
    72,    75,   nil,    89,   102,   nil,   106,   nil,    59,   nil,
   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,    72,
    75,   nil,    97,   102,   nil,   106,    72,    75,   nil,   nil,
   102,   nil,   106,    71,   nil,   nil,   nil,    83,    86,   nil,
   nil,    92,   nil,   nil,   nil,   nil,    79,   100,    97,   nil,
    89,   nil,    71,    94,   nil,   nil,    83,    86,   nil,    71,
    92,    59,   nil,    83,    86,    79,   nil,    92,   nil,    89,
    72,    75,    79,   100,   102,   nil,    89,    72,    75,    94,
    59,   102,   nil,   106,    72,    75,   nil,    59,   102,   nil,
   106,    72,    75,   nil,   nil,   102,   188,   106,   nil,   nil,
   nil,   nil,   nil,    71,   nil,   nil,   nil,    83,   267,   nil,
    71,    92,   nil,   nil,    83,    86,   136,    71,    92,   nil,
    89,    83,    86,    79,    71,    92,   nil,    89,    83,    86,
    79,    59,    92,   nil,    89,    72,    75,    79,    59,   nil,
   nil,    89,    72,    75,   nil,    59,   102,   nil,   106,   nil,
   nil,   nil,    59,    26,   nil,    33,     1,   nil,     7,    12,
   nil,    17,   nil,    23,    97,    29,   nil,     3,   161,   nil,
    11,    14,    83,   267,   nil,    71,    92,   nil,   nil,    83,
    86,   136,   nil,    92,   nil,    89,   nil,   nil,    79,   100,
   nil,   nil,    89,    72,    75,    94,    59,   102,   nil,   106,
   nil,   nil,   nil,    59,    26,   nil,    33,     1,   nil,     7,
    12,   nil,    17,   nil,    23,    97,    29,   nil,     3,    72,
    75,    11,    14,   102,   nil,   106,    71,   nil,   nil,   nil,
    83,    86,   nil,   nil,    92,   nil,   nil,   nil,   nil,    79,
   100,    97,   nil,    89,   nil,   nil,    94,   nil,   nil,    72,
    75,   nil,    71,   102,    59,   106,    83,    86,   211,   nil,
    92,   nil,   nil,   nil,   nil,    79,   100,   204,   209,    89,
   nil,    97,    94,   nil,   nil,   nil,   200,   202,   205,   208,
    59,   nil,    71,   nil,   nil,   nil,    83,    86,   nil,   nil,
    92,   nil,   nil,   nil,   nil,    79,   100,   nil,   nil,    89,
   203,   207,    94,   nil,   212,   195,   196,   197,   199,   201,
    59,   206,   210,   204,   209,   nil,   nil,   nil,   198,   nil,
   nil,   nil,   200,   202,   205,   208,   nil,   nil,   204,   209,
   nil,   nil,   nil,   nil,   nil,   nil,   272,   200,   202,   205,
   208,   nil,   nil,   nil,   nil,   nil,   203,   207,   nil,   nil,
   212,   195,   196,   197,   199,   201,   nil,   206,   210,   nil,
   nil,   203,   207,   nil,   198,   212,   195,   196,   197,   199,
   201,   nil,   206,   210,   204,   209,   nil,   nil,   nil,   198,
   nil,   nil,   nil,   200,   202,   205,   208,   nil,   nil,   204,
   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,   202,
   205,   208,   nil,   nil,   nil,   nil,   nil,   nil,   207,   nil,
   nil,   212,   195,   196,   197,   199,   201,   nil,   206,   210,
   nil,   nil,   203,   207,   nil,   198,   212,   195,   196,   197,
   199,   201,   nil,   206,   210,   204,   209,   nil,   nil,   nil,
   198,   nil,   nil,   nil,   200,   202,   205,   208,   nil,   nil,
   204,   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   202,   205,   208,   nil,   nil,   nil,   nil,   nil,   203,   207,
   209,   nil,   212,   195,   196,   197,   199,   201,   200,   206,
   210,   nil,   nil,   nil,   nil,   209,   198,   212,   195,   196,
   197,   199,   201,   200,   206,   210,   nil,   nil,   nil,   nil,
   nil,   198,   nil,   nil,   nil,   nil,   212,   195,   196,   197,
   199,   201,   nil,   206,   210,   308,   nil,   nil,   nil,   nil,
   198,   212,   195,   196,   197,   199,   201,   nil,   206,   210,
   nil,   nil,   nil,   nil,   380,   198,    26,   nil,    33,     1,
   nil,     7,    12,   nil,    17,   nil,    23,   nil,    29,   nil,
     3,   nil,   nil,    11,    14,    26,   372,    33,     1,   nil,
     7,    12,   nil,    17,   nil,    23,   nil,    29,   nil,     3,
   nil,   nil,    11,    14,   nil,   348,   nil,    26,   nil,    33,
     1,   nil,     7,    12,   nil,    17,   nil,    23,   nil,    29,
   nil,     3,   nil,   nil,    11,    14,    26,   295,    33,     1,
   nil,     7,    12,   nil,    17,   nil,    23,   nil,    29,   nil,
     3,   nil,   nil,    11,    14,   nil,   358,   nil,    26,   nil,
    33,     1,   nil,     7,    12,   nil,    17,   nil,    23,   nil,
    29,   nil,     3,   nil,   nil,    11,    14,    26,   379,    33,
     1,   nil,     7,    12,   nil,    17,   nil,    23,   nil,    29,
   nil,     3,   nil,   nil,    11,    14,   nil,   362,   nil,    26,
   nil,    33,     1,   nil,     7,    12,   nil,    17,   nil,    23,
   nil,    29,   nil,     3,   nil,   nil,    11,    14,    26,   378,
    33,     1,   nil,     7,    12,   nil,    17,   nil,    23,   nil,
    29,   nil,     3,   nil,   nil,    11,    14,   nil,   376,   nil,
    26,   nil,    33,     1,   nil,     7,    12,   nil,    17,   nil,
    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,    26,
   361,    33,     1,   nil,     7,    12,   nil,    17,   nil,    23,
   nil,    29,   nil,     3,   nil,   nil,    11,    14,   nil,   323,
   nil,    26,   nil,    33,     1,   nil,     7,    12,   nil,    17,
   nil,    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,
    26,   nil,    33,     1,   nil,     7,    12,   nil,    17,   nil,
    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,   212,
   195,   196,   197,   199,   201,   nil,   206,   210,   nil,   nil,
   nil,   nil,   nil,   198 ]

racc_action_check = [
   179,   179,   157,    22,    65,    22,   151,     7,    54,    86,
   173,   164,    78,   179,   179,    65,     7,     7,    22,   164,
    65,   120,   179,   179,   179,   179,   120,    86,    49,    49,
   106,   106,    49,    54,   180,   180,   142,   106,   173,   173,
   157,    95,    22,   157,   366,   366,   179,   179,   151,   142,
   179,   179,   179,   179,   179,   179,   193,   179,   179,   193,
   155,    49,    91,   157,   179,    49,    49,   180,   106,    49,
   218,   180,   180,   214,    49,   180,   216,   366,    49,   180,
   180,   366,   366,   218,   180,   366,   181,   181,   242,    49,
   366,   217,   181,    62,   366,   180,   353,   353,   155,   238,
    17,   155,   340,   340,    62,   366,   340,   177,   340,    62,
   238,   276,   276,   242,   242,   238,   210,   271,   276,   181,
   177,   155,   219,   181,   181,    90,   304,   181,   223,   353,
   271,   304,   181,   353,   353,   340,   181,   353,    17,   340,
   340,    17,   353,   340,   183,   183,   353,   181,   340,   276,
   195,   195,   340,   162,   195,    12,   195,   353,    87,    12,
   299,    17,   225,   340,   162,   226,    12,   183,   299,   162,
   342,   342,   195,    85,   278,   278,   228,   183,    84,   278,
   278,   183,   183,   195,   230,   183,   278,   195,   195,   183,
   183,   195,   231,   232,   183,   103,   195,   195,   196,   196,
   195,    81,   196,   195,   196,   183,   105,   282,   282,   282,
   282,   195,     1,    79,   282,   282,     1,   101,    30,    77,
   196,   282,    30,     1,    23,    23,   279,   279,    23,    30,
    30,   196,    71,   279,   249,   196,   196,   251,   187,   196,
   280,   280,   187,   187,   196,   196,    23,   280,   196,    26,
    26,   196,   119,    26,   252,    26,   119,    23,    69,   196,
    67,    23,    23,   119,   119,    23,   261,   267,   182,    23,
    23,    26,   182,   182,    23,   197,   197,    66,   107,   197,
    43,   197,    26,   273,    43,    23,    26,    26,   206,   159,
    26,    43,    43,   159,   159,    26,    26,   197,    64,    26,
    29,    29,    26,   108,    29,   109,    29,   113,   197,   114,
    26,   118,   197,   197,   306,   306,   197,   122,   306,   233,
   306,   197,   197,   233,   126,   197,   233,   170,   197,    52,
   233,   170,   170,    29,    51,    50,   197,    29,    29,   302,
   302,    29,   131,   302,    36,   302,    29,   306,   132,   190,
    29,   306,   306,   295,   135,   306,   137,   138,   297,   297,
   306,    29,    33,   139,   306,   297,    28,    28,    28,    28,
   141,   143,   302,   314,   285,   306,   302,   302,   296,   296,
   302,    16,   285,   296,   296,   302,   174,   326,   327,   302,
   296,   297,   329,   330,   331,   297,   297,   198,   198,   297,
   302,   198,   336,   198,   297,     9,   152,   348,   297,   349,
   285,   285,   285,   285,   285,   285,     8,   285,   285,   297,
   354,   172,   199,   199,   285,   365,   199,   171,   199,   367,
   198,     3,     2,   153,   198,   198,   156,   nil,   198,     4,
     4,     4,     4,   198,   199,   nil,   nil,   198,    97,    97,
   nil,   nil,    97,   nil,    97,   199,   nil,   nil,   198,   199,
   199,   nil,   nil,   199,    35,    35,    35,    35,   199,   199,
    97,   nil,   199,   nil,   nil,   199,   nil,   nil,   200,   200,
   nil,    97,   200,   199,   200,    97,    97,   nil,   nil,    97,
    34,    34,    34,    34,    97,    97,   nil,   nil,    97,   nil,
   200,    97,   nil,   nil,    46,    46,   nil,   nil,    46,    97,
    46,   200,   nil,   nil,   nil,   200,   200,   nil,   nil,   200,
   nil,   nil,   nil,   nil,   200,   200,    46,   nil,   200,   nil,
   nil,   200,   nil,   nil,    47,    47,   nil,    46,    47,   200,
    47,    46,    46,   nil,   nil,    46,   nil,   nil,   nil,   nil,
    46,    46,   nil,   nil,    46,   nil,    47,    46,   nil,   nil,
    48,    48,   nil,   nil,    48,    46,    48,    47,   nil,   nil,
   nil,    47,    47,   nil,   nil,    47,   nil,   nil,   nil,   nil,
    47,    47,   175,   175,    47,   nil,   175,    47,   175,   nil,
   nil,   nil,   nil,    48,   nil,    47,   nil,    48,    48,   nil,
   nil,    48,   nil,   201,   201,   nil,    48,   201,   nil,   201,
    48,   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,   175,
   175,    48,   nil,   175,   nil,   201,   nil,   nil,   175,   202,
   202,   nil,   175,   202,   nil,   202,   201,   nil,   nil,   nil,
   201,   201,   nil,   175,   201,   nil,   nil,   nil,   nil,   201,
   201,   202,   nil,   201,   nil,   nil,   201,   nil,   nil,   203,
   203,   nil,   202,   203,   201,   203,   202,   202,   nil,   nil,
   202,   nil,   nil,   nil,   nil,   202,   202,   nil,   nil,   202,
   nil,   203,   202,   nil,   nil,   204,   204,   nil,   nil,   204,
   202,   204,   203,   nil,   nil,   nil,   203,   203,   nil,   nil,
   203,   nil,   nil,   nil,   nil,   203,   203,   204,   nil,   203,
   nil,   nil,   203,   nil,   nil,   205,   205,   nil,   204,   205,
   203,   205,   204,   204,   nil,   nil,   204,   nil,   nil,   nil,
   nil,   204,   204,   nil,   nil,   204,   nil,   205,   204,   nil,
   nil,    63,    63,   nil,   nil,    63,   204,    63,   205,   nil,
   nil,   nil,   205,   205,   nil,   nil,   205,   nil,   nil,   nil,
   nil,   205,   205,   207,   207,   205,   nil,   207,   205,   207,
   nil,   nil,   nil,   nil,    63,   nil,   205,   nil,    63,    63,
   nil,   nil,    63,   nil,   nil,   207,   nil,    63,   275,   275,
   nil,    63,   275,   nil,   275,   nil,   207,   nil,   268,   268,
   207,   207,    63,   nil,   207,   nil,   nil,   nil,   nil,   207,
   207,   nil,   nil,   207,   288,   nil,   207,   nil,   nil,   nil,
   nil,   275,   288,   nil,   207,   275,   275,   nil,   nil,   275,
   nil,   268,   nil,   nil,   275,   268,   268,   nil,   275,   268,
   nil,   255,   255,   nil,   268,   255,   nil,   255,   268,   275,
   288,   288,   288,   288,   288,   288,   nil,   288,   288,   268,
   253,   253,   nil,   255,   288,   nil,   247,   247,   nil,   nil,
   247,   nil,   247,   nil,   255,   nil,   nil,   nil,   255,   255,
   nil,   nil,   255,   253,   nil,    74,    74,   255,   255,   nil,
   nil,   255,   nil,   253,   255,   nil,   nil,   253,   253,   247,
   nil,   253,   255,   247,   247,   253,   253,   247,    74,   nil,
   253,   nil,   247,   nil,   nil,   nil,   247,   nil,    74,   nil,
   nil,   253,    74,    74,   nil,   nil,    74,   247,    75,    75,
    74,    74,    75,   nil,    75,    74,   nil,   283,   283,   283,
   283,   283,   283,   nil,   283,   283,    74,   244,   244,   nil,
    75,   283,   nil,   243,   243,   nil,   284,   284,   284,   284,
   nil,    75,   nil,   284,   284,    75,    75,   nil,   nil,    75,
   284,   nil,   nil,   nil,    75,    75,   nil,   nil,    75,   nil,
   244,    75,   nil,   nil,   244,   244,   243,   nil,   244,    75,
   243,   243,   nil,   244,   243,   nil,   nil,   244,   nil,   243,
   208,   208,   nil,   243,   208,   nil,   208,   nil,   244,   nil,
   nil,   nil,   nil,   nil,   243,   nil,   nil,   nil,   nil,    82,
    82,   nil,   208,    82,   nil,    82,   209,   209,   nil,   nil,
   209,   nil,   209,   208,   nil,   nil,   nil,   208,   208,   nil,
   nil,   208,   nil,   nil,   nil,   nil,   208,   208,   209,   nil,
   208,   nil,    82,   208,   nil,   nil,    82,    82,   nil,   209,
    82,   208,   nil,   209,   209,    82,   nil,   209,   nil,    82,
   224,   224,   209,   209,   224,   nil,   209,   229,   229,   209,
    82,   229,   nil,   229,   227,   227,   nil,   209,   227,   nil,
   227,   102,   102,   nil,   nil,   102,   102,   102,   nil,   nil,
   nil,   nil,   nil,   224,   nil,   nil,   nil,   224,   224,   nil,
   229,   224,   nil,   nil,   229,   229,   224,   227,   229,   nil,
   224,   227,   227,   229,   102,   227,   nil,   229,   102,   102,
   227,   224,   102,   nil,   227,   213,   213,   102,   229,   nil,
   nil,   102,   100,   100,   nil,   227,   100,   nil,   100,   nil,
   nil,   nil,   102,    19,   nil,    19,    19,   nil,    19,    19,
   nil,    19,   nil,    19,   100,    19,   nil,    19,   213,   nil,
    19,    19,   213,   213,   nil,   100,   213,   nil,   nil,   100,
   100,   213,   nil,   100,   nil,   213,   nil,   nil,   100,   100,
   nil,   nil,   100,    94,    94,   100,   213,    94,   nil,    94,
   nil,   nil,   nil,   100,     0,   nil,     0,     0,   nil,     0,
     0,   nil,     0,   nil,     0,    94,     0,   nil,     0,   212,
   212,     0,     0,   212,   nil,   212,    94,   nil,   nil,   nil,
    94,    94,   nil,   nil,    94,   nil,   nil,   nil,   nil,    94,
    94,   212,   nil,    94,   nil,   nil,    94,   nil,   nil,    39,
    39,   nil,   212,    39,    94,    39,   212,   212,   111,   nil,
   212,   nil,   nil,   nil,   nil,   212,   212,   111,   111,   212,
   nil,    39,   212,   nil,   nil,   nil,   111,   111,   111,   111,
   212,   nil,    39,   nil,   nil,   nil,    39,    39,   nil,   nil,
    39,   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,    39,
   111,   111,    39,   nil,   111,   111,   111,   111,   111,   111,
    39,   111,   111,   130,   130,   nil,   nil,   nil,   111,   nil,
   nil,   nil,   130,   130,   130,   130,   nil,   nil,   185,   185,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   185,   185,   185,
   185,   nil,   nil,   nil,   nil,   nil,   130,   130,   nil,   nil,
   130,   130,   130,   130,   130,   130,   nil,   130,   130,   nil,
   nil,   185,   185,   nil,   130,   185,   185,   185,   185,   185,
   185,   nil,   185,   185,   286,   286,   nil,   nil,   nil,   185,
   nil,   nil,   nil,   286,   286,   286,   286,   nil,   nil,   129,
   129,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   129,   129,
   129,   129,   nil,   nil,   nil,   nil,   nil,   nil,   286,   nil,
   nil,   286,   286,   286,   286,   286,   286,   nil,   286,   286,
   nil,   nil,   129,   129,   nil,   286,   129,   129,   129,   129,
   129,   129,   nil,   129,   129,   123,   123,   nil,   nil,   nil,
   129,   nil,   nil,   nil,   123,   123,   123,   123,   nil,   nil,
   290,   290,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   290,
   290,   290,   290,   nil,   nil,   nil,   nil,   nil,   123,   123,
   287,   nil,   123,   123,   123,   123,   123,   123,   287,   123,
   123,   nil,   nil,   nil,   nil,   291,   123,   290,   290,   290,
   290,   290,   290,   291,   290,   290,   nil,   nil,   nil,   nil,
   nil,   290,   nil,   nil,   nil,   nil,   287,   287,   287,   287,
   287,   287,   nil,   287,   287,   221,   nil,   nil,   nil,   nil,
   287,   291,   291,   291,   291,   291,   291,   nil,   291,   291,
   nil,   nil,   nil,   nil,   377,   291,   221,   nil,   221,   221,
   nil,   221,   221,   nil,   221,   nil,   221,   nil,   221,   nil,
   221,   nil,   nil,   221,   221,   377,   360,   377,   377,   nil,
   377,   377,   nil,   377,   nil,   377,   nil,   377,   nil,   377,
   nil,   nil,   377,   377,   nil,   294,   nil,   360,   nil,   360,
   360,   nil,   360,   360,   nil,   360,   nil,   360,   nil,   360,
   nil,   360,   nil,   nil,   360,   360,   294,   211,   294,   294,
   nil,   294,   294,   nil,   294,   nil,   294,   nil,   294,   nil,
   294,   nil,   nil,   294,   294,   nil,   307,   nil,   211,   nil,
   211,   211,   nil,   211,   211,   nil,   211,   nil,   211,   nil,
   211,   nil,   211,   nil,   nil,   211,   211,   307,   375,   307,
   307,   nil,   307,   307,   nil,   307,   nil,   307,   nil,   307,
   nil,   307,   nil,   nil,   307,   307,   nil,   322,   nil,   375,
   nil,   375,   375,   nil,   375,   375,   nil,   375,   nil,   375,
   nil,   375,   nil,   375,   nil,   nil,   375,   375,   322,   371,
   322,   322,   nil,   322,   322,   nil,   322,   nil,   322,   nil,
   322,   nil,   322,   nil,   nil,   322,   322,   nil,   369,   nil,
   371,   nil,   371,   371,   nil,   371,   371,   nil,   371,   nil,
   371,   nil,   371,   nil,   371,   nil,   nil,   371,   371,   369,
   318,   369,   369,   nil,   369,   369,   nil,   369,   nil,   369,
   nil,   369,   nil,   369,   nil,   nil,   369,   369,   nil,   236,
   nil,   318,   nil,   318,   318,   nil,   318,   318,   nil,   318,
   nil,   318,   nil,   318,   nil,   318,   nil,   nil,   318,   318,
   236,   nil,   236,   236,   nil,   236,   236,   nil,   236,   nil,
   236,   nil,   236,   nil,   236,   nil,   nil,   236,   236,   292,
   292,   292,   292,   292,   292,   nil,   292,   292,   nil,   nil,
   nil,   nil,   nil,   292 ]

racc_action_pointer = [
  1174,   176,   417,   387,   375,   nil,   nil,     1,   408,   397,
   nil,   nil,   119,   nil,   nil,   nil,   381,    98,   nil,  1123,
   nil,   nil,    -3,   222,   nil,   nil,   247,   nil,   302,   298,
   182,   nil,   nil,   360,   426,   400,   320,   nil,   nil,  1247,
   nil,   nil,   nil,   244,   nil,   nil,   502,   532,   558,    26,
   295,   310,   329,   nil,    -4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    69,   739,   258,   -20,   269,   254,   nil,   235,
   nil,   226,   nil,   nil,   883,   926,   nil,   207,   -11,   207,
   nil,   178,  1017,   nil,   155,   167,     3,   135,   nil,   nil,
   102,    39,   nil,   nil,  1191,    18,   nil,   446,   nil,   nil,
  1140,   194,  1089,   172,   nil,   183,    28,   255,   280,   282,
   nil,  1250,   nil,   299,   301,   nil,   nil,   nil,   299,   216,
   -14,   nil,   309,  1418,   nil,   nil,   318,   nil,   nil,  1372,
  1296,   335,   325,   nil,   nil,   313,   nil,   333,   345,   340,
   nil,   347,    25,   351,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    -5,   394,   396,   nil,    58,   428,     0,   nil,   243,
   nil,   nil,   129,   nil,    -7,   nil,   nil,   nil,   nil,   nil,
   320,   415,   410,   -12,   346,   580,   nil,    95,   nil,    -4,
    32,    84,   261,   142,   nil,  1311,   nil,   231,   nil,   nil,
   338,   nil,   nil,    47,   nil,   148,   196,   273,   395,   420,
   476,   601,   627,   657,   683,   713,   225,   761,   998,  1024,
    53,  1588,  1217,  1133,    71,   nil,    61,    66,    58,   107,
   nil,  1506,   nil,   119,  1068,   122,   156,  1082,   136,  1075,
   144,   183,   185,   283,   nil,   nil,  1730,   nil,    75,   nil,
   nil,   nil,    63,   951,   945,   nil,   nil,   864,   nil,   225,
   nil,   225,   247,   858,   nil,   839,   nil,   nil,   nil,   nil,
   nil,   255,   nil,   nil,   nil,   nil,   nil,   243,   796,   nil,
   nil,   105,   nil,   276,   nil,   786,   109,   nil,   118,   165,
   179,   nil,   153,   883,   902,   356,  1357,  1452,   796,   nil,
  1433,  1467,  1725,   nil,  1566,   322,   322,   356,   nil,   148,
   nil,   nil,   337,   nil,    91,   nil,   312,  1607,   nil,   nil,
   nil,   nil,   nil,   nil,   361,   nil,   nil,   nil,  1711,   nil,
   nil,   nil,  1648,   nil,   nil,   nil,   364,   365,   nil,   369,
   370,   371,   nil,   nil,   nil,   nil,   393,   nil,   nil,   nil,
   100,   nil,   159,   nil,   nil,   nil,   nil,   nil,   376,   401,
   nil,   nil,   nil,    94,   412,   nil,   nil,   nil,   nil,   nil,
  1547,   nil,   nil,   nil,   nil,   416,    42,   420,   nil,  1689,
   nil,  1670,   nil,   nil,   nil,  1629,   nil,  1525,   nil,   nil,
   nil ]

racc_action_default = [
  -194,  -231,  -231,   -50,  -231,    -8,    -9,  -231,  -231,   -22,
   -10,  -185,  -186,   -11,  -183,   -12,  -231,  -231,   -13,    -1,
   -14,    -2,  -231,  -184,   -15,    -3,  -231,   -16,    -5,  -231,
  -231,   -17,    -6,  -231,   -18,    -7,  -194,  -186,  -184,  -231,
   -51,   -26,   -27,  -231,   -24,   -25,  -231,  -231,  -231,   -85,
   -92,  -194,  -231,  -193,  -194,  -191,  -187,  -189,  -190,  -219,
  -192,    -4,  -194,  -231,   -85,  -194,   -53,  -229,  -172,   -42,
   -43,  -211,  -117,   -33,  -231,  -231,   -44,   -31,  -231,   -74,
   -32,   -36,  -231,  -122,   -37,  -231,   -73,   -38,  -170,   -72,
   -39,   -40,  -171,   -41,  -231,  -103,  -111,  -231,  -130,  -112,
  -231,  -104,  -231,  -108,  -110,  -105,  -231,  -114,  -106,  -113,
  -109,  -231,  -107,  -231,  -231,   -49,  -173,  -174,  -176,  -231,
  -195,  -196,  -231,   -83,   -19,   -22,  -184,   -21,   -23,   -82,
   -84,  -231,   -75,   -86,   -81,   -70,   -74,   -76,  -217,   -79,
   -68,   -77,   -73,  -231,  -169,  -168,   -80,   -78,   -90,   -91,
   -93,  -231,  -217,  -194,   381,  -231,  -231,  -231,  -205,  -231,
   -57,  -211,  -194,   -59,  -231,   -66,   -65,   -56,   -73,   -95,
  -231,  -217,  -231,  -231,   -92,  -231,   -30,  -231,  -118,  -231,
  -231,  -231,  -231,  -231,  -140,  -231,  -147,  -231,  -214,  -227,
  -231,  -226,  -222,  -231,  -223,  -231,  -231,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,   -20,  -204,  -231,  -231,  -202,
  -199,  -231,  -228,  -231,   -71,  -218,  -231,  -231,   -85,  -231,
  -218,  -231,  -231,  -231,  -207,  -188,  -231,  -206,  -231,   -54,
   -62,   -61,  -231,  -231,  -231,  -215,  -216,  -231,  -124,  -231,
   -55,  -217,  -231,  -231,   -28,  -231,  -120,  -119,   -35,   -34,
  -166,  -231,  -164,  -158,  -167,  -159,  -165,   -73,  -231,  -123,
  -116,  -231,  -150,  -216,  -212,  -231,  -231,  -220,  -135,  -137,
  -136,  -131,  -138,  -142,  -139,  -144,  -149,  -146,  -143,  -132,
  -148,  -145,  -141,  -133,  -231,  -127,  -134,  -231,  -152,  -231,
  -156,  -175,  -231,  -197,  -231,  -198,  -231,  -231,  -178,   -45,
   -69,   -87,   -46,   -88,  -217,   -89,   -94,   -48,  -231,  -209,
  -208,  -210,  -231,  -182,   -58,   -60,   -97,   -98,   -63,  -102,
   -99,  -100,  -101,   -64,   -96,   -47,  -231,  -230,   -29,  -121,
  -231,  -161,  -217,  -115,  -213,  -225,  -221,  -224,  -127,  -231,
  -126,  -153,  -151,  -231,  -231,  -203,  -200,  -201,  -177,   -67,
  -231,  -180,  -181,   -52,  -163,  -216,  -231,  -231,  -125,  -231,
  -157,  -231,  -179,  -162,  -160,  -231,  -129,  -231,  -155,  -128,
  -154 ]

racc_goto_table = [
     2,     9,   261,    53,   226,    69,    36,   220,    61,   265,
   148,    77,   194,    19,   146,    70,   117,    51,   231,     2,
     9,    22,   178,   140,    73,    21,    93,   152,    56,   159,
   138,   132,   173,   124,   300,   115,   128,   249,   259,   298,
    22,   134,   350,    91,   125,   171,   170,   297,   127,   366,
    43,   114,   147,   122,   328,   333,    69,   257,   263,   316,
   342,   121,   177,   135,    22,   182,    70,   118,   153,   145,
   223,    81,   232,    54,   156,    73,   121,    93,    66,   158,
   119,   237,   217,   218,   324,   187,   320,   193,   189,   261,
    16,   nil,   nil,   nil,    91,   368,   341,   137,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   215,
   165,   259,   128,   165,   nil,   nil,   nil,   336,   300,   nil,
   125,   nil,    81,   351,   127,   nil,   nil,   nil,   nil,   242,
   nil,   nil,   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil,
    22,    53,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   251,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    69,   260,   nil,    69,   235,    88,   nil,   nil,
   nil,   271,    70,   nil,   370,    70,   nil,   nil,   234,   nil,
   359,   258,   347,    93,    73,   311,    93,   261,   nil,   146,
   148,   356,   289,    88,   373,   260,   293,   301,   310,   nil,
    91,   145,   339,    91,   nil,   nil,   132,   nil,   367,   314,
   165,     2,     9,   nil,   nil,   nil,   134,   nil,    88,   nil,
   nil,     2,     9,   nil,   294,   326,   326,   147,    81,   262,
   nil,    81,    22,   145,   307,    69,     2,     9,   319,   nil,
   nil,   nil,    22,   nil,   145,    70,   332,   332,    87,   322,
   260,   nil,   nil,   nil,   258,   nil,    93,    22,   189,   nil,
   nil,   262,   nil,   145,   145,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   137,    91,   141,   nil,   nil,   nil,   nil,   260,
   nil,   nil,   nil,    61,   111,   nil,   165,    84,   145,   nil,
   nil,   327,   327,   nil,     2,     9,    61,   123,   nil,    87,
   nil,    81,   nil,   nil,   129,   130,   nil,     2,     9,   nil,
   nil,    61,   nil,   139,    90,    22,   262,   145,     2,     9,
   nil,   nil,     2,     9,    88,    88,   166,    88,    22,   166,
   nil,   360,   nil,   nil,   nil,   260,   nil,   nil,    84,    22,
   144,   nil,   nil,    22,   nil,   262,   nil,   nil,   260,    61,
   nil,   nil,   184,   nil,   nil,   185,   nil,    88,   186,   nil,
     2,     9,   nil,   nil,    61,    90,    61,   nil,    88,     2,
     9,     2,     9,   145,   nil,     2,     9,     2,     9,   nil,
   nil,    22,   375,   113,   377,   nil,   145,    88,    88,   nil,
    22,   nil,    22,   nil,   nil,   nil,    22,    88,    22,   nil,
   nil,   262,   131,   nil,   nil,    87,   266,   nil,    87,   nil,
   nil,   nil,    88,   nil,   262,   nil,   nil,   169,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   166,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   169,   nil,   266,   nil,
   nil,    88,   nil,   nil,    84,   264,   nil,    84,   nil,   141,
   nil,   nil,   nil,   278,   279,   280,   169,   282,   283,   284,
   285,   286,   287,   288,   nil,   290,   291,   292,   330,   330,
   296,    90,   144,   nil,    90,   nil,   nil,   264,    87,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   139,   nil,
   nil,   nil,   nil,   266,   nil,   nil,   nil,    88,   nil,   nil,
   nil,   nil,   166,   nil,   144,   nil,   nil,   329,   329,   nil,
    88,   nil,   nil,   nil,   nil,   144,   nil,    84,   nil,   nil,
   nil,   nil,   266,   nil,   nil,   nil,   nil,   nil,   nil,   252,
   nil,   nil,   264,   nil,   331,   331,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   281,   nil,   nil,   nil,   nil,   nil,   nil,   144,
   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,
   nil,   313,   nil,   315,   nil,   nil,   nil,   nil,   144,   nil,
   nil,   266,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   334,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   264,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   345,
   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   144,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   355,   144,   nil,   nil,
   357,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   364 ]

racc_goto_check = [
    52,    21,    67,    63,    36,    30,    32,    81,     4,    69,
    53,    22,    84,     2,    50,    31,    71,    32,    36,    52,
    21,    37,    60,    47,    21,     3,    29,    38,    77,    41,
    35,    30,    41,    19,    67,     5,     7,    36,    23,    65,
    37,    31,    62,    28,    21,    35,    57,    64,     5,    58,
    20,    37,    29,    73,    46,    46,    30,    61,    68,    56,
    70,     3,    22,    33,    37,    57,    31,    72,    73,    28,
    34,    24,    74,    75,    76,    21,     3,    29,    40,     3,
    20,    78,    79,    80,    42,    57,    82,    83,    30,    67,
     1,   nil,   nil,   nil,    28,    62,    69,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
    24,    23,     7,    24,   nil,   nil,   nil,    36,    67,   nil,
    21,   nil,    24,    65,     5,   nil,   nil,   nil,   nil,    41,
   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,
    37,    63,   nil,    63,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    30,    30,   nil,    30,    77,    49,   nil,   nil,
   nil,    22,    31,   nil,    67,    31,   nil,   nil,     3,   nil,
    36,    21,    84,    29,    21,    53,    29,    67,   nil,    50,
    53,    81,    63,    49,    69,    30,    63,    71,    47,   nil,
    28,    28,    60,    28,   nil,   nil,    30,   nil,    36,    35,
    24,    52,    21,   nil,   nil,   nil,    31,   nil,    49,   nil,
   nil,    52,    21,   nil,     2,    30,    30,    29,    24,    24,
   nil,    24,    37,    28,     2,    30,    52,    21,    32,   nil,
   nil,   nil,    37,   nil,    28,    31,    29,    29,    26,     2,
    30,   nil,   nil,   nil,    21,   nil,    29,    37,    30,   nil,
   nil,    24,   nil,    28,    28,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,    28,    26,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,     4,    51,   nil,    24,    25,    28,   nil,
   nil,    24,    24,   nil,    52,    21,     4,    51,   nil,    26,
   nil,    24,   nil,   nil,    51,    51,   nil,    52,    21,   nil,
   nil,     4,   nil,    25,    27,    37,    24,    28,    52,    21,
   nil,   nil,    52,    21,    49,    49,    25,    49,    37,    25,
   nil,     2,   nil,   nil,   nil,    30,   nil,   nil,    25,    37,
    27,   nil,   nil,    37,   nil,    24,   nil,   nil,    30,     4,
   nil,   nil,    51,   nil,   nil,    51,   nil,    49,    51,   nil,
    52,    21,   nil,   nil,     4,    27,     4,   nil,    49,    52,
    21,    52,    21,    28,   nil,    52,    21,    52,    21,   nil,
   nil,    37,     2,    54,     2,   nil,    28,    49,    49,   nil,
    37,   nil,    37,   nil,   nil,   nil,    37,    49,    37,   nil,
   nil,    24,    54,   nil,   nil,    26,    26,   nil,    26,   nil,
   nil,   nil,    49,   nil,    24,   nil,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,    26,   nil,
   nil,    49,   nil,   nil,    25,    25,   nil,    25,   nil,    26,
   nil,   nil,   nil,    51,    51,    51,    54,    51,    51,    51,
    51,    51,    51,    51,   nil,    51,    51,    51,    26,    26,
    51,    27,    27,   nil,    27,   nil,   nil,    25,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,    49,   nil,   nil,
   nil,   nil,    25,   nil,    27,   nil,   nil,    25,    25,   nil,
    49,   nil,   nil,   nil,   nil,    27,   nil,    25,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,    54,
   nil,   nil,    25,   nil,    27,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,    54,   nil,    54,   nil,   nil,   nil,   nil,    27,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    54,    27,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    54 ]

racc_goto_pointer = [
   nil,    90,    13,    25,   -11,     5,   nil,    -7,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -10,
    46,     1,   -12,  -142,    48,   264,   225,   291,    20,     3,
   -18,    -8,     5,    14,   -65,   -19,  -134,    21,   -23,   nil,
    56,   -33,  -154,   nil,   nil,   nil,  -189,   -26,   nil,   144,
   -35,   258,     0,   -40,   354,   nil,  -171,   -17,  -293,   nil,
   -53,  -122,  -253,   -14,  -166,  -174,   nil,  -179,  -123,  -172,
  -208,   -17,    34,    17,   -81,    56,    20,    11,   -76,   -38,
   -37,  -113,  -147,   -19,   -94,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   167,    25,    28,    32,    35,     5,     6,
    10,    13,    15,    18,    20,    24,    27,    31,    34,     4,
   nil,    99,   nil,    80,   101,   103,   105,   108,   109,   112,
    95,    96,     8,   nil,   nil,   nil,   nil,    85,   nil,    30,
   nil,   nil,   160,   238,   163,   164,   nil,   nil,   143,   107,
   110,   179,    67,   133,    98,   149,   150,   nil,   247,   104,
   nil,   nil,   nil,    68,   nil,   nil,   299,    78,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,   nil,   nil,   nil,   nil,   190 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING => 2,
 :DQPRE => 3,
 :DQMID => 4,
 :DQPOST => 5,
 :LBRACK => 6,
 :RBRACK => 7,
 :LBRACE => 8,
 :RBRACE => 9,
 :SYMBOL => 10,
 :FARROW => 11,
 :COMMA => 12,
 :TRUE => 13,
 :FALSE => 14,
 :EQUALS => 15,
 :APPENDS => 16,
 :LESSEQUAL => 17,
 :NOTEQUAL => 18,
 :DOT => 19,
 :COLON => 20,
 :LLCOLLECT => 21,
 :RRCOLLECT => 22,
 :QMARK => 23,
 :LPAREN => 24,
 :RPAREN => 25,
 :ISEQUAL => 26,
 :GREATEREQUAL => 27,
 :GREATERTHAN => 28,
 :LESSTHAN => 29,
 :IF => 30,
 :ELSE => 31,
 :IMPORT => 32,
 :DEFINE => 33,
 :ELSIF => 34,
 :VARIABLE => 35,
 :CLASS => 36,
 :INHERITS => 37,
 :NODE => 38,
 :BOOLEAN => 39,
 :NAME => 40,
 :SEMIC => 41,
 :CASE => 42,
 :DEFAULT => 43,
 :AT => 44,
 :LCOLLECT => 45,
 :RCOLLECT => 46,
 :CLASSNAME => 47,
 :CLASSREF => 48,
 :NOT => 49,
 :OR => 50,
 :AND => 51,
 :UNDEF => 52,
 :PARROW => 53,
 :PLUS => 54,
 :MINUS => 55,
 :TIMES => 56,
 :DIV => 57,
 :LSHIFT => 58,
 :RSHIFT => 59,
 :UMINUS => 60,
 :MATCH => 61,
 :NOMATCH => 62,
 :REGEX => 63,
 :IN_EDGE => 64,
 :OUT_EDGE => 65,
 :IN_EDGE_SUB => 66,
 :OUT_EDGE_SUB => 67,
 :IN => 68 }

racc_use_result_var = true

racc_nt_base = 69

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING',
'DQPRE',
'DQMID',
'DQPOST',
'LBRACK',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'IN_EDGE',
'OUT_EDGE',
'IN_EDGE_SUB',
'OUT_EDGE_SUB',
'IN',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'relationship',
'relationship_side',
'edge',
'resourceref',
'funcvalues',
'namestring',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'hasharrayaccesses',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'hasharrayaccess',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'hash',
'dqrval',
'dqtail',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'string',
'strings',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'nodename',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault',
'hashpairs',
'hashpair',
'key']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 46
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 62
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

 # reduce 18 omitted

module_eval <<'.,.,', 'grammar.ra', 82
  def _reduce_19( val, _values, result )
    result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 85
  def _reduce_20( val, _values, result )
    result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)
   result
  end
.,.,

 # reduce 21 omitted

 # reduce 22 omitted

 # reduce 23 omitted

 # reduce 24 omitted

 # reduce 25 omitted

 # reduce 26 omitted

 # reduce 27 omitted

module_eval <<'.,.,', 'grammar.ra', 98
  def _reduce_28( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 106
  def _reduce_29( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 112
  def _reduce_30( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 120
  def _reduce_31( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'grammar.ra', 128
  def _reduce_34( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 137
  def _reduce_35( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

 # reduce 40 omitted

 # reduce 41 omitted

 # reduce 42 omitted

 # reduce 43 omitted

module_eval <<'.,.,', 'grammar.ra', 151
  def _reduce_44( val, _values, result )
                    result = ast AST::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 173
  def _reduce_45( val, _values, result )
    @lexer.commentpop
    array = val[2]
    if array.instance_of?(AST::ResourceInstance)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInstance)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :parameters => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 176
  def _reduce_46( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 179
  def _reduce_47( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 185
  def _reduce_48( val, _values, result )
    @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 212
  def _reduce_49( val, _values, result )
    type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 213
  def _reduce_50( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 214
  def _reduce_51( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 238
  def _reduce_52( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 257
  def _reduce_53( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 267
  def _reduce_54( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_55( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 56 omitted

 # reduce 57 omitted

module_eval <<'.,.,', 'grammar.ra', 283
  def _reduce_58( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 59 omitted

module_eval <<'.,.,', 'grammar.ra', 289
  def _reduce_60( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 290
  def _reduce_61( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 291
  def _reduce_62( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 298
  def _reduce_63( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 303
  def _reduce_64( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 65 omitted

 # reduce 66 omitted

module_eval <<'.,.,', 'grammar.ra', 310
  def _reduce_67( val, _values, result )
    result = ast AST::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 68 omitted

module_eval <<'.,.,', 'grammar.ra', 320
  def _reduce_69( val, _values, result )
    if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 70 omitted

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 327
  def _reduce_72( val, _values, result )
    result = ast AST::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 331
  def _reduce_73( val, _values, result )
    result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 335
  def _reduce_74( val, _values, result )
    result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

 # reduce 80 omitted

 # reduce 81 omitted

module_eval <<'.,.,', 'grammar.ra', 352
  def _reduce_82( val, _values, result )
    if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 355
  def _reduce_83( val, _values, result )
    result = ast AST::VarDef, :name => val[0], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 360
  def _reduce_84( val, _values, result )
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 365
  def _reduce_85( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 365
  def _reduce_86( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 374
  def _reduce_87( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 378
  def _reduce_88( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 383
  def _reduce_89( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true
   result
  end
.,.,

 # reduce 90 omitted

 # reduce 91 omitted

module_eval <<'.,.,', 'grammar.ra', 391
  def _reduce_92( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 391
  def _reduce_93( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 400
  def _reduce_94( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 95 omitted

module_eval <<'.,.,', 'grammar.ra', 409
  def _reduce_96( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

 # reduce 102 omitted

 # reduce 103 omitted

 # reduce 104 omitted

 # reduce 105 omitted

 # reduce 106 omitted

 # reduce 107 omitted

 # reduce 108 omitted

 # reduce 109 omitted

 # reduce 110 omitted

 # reduce 111 omitted

 # reduce 112 omitted

 # reduce 113 omitted

 # reduce 114 omitted

module_eval <<'.,.,', 'grammar.ra', 438
  def _reduce_115( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 443
  def _reduce_116( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 444
  def _reduce_117( val, _values, result )
 result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 445
  def _reduce_118( val, _values, result )
 result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 447
  def _reduce_119( val, _values, result )
 result = [val[0]] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 449
  def _reduce_120( val, _values, result )
 result = [ast(AST::String,val[0])]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 450
  def _reduce_121( val, _values, result )
 result = [ast(AST::String,val[0])] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 455
  def _reduce_122( val, _values, result )
    result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 460
  def _reduce_123( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 462
  def _reduce_124( val, _values, result )
    result = ast AST::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_125( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 489
  def _reduce_126( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 127 omitted

module_eval <<'.,.,', 'grammar.ra', 495
  def _reduce_128( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 499
  def _reduce_129( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)
   result
  end
.,.,

 # reduce 130 omitted

module_eval <<'.,.,', 'grammar.ra', 516
  def _reduce_131( val, _values, result )
    result = ast AST::InOperator, :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 519
  def _reduce_132( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 522
  def _reduce_133( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 525
  def _reduce_134( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 528
  def _reduce_135( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 531
  def _reduce_136( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 534
  def _reduce_137( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 537
  def _reduce_138( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 540
  def _reduce_139( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 543
  def _reduce_140( val, _values, result )
    result = ast AST::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 546
  def _reduce_141( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 549
  def _reduce_142( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 552
  def _reduce_143( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 555
  def _reduce_144( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 558
  def _reduce_145( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 561
  def _reduce_146( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 564
  def _reduce_147( val, _values, result )
    result = ast AST::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 567
  def _reduce_148( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 570
  def _reduce_149( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 573
  def _reduce_150( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 582
  def _reduce_151( val, _values, result )
    @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 152 omitted

module_eval <<'.,.,', 'grammar.ra', 592
  def _reduce_153( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_154( val, _values, result )
    @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 603
  def _reduce_155( val, _values, result )
    @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 156 omitted

module_eval <<'.,.,', 'grammar.ra', 613
  def _reduce_157( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 617
  def _reduce_158( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 159 omitted

module_eval <<'.,.,', 'grammar.ra', 623
  def _reduce_160( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 161 omitted

module_eval <<'.,.,', 'grammar.ra', 633
  def _reduce_162( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 637
  def _reduce_163( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 164 omitted

 # reduce 165 omitted

 # reduce 166 omitted

 # reduce 167 omitted

 # reduce 168 omitted

 # reduce 169 omitted

 # reduce 170 omitted

module_eval <<'.,.,', 'grammar.ra', 648
  def _reduce_171( val, _values, result )
    result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 172 omitted

module_eval <<'.,.,', 'grammar.ra', 651
  def _reduce_173( val, _values, result )
 result = [val[0][:value]]
   result
  end
.,.,

 # reduce 174 omitted

module_eval <<'.,.,', 'grammar.ra', 653
  def _reduce_175( val, _values, result )
 result = val[0] += val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 662
  def _reduce_176( val, _values, result )
    val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 673
  def _reduce_177( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_178( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 687
  def _reduce_179( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :arguments => val[2], :parent => val[3], :code => val[5], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 693
  def _reduce_180( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :arguments => val[2], :parent => val[3], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 699
  def _reduce_181( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 703
  def _reduce_182( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 704
  def _reduce_183( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 706
  def _reduce_184( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 707
  def _reduce_185( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 708
  def _reduce_186( val, _values, result )
 result = "class"
   result
  end
.,.,

 # reduce 187 omitted

module_eval <<'.,.,', 'grammar.ra', 718
  def _reduce_188( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 722
  def _reduce_189( val, _values, result )
    result = ast AST::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 723
  def _reduce_190( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 724
  def _reduce_191( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 725
  def _reduce_192( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 193 omitted

module_eval <<'.,.,', 'grammar.ra', 731
  def _reduce_194( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 735
  def _reduce_195( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 196 omitted

module_eval <<'.,.,', 'grammar.ra', 740
  def _reduce_197( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 744
  def _reduce_198( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 199 omitted

module_eval <<'.,.,', 'grammar.ra', 751
  def _reduce_200( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 756
  def _reduce_201( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 760
  def _reduce_202( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 762
  def _reduce_203( val, _values, result )
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 764
  def _reduce_204( val, _values, result )
    result = [val[0][:value]]
   result
  end
.,.,

 # reduce 205 omitted

module_eval <<'.,.,', 'grammar.ra', 769
  def _reduce_206( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 207 omitted

module_eval <<'.,.,', 'grammar.ra', 774
  def _reduce_208( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 209 omitted

 # reduce 210 omitted

module_eval <<'.,.,', 'grammar.ra', 780
  def _reduce_211( val, _values, result )
    result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 788
  def _reduce_212( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 795
  def _reduce_213( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 797
  def _reduce_214( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 215 omitted

 # reduce 216 omitted

 # reduce 217 omitted

module_eval <<'.,.,', 'grammar.ra', 802
  def _reduce_218( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 807
  def _reduce_219( val, _values, result )
    result = ast AST::Regex, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 815
  def _reduce_220( val, _values, result )
    if val[1].instance_of?(AST::ASTHash)
        result = val[1]
    else
        result = ast AST::ASTHash, { :value => val[1] }
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 822
  def _reduce_221( val, _values, result )
    if val[1].instance_of?(AST::ASTHash)
        result = val[1]
    else
        result = ast AST::ASTHash, { :value => val[1] }
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 824
  def _reduce_222( val, _values, result )
    result = ast AST::ASTHash
   result
  end
.,.,

 # reduce 223 omitted

module_eval <<'.,.,', 'grammar.ra', 834
  def _reduce_224( val, _values, result )
    if val[0].instance_of?(AST::ASTHash)
        result = val[0].merge(val[2])
    else
        result = ast AST::ASTHash, :value => val[0]
        result.merge(val[2])
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 838
  def _reduce_225( val, _values, result )
    result = ast AST::ASTHash, { :value => { val[0] => val[2] } }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 839
  def _reduce_226( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 840
  def _reduce_227( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 845
  def _reduce_228( val, _values, result )
    result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]
   result
  end
.,.,

 # reduce 229 omitted

module_eval <<'.,.,', 'grammar.ra', 850
  def _reduce_230( val, _values, result )
    result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
