#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id9c55934a79', 'grammar.ra', 801

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id9c55934a79

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 63, :_reduce_1,
 1, 63, :_reduce_none,
 1, 64, :_reduce_none,
 2, 64, :_reduce_4,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 4, 74, :_reduce_18,
 5, 74, :_reduce_19,
 3, 74, :_reduce_20,
 2, 74, :_reduce_21,
 1, 80, :_reduce_none,
 1, 80, :_reduce_none,
 3, 80, :_reduce_24,
 3, 80, :_reduce_25,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_33,
 5, 67, :_reduce_34,
 5, 67, :_reduce_35,
 5, 67, :_reduce_36,
 5, 78, :_reduce_37,
 2, 68, :_reduce_38,
 1, 97, :_reduce_39,
 2, 97, :_reduce_40,
 6, 69, :_reduce_41,
 2, 69, :_reduce_42,
 3, 98, :_reduce_43,
 3, 98, :_reduce_44,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 3, 99, :_reduce_47,
 1, 100, :_reduce_none,
 3, 100, :_reduce_49,
 1, 101, :_reduce_50,
 1, 101, :_reduce_51,
 3, 102, :_reduce_52,
 3, 102, :_reduce_53,
 1, 103, :_reduce_none,
 1, 103, :_reduce_none,
 4, 105, :_reduce_56,
 1, 91, :_reduce_none,
 3, 91, :_reduce_58,
 0, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 107, :_reduce_61,
 1, 83, :_reduce_62,
 1, 85, :_reduce_63,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 3, 70, :_reduce_70,
 3, 79, :_reduce_71,
 0, 93, :_reduce_72,
 1, 93, :_reduce_73,
 3, 93, :_reduce_74,
 3, 110, :_reduce_75,
 3, 112, :_reduce_76,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 0, 96, :_reduce_79,
 1, 96, :_reduce_80,
 3, 96, :_reduce_81,
 1, 114, :_reduce_none,
 3, 114, :_reduce_83,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 4, 87, :_reduce_100,
 3, 87, :_reduce_101,
 1, 89, :_reduce_102,
 1, 89, :_reduce_103,
 1, 86, :_reduce_104,
 4, 82, :_reduce_105,
 4, 82, :_reduce_106,
 6, 72, :_reduce_107,
 5, 72, :_reduce_108,
 0, 116, :_reduce_none,
 4, 116, :_reduce_110,
 3, 116, :_reduce_111,
 1, 109, :_reduce_none,
 3, 109, :_reduce_113,
 3, 109, :_reduce_114,
 3, 109, :_reduce_115,
 3, 109, :_reduce_116,
 3, 109, :_reduce_117,
 3, 109, :_reduce_118,
 3, 109, :_reduce_119,
 3, 109, :_reduce_120,
 2, 109, :_reduce_121,
 3, 109, :_reduce_122,
 3, 109, :_reduce_123,
 3, 109, :_reduce_124,
 3, 109, :_reduce_125,
 3, 109, :_reduce_126,
 3, 109, :_reduce_127,
 2, 109, :_reduce_128,
 3, 109, :_reduce_129,
 3, 109, :_reduce_130,
 3, 109, :_reduce_131,
 5, 71, :_reduce_132,
 1, 118, :_reduce_none,
 2, 118, :_reduce_134,
 5, 119, :_reduce_135,
 4, 119, :_reduce_136,
 1, 120, :_reduce_none,
 3, 120, :_reduce_138,
 3, 88, :_reduce_139,
 1, 122, :_reduce_none,
 4, 122, :_reduce_141,
 1, 124, :_reduce_none,
 3, 124, :_reduce_143,
 3, 123, :_reduce_144,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_152,
 1, 121, :_reduce_none,
 1, 125, :_reduce_154,
 3, 125, :_reduce_155,
 2, 73, :_reduce_156,
 6, 75, :_reduce_157,
 5, 75, :_reduce_158,
 6, 76, :_reduce_159,
 5, 76, :_reduce_160,
 6, 77, :_reduce_161,
 5, 77, :_reduce_162,
 1, 95, :_reduce_163,
 1, 90, :_reduce_164,
 1, 90, :_reduce_165,
 1, 128, :_reduce_none,
 3, 128, :_reduce_167,
 1, 130, :_reduce_168,
 1, 131, :_reduce_169,
 1, 131, :_reduce_170,
 1, 131, :_reduce_171,
 1, 131, :_reduce_172,
 0, 65, :_reduce_173,
 0, 132, :_reduce_174,
 1, 126, :_reduce_none,
 3, 126, :_reduce_176,
 3, 126, :_reduce_177,
 1, 133, :_reduce_none,
 3, 133, :_reduce_179,
 3, 134, :_reduce_180,
 1, 134, :_reduce_181,
 3, 134, :_reduce_182,
 1, 134, :_reduce_183,
 1, 129, :_reduce_none,
 2, 129, :_reduce_185,
 1, 127, :_reduce_none,
 2, 127, :_reduce_187,
 1, 135, :_reduce_none,
 1, 135, :_reduce_none,
 1, 84, :_reduce_190,
 3, 108, :_reduce_191,
 4, 108, :_reduce_192,
 2, 108, :_reduce_193,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 0, 94, :_reduce_none,
 1, 94, :_reduce_197,
 1, 117, :_reduce_198 ]

racc_reduce_n = 199

racc_shift_n = 328

racc_action_table = [
    76,    54,    57,   286,   186,    38,    39,   284,    89,   246,
    52,   186,    90,   159,   143,   283,    98,   125,   151,   155,
    72,    76,    54,    57,   137,    91,    38,    39,   244,   245,
   137,    46,    38,    39,   260,    56,    59,   244,   245,    67,
    40,    72,   122,    42,    53,    77,   193,   164,    62,    92,
  -151,    83,    46,    76,    54,    57,    56,    59,    46,    61,
    67,    40,   164,   169,    42,    53,    77,    40,   206,    62,
    42,   164,    83,    46,    76,    54,    57,  -148,   169,   164,
    61,   205,    46,   136,    46,   300,    36,   169,    56,   200,
    46,   248,    67,     4,    72,   169,   276,   110,   299,   247,
   263,    62,   151,   155,    36,    46,    76,    54,    57,    56,
    59,     4,    61,    67,    36,   252,    36,   182,    53,    77,
   256,     4,    62,     4,     8,    83,   162,    76,    54,    57,
   159,   143,   162,    61,   249,   151,   155,    46,   244,   245,
  -145,    56,    59,  -147,   216,    67,   269,    72,   209,   217,
    53,   207,   252,   129,    62,   209,   210,   256,    46,    52,
    54,    57,    56,    59,   240,    61,    67,   271,   209,   210,
   137,    53,    77,   209,   310,    62,    54,    57,    83,    49,
    76,    54,    57,    54,    57,  -149,    61,    33,    34,  -150,
    46,   151,   155,  -146,    56,    59,   176,   277,    67,   257,
    72,   177,    50,    53,    90,   129,  -148,    62,    89,  -145,
    61,    46,    76,    54,    57,    56,    59,   136,    61,    67,
  -163,   183,   279,  -147,    53,    77,  -148,   175,    62,   188,
   131,    83,  -147,    76,    54,    57,   285,   185,   186,    61,
   129,   189,   195,    46,   297,   298,   195,    56,    59,   301,
   104,    67,  -146,    72,   188,   188,    53,  -146,    61,   311,
    62,   279,   313,  -150,    46,    76,    54,    57,    56,    59,
  -147,    61,    67,  -145,  -148,  -146,  -150,    53,    77,   315,
    96,    62,  -149,   160,    83,    45,    76,    54,    57,   191,
   321,  -197,    61,    37,   162,   174,    46,  -145,   nil,   nil,
    56,    59,   nil,   nil,    67,   nil,   nil,   nil,   nil,    53,
   nil,   nil,   nil,    62,   nil,   nil,   nil,    46,    76,    54,
    57,    56,    59,   nil,    61,    67,   nil,   nil,   nil,   nil,
    53,   nil,   nil,   nil,    62,   nil,   nil,   nil,    72,    76,
    54,    57,   nil,   nil,   nil,    61,   nil,   nil,   nil,    46,
   nil,   nil,   nil,    56,    59,   nil,   nil,    67,   nil,   nil,
   nil,   nil,    53,    77,   nil,   nil,    62,   nil,   nil,    83,
    46,    76,    54,    57,    56,    59,   nil,    61,    67,   nil,
   nil,   nil,   nil,    53,   nil,   nil,   nil,    62,   nil,   nil,
   nil,    72,    76,    54,    57,   nil,   nil,   nil,    61,   nil,
   nil,   nil,    46,   nil,   nil,   nil,    56,    59,   nil,   nil,
    67,   nil,    72,   nil,   nil,    53,    77,   nil,   nil,    62,
   nil,   nil,    83,    46,    76,    54,    57,    56,    59,   nil,
    61,    67,   nil,   nil,   nil,   nil,    53,    77,   nil,   nil,
    62,   nil,   nil,    83,    72,    76,    54,    57,   nil,   nil,
   nil,    61,   nil,   nil,   nil,    46,   nil,   nil,   nil,    56,
    59,   nil,   nil,    67,   nil,    72,   nil,   nil,    53,    77,
   nil,   nil,    62,   nil,   nil,    83,    46,    76,    54,    57,
    56,    59,   nil,    61,    67,   nil,   nil,   nil,   nil,    53,
    77,   nil,   nil,    62,   nil,   nil,    83,    72,    76,    54,
    57,   nil,   nil,   nil,    61,   nil,   nil,   nil,    46,   nil,
   nil,   nil,    56,    59,   nil,   nil,    67,    76,    54,    57,
   140,    53,    77,   nil,   nil,    62,   nil,   nil,    83,    46,
   nil,   nil,   nil,    56,   112,   nil,    61,    67,    76,    54,
    57,   nil,   110,   nil,   nil,   nil,    62,   nil,    46,    54,
    57,   nil,    56,    59,   nil,   nil,    67,    61,   nil,   nil,
   nil,    53,   nil,   nil,   nil,    62,   nil,   nil,   nil,    46,
    76,    54,    57,    56,    59,   nil,    61,    67,   nil,    46,
   nil,   nil,    53,    56,   200,   nil,    62,    67,    76,    54,
    57,   nil,   110,   nil,   nil,   nil,    62,    61,   nil,   nil,
   nil,    46,   nil,   nil,   nil,    56,    59,    61,    72,    67,
    76,    54,    57,   nil,    53,   nil,   nil,   nil,    62,    46,
   nil,   nil,   nil,    56,    59,   nil,   nil,    67,   nil,    61,
    72,   nil,    53,    77,   nil,   nil,    62,   nil,   nil,    83,
   nil,    46,    76,    54,    57,    56,    59,    61,   nil,    67,
   nil,   nil,   nil,   nil,    53,    77,   nil,   nil,    62,   nil,
   nil,    83,   nil,    76,    54,    57,   nil,   nil,   nil,    61,
   nil,   nil,   nil,    46,   nil,   nil,   nil,    56,    59,   nil,
   nil,    67,   nil,    72,   nil,   nil,    53,   nil,   nil,   nil,
    62,   nil,   nil,   nil,    46,    76,    54,    57,    56,    59,
   nil,    61,    67,   nil,   nil,   nil,   nil,    53,    77,   nil,
   nil,    62,   nil,   nil,    83,    72,    76,    54,    57,   nil,
   nil,   nil,    61,   nil,   nil,   nil,    46,   nil,   nil,   nil,
    56,    59,   nil,   nil,    67,   nil,    72,   nil,   nil,    53,
    77,   nil,   nil,    62,   nil,   nil,    83,    46,    76,    54,
    57,    56,    59,   nil,    61,    67,   nil,   nil,   nil,   nil,
    53,    77,   nil,   nil,    62,   nil,   nil,    83,    72,    76,
    54,    57,   nil,   nil,   nil,    61,   nil,   nil,   nil,    46,
   nil,   nil,   nil,    56,    59,   nil,   nil,    67,   nil,    72,
   nil,   nil,    53,    77,   nil,   nil,    62,   nil,   nil,    83,
    46,    76,    54,    57,    56,    59,   nil,    61,    67,   nil,
   nil,   nil,   nil,    53,    77,   nil,   nil,    62,   nil,   nil,
    83,   nil,    76,    54,    57,   nil,   nil,   nil,    61,   nil,
   nil,   nil,    46,   nil,   nil,   nil,    56,    59,   nil,   nil,
    67,   nil,    72,   nil,   nil,    53,   nil,   nil,   nil,    62,
   nil,   nil,   nil,    46,    54,    57,   nil,    56,    59,   nil,
    61,    67,   nil,   nil,   nil,   nil,    53,    77,    54,    57,
    62,   nil,   nil,    83,   274,    54,    57,   nil,   nil,   nil,
   nil,    61,   nil,   nil,    46,   nil,   nil,   nil,    56,    59,
   nil,   nil,    67,    54,    57,   132,    50,    53,    46,   nil,
   nil,    62,    56,   200,   nil,    46,    67,    54,    57,    56,
    59,   110,    61,    67,   nil,    62,   nil,    50,    53,   nil,
   nil,   nil,    62,    46,   nil,   nil,    61,    56,   200,    54,
    57,    67,   nil,    61,   nil,   nil,   110,    46,   nil,   nil,
    62,    56,   200,    54,    57,    67,   nil,   nil,   nil,   nil,
   110,    61,   nil,   nil,    62,   nil,   nil,   nil,   nil,    46,
   nil,   nil,   nil,    56,   200,    61,   nil,    67,    54,    57,
    54,    57,   110,    46,   nil,   nil,    62,    56,   200,   nil,
   nil,    67,   nil,   nil,   nil,   nil,   110,    61,   213,   nil,
    62,   nil,   nil,   nil,   nil,    54,    57,   nil,    46,   281,
    46,    61,    56,    59,    56,    59,    67,   nil,    67,   nil,
    50,    53,    50,    53,   nil,    62,   nil,    62,   nil,   nil,
    54,    57,   nil,   202,   nil,    46,    61,   nil,    61,    56,
   200,   nil,   nil,    67,   nil,   nil,   nil,   nil,   110,   nil,
   nil,   nil,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   156,   nil,    61,    56,   200,   nil,   nil,    67,   nil,
   149,   154,   nil,   110,   nil,   nil,   nil,    62,   nil,   145,
   147,   150,   153,   149,   154,   nil,   nil,   nil,    61,   nil,
   nil,   215,   145,   147,   150,   153,   nil,   nil,   157,   158,
   159,   143,   nil,   148,   152,   151,   155,   157,   158,   159,
   143,   144,   146,   nil,   151,   155,   148,   152,   nil,   nil,
   157,   158,   159,   143,   144,   146,   nil,   151,   155,   149,
   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   145,   147,
   150,   153,   149,   154,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   145,   147,   150,   153,   nil,   nil,   157,   158,   159,
   143,   nil,   148,   152,   151,   155,   157,   158,   159,   143,
   144,   146,   nil,   151,   155,   nil,   nil,   nil,   nil,   157,
   158,   159,   143,   144,   146,   nil,   151,   155,   149,   154,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   145,   147,   150,
   153,   149,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   147,   150,   153,   nil,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   152,   145,   nil,   157,   158,   159,   143,   144,
   146,   nil,   151,   155,   148,   152,   154,   nil,   157,   158,
   159,   143,   144,   146,   145,   151,   155,   nil,   nil,   154,
   nil,   157,   158,   159,   143,   144,   146,   145,   151,   155,
   154,   nil,   157,   158,   159,   143,   144,   146,   145,   151,
   155,   nil,   157,   158,   159,   143,   144,   146,   nil,   151,
   155,   nil,   nil,   nil,   319,   157,   158,   159,   143,   144,
   146,   nil,   151,   155,   nil,   nil,   157,   158,   159,   143,
   144,   146,   nil,   151,   155,    18,   266,    23,    26,   nil,
     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,
   nil,   nil,     4,     8,   nil,   304,   nil,    18,   nil,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,    18,   306,    23,    26,
   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,   nil,   280,   nil,    18,   nil,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,    18,   231,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,   nil,   322,   nil,    18,
   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,   258,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,   nil,   324,   nil,
    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,
   326,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,   302,
   nil,    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   327,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,
   nil,   nil,    18,   nil,    23,    26,   nil,     1,     5,   nil,
    12,   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,
     8,    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,   157,
   158,   159,   143,   144,   146,   nil,   151,   155 ]

racc_action_check = [
    34,    34,    34,   242,   129,   122,   122,   239,    21,   165,
    59,   112,    21,   234,   234,   239,    27,    41,   234,   234,
    34,   159,   159,   159,   112,    21,    12,    12,   242,   242,
    59,    34,   125,   125,   184,    34,    34,   165,   165,    34,
   122,   159,    41,   122,    34,    34,   129,    91,    34,    21,
    81,    34,   159,   185,   185,   185,   159,   159,    91,    34,
   159,    12,   164,    91,    12,   159,   159,   125,   133,   159,
   125,   243,   159,   164,   143,   143,   143,    80,   164,    92,
   159,   133,   243,   214,   185,   254,    26,   243,   185,   185,
    92,   168,   185,    26,   143,    92,   214,   185,   254,   168,
   187,   185,   235,   235,     5,   143,   186,   186,   186,   143,
   143,     5,   185,   143,   104,   300,    28,   104,   143,   143,
   300,   104,   143,    28,    28,   143,   188,   144,   144,   144,
   233,   233,   189,   143,   173,   233,   233,   186,   173,   173,
    79,   186,   186,    75,   139,   186,   194,   144,   139,   139,
   186,   135,   177,   195,   186,   135,   135,   177,   144,    16,
    16,    16,   144,   144,   161,   186,   144,   196,   161,   161,
   200,   144,   144,   273,   273,   144,    23,    23,   144,    16,
    18,    18,    18,   175,   175,    71,   144,     1,     1,    70,
    16,   218,   218,    69,    16,    16,    96,   217,    16,   178,
    18,    97,    16,    16,   100,   174,    66,    16,    65,    63,
   151,    18,    20,    20,    20,    18,    18,    55,    16,    18,
    53,   105,   231,    51,    18,    18,   116,    95,    18,   163,
    47,    18,   109,   145,   145,   145,   241,   111,   162,    18,
    45,   117,   250,    20,   252,   253,   130,    20,    20,   256,
    35,    20,   118,   145,   265,   113,    20,    82,   155,   279,
    20,   280,   283,    85,   145,   301,   301,   301,   145,   145,
   289,    20,   145,   291,   292,   293,   294,   145,   145,   296,
    25,   145,    87,    88,   145,    15,   297,   297,   297,   123,
   309,   310,   145,     9,    90,    93,   301,   114,   nil,   nil,
   301,   301,   nil,   nil,   301,   nil,   nil,   nil,   nil,   301,
   nil,   nil,   nil,   301,   nil,   nil,   nil,   297,   158,   158,
   158,   297,   297,   nil,   301,   297,   nil,   nil,   nil,   nil,
   297,   nil,   nil,   nil,   297,   nil,   nil,   nil,   158,   271,
   271,   271,   nil,   nil,   nil,   297,   nil,   nil,   nil,   158,
   nil,   nil,   nil,   158,   158,   nil,   nil,   158,   nil,   nil,
   nil,   nil,   158,   158,   nil,   nil,   158,   nil,   nil,   158,
   271,   146,   146,   146,   271,   271,   nil,   158,   271,   nil,
   nil,   nil,   nil,   271,   nil,   nil,   nil,   271,   nil,   nil,
   nil,   146,   147,   147,   147,   nil,   nil,   nil,   271,   nil,
   nil,   nil,   146,   nil,   nil,   nil,   146,   146,   nil,   nil,
   146,   nil,   147,   nil,   nil,   146,   146,   nil,   nil,   146,
   nil,   nil,   146,   147,    33,    33,    33,   147,   147,   nil,
   146,   147,   nil,   nil,   nil,   nil,   147,   147,   nil,   nil,
   147,   nil,   nil,   147,    33,    77,    77,    77,   nil,   nil,
   nil,   147,   nil,   nil,   nil,    33,   nil,   nil,   nil,    33,
    33,   nil,   nil,    33,   nil,    77,   nil,   nil,    33,    33,
   nil,   nil,    33,   nil,   nil,    33,    77,   148,   148,   148,
    77,    77,   nil,    33,    77,   nil,   nil,   nil,   nil,    77,
    77,   nil,   nil,    77,   nil,   nil,    77,   148,    37,    37,
    37,   nil,   nil,   nil,    77,   nil,   nil,   nil,   148,   nil,
   nil,   nil,   148,   148,   nil,   nil,   148,    76,    76,    76,
    76,   148,   148,   nil,   nil,   148,   nil,   nil,   148,    37,
   nil,   nil,   nil,    37,    37,   nil,   148,    37,   193,   193,
   193,   nil,    37,   nil,   nil,   nil,    37,   nil,    76,   202,
   202,   nil,    76,    76,   nil,   nil,    76,    37,   nil,   nil,
   nil,    76,   nil,   nil,   nil,    76,   nil,   nil,   nil,   193,
   208,   208,   208,   193,   193,   nil,    76,   193,   nil,   202,
   nil,   nil,   193,   202,   202,   nil,   193,   202,    72,    72,
    72,   nil,   202,   nil,   nil,   nil,   202,   193,   nil,   nil,
   nil,   208,   nil,   nil,   nil,   208,   208,   202,    72,   208,
   149,   149,   149,   nil,   208,   nil,   nil,   nil,   208,    72,
   nil,   nil,   nil,    72,    72,   nil,   nil,    72,   nil,   208,
   149,   nil,    72,    72,   nil,   nil,    72,   nil,   nil,    72,
   nil,   149,    52,    52,    52,   149,   149,    72,   nil,   149,
   nil,   nil,   nil,   nil,   149,   149,   nil,   nil,   149,   nil,
   nil,   149,   nil,   150,   150,   150,   nil,   nil,   nil,   149,
   nil,   nil,   nil,    52,   nil,   nil,   nil,    52,    52,   nil,
   nil,    52,   nil,   150,   nil,   nil,    52,   nil,   nil,   nil,
    52,   nil,   nil,   nil,   150,   152,   152,   152,   150,   150,
   nil,    52,   150,   nil,   nil,   nil,   nil,   150,   150,   nil,
   nil,   150,   nil,   nil,   150,   152,   153,   153,   153,   nil,
   nil,   nil,   150,   nil,   nil,   nil,   152,   nil,   nil,   nil,
   152,   152,   nil,   nil,   152,   nil,   153,   nil,   nil,   152,
   152,   nil,   nil,   152,   nil,   nil,   152,   153,   154,   154,
   154,   153,   153,   nil,   152,   153,   nil,   nil,   nil,   nil,
   153,   153,   nil,   nil,   153,   nil,   nil,   153,   154,   157,
   157,   157,   nil,   nil,   nil,   153,   nil,   nil,   nil,   154,
   nil,   nil,   nil,   154,   154,   nil,   nil,   154,   nil,   157,
   nil,   nil,   154,   154,   nil,   nil,   154,   nil,   nil,   154,
   157,    89,    89,    89,   157,   157,   nil,   154,   157,   nil,
   nil,   nil,   nil,   157,   157,   nil,   nil,   157,   nil,   nil,
   157,   nil,    83,    83,    83,   nil,   nil,   nil,   157,   nil,
   nil,   nil,    89,   nil,   nil,   nil,    89,    89,   nil,   nil,
    89,   nil,    83,   nil,   nil,    89,   nil,   nil,   nil,    89,
   nil,   nil,   nil,    83,   206,   206,   nil,    83,    83,   nil,
    89,    83,   nil,   nil,   nil,   nil,    83,    83,   247,   247,
    83,   nil,   nil,    83,   206,    49,    49,   nil,   nil,   nil,
   nil,    83,   nil,   nil,   206,   nil,   nil,   nil,   206,   206,
   nil,   nil,   206,   248,   248,    49,   206,   206,   247,   nil,
   nil,   206,   247,   247,   nil,    49,   247,   160,   160,    49,
    49,   247,   206,    49,   nil,   247,   nil,    49,    49,   nil,
   nil,   nil,    49,   248,   nil,   nil,   247,   248,   248,   284,
   284,   248,   nil,    49,   nil,   nil,   248,   160,   nil,   nil,
   248,   160,   160,   308,   308,   160,   nil,   nil,   nil,   nil,
   160,   248,   nil,   nil,   160,   nil,   nil,   nil,   nil,   284,
   nil,   nil,   nil,   284,   284,   160,   nil,   284,   137,   137,
   136,   136,   284,   308,   nil,   nil,   284,   308,   308,   nil,
   nil,   308,   nil,   nil,   nil,   nil,   308,   284,   137,   nil,
   308,   nil,   nil,   nil,   nil,   237,   237,   nil,   137,   237,
   136,   308,   137,   137,   136,   136,   137,   nil,   136,   nil,
   137,   137,   136,   136,   nil,   137,   nil,   136,   nil,   nil,
   131,   131,   nil,   131,   nil,   237,   137,   nil,   136,   237,
   237,   nil,   nil,   237,   nil,   nil,   nil,   nil,   237,   nil,
   nil,   nil,   237,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   131,    86,   nil,   237,   131,   131,   nil,   nil,   131,   nil,
    86,    86,   nil,   131,   nil,   nil,   nil,   131,   nil,    86,
    86,    86,    86,   138,   138,   nil,   nil,   nil,   131,   nil,
   nil,   138,   138,   138,   138,   138,   nil,   nil,   219,   219,
   219,   219,   nil,    86,    86,   219,   219,    86,    86,    86,
    86,    86,    86,   nil,    86,    86,   138,   138,   nil,   nil,
   138,   138,   138,   138,   138,   138,   nil,   138,   138,   103,
   103,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   103,   103,
   103,   103,   227,   227,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   227,   227,   227,   227,   nil,   nil,   221,   221,   221,
   221,   nil,   103,   103,   221,   221,   103,   103,   103,   103,
   103,   103,   nil,   103,   103,   nil,   nil,   nil,   nil,   227,
   227,   227,   227,   227,   227,   nil,   227,   227,   223,   223,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   223,   223,   223,
   223,   102,   102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   102,   102,   102,   102,   nil,   224,   nil,   nil,   nil,   nil,
   nil,   nil,   223,   224,   nil,   223,   223,   223,   223,   223,
   223,   nil,   223,   223,   102,   102,   225,   nil,   102,   102,
   102,   102,   102,   102,   225,   102,   102,   nil,   nil,   222,
   nil,   224,   224,   224,   224,   224,   224,   222,   224,   224,
   228,   nil,   220,   220,   220,   220,   220,   220,   228,   220,
   220,   nil,   225,   225,   225,   225,   225,   225,   nil,   225,
   225,   nil,   nil,   nil,   303,   222,   222,   222,   222,   222,
   222,   nil,   222,   222,   nil,   nil,   228,   228,   228,   228,
   228,   228,   nil,   228,   228,   303,   191,   303,   303,   nil,
   303,   303,   nil,   303,   nil,   303,   nil,   303,   nil,   303,
   nil,   nil,   303,   303,   nil,   259,   nil,   191,   nil,   191,
   191,   nil,   191,   191,   nil,   191,   nil,   191,   nil,   191,
   nil,   191,   nil,   nil,   191,   191,   259,   267,   259,   259,
   nil,   259,   259,   nil,   259,   nil,   259,   nil,   259,   nil,
   259,   nil,   nil,   259,   259,   nil,   232,   nil,   267,   nil,
   267,   267,   nil,   267,   267,   nil,   267,   nil,   267,   nil,
   267,   nil,   267,   nil,   nil,   267,   267,   232,   156,   232,
   232,   nil,   232,   232,   nil,   232,   nil,   232,   nil,   232,
   nil,   232,   nil,   nil,   232,   232,   nil,   311,   nil,   156,
   nil,   156,   156,   nil,   156,   156,   nil,   156,   nil,   156,
   nil,   156,   nil,   156,   nil,   nil,   156,   156,   311,   183,
   311,   311,   nil,   311,   311,   nil,   311,   nil,   311,   nil,
   311,   nil,   311,   nil,   nil,   311,   311,   nil,   313,   nil,
   183,   nil,   183,   183,   nil,   183,   183,   nil,   183,   nil,
   183,   nil,   183,   nil,   183,   nil,   nil,   183,   183,   313,
   323,   313,   313,   nil,   313,   313,   nil,   313,   nil,   313,
   nil,   313,   nil,   313,   nil,   nil,   313,   313,   nil,   257,
   nil,   323,   nil,   323,   323,   nil,   323,   323,   nil,   323,
   nil,   323,   nil,   323,   nil,   323,   nil,   nil,   323,   323,
   257,   325,   257,   257,   nil,   257,   257,   nil,   257,   nil,
   257,   nil,   257,   nil,   257,   nil,   nil,   257,   257,   nil,
   nil,   nil,   325,   nil,   325,   325,   nil,   325,   325,   nil,
   325,   nil,   325,   nil,   325,   nil,   325,   nil,   nil,   325,
   325,    30,   nil,    30,    30,   nil,    30,    30,   nil,    30,
   nil,    30,   nil,    30,   nil,    30,   nil,   nil,    30,    30,
     0,   nil,     0,     0,   nil,     0,     0,   nil,     0,   nil,
     0,   nil,     0,   nil,     0,   nil,   nil,     0,     0,   229,
   229,   229,   229,   229,   229,   nil,   229,   229 ]

racc_action_pointer = [
  1532,   174,   nil,   nil,   nil,    66,   nil,   nil,   nil,   287,
   nil,   nil,    23,   nil,   nil,   279,   157,   nil,   178,   nil,
   210,     6,   nil,   173,   nil,   280,    48,   -26,    78,   nil,
  1513,   nil,   nil,   422,    -2,   215,   nil,   496,   nil,   nil,
   nil,     7,   nil,   nil,   nil,   202,   nil,   209,   nil,   872,
   nil,   202,   640,   218,   nil,   207,   nil,   nil,   nil,     8,
   nil,   nil,   nil,   188,   nil,   206,   185,   nil,   nil,   172,
   168,   164,   586,   nil,   nil,   122,   515,   443,   nil,   119,
    56,    29,   236,   820,   nil,   242,  1045,   261,   277,   799,
   256,    25,    57,   289,   nil,   217,   196,   179,   nil,   nil,
   198,   nil,  1176,  1104,    76,   215,   nil,   nil,   nil,   211,
   nil,   198,     2,   245,   276,   nil,   205,   223,   231,   nil,
   nil,   nil,     2,   283,   nil,    29,   nil,   nil,   nil,    -5,
   236,  1017,   nil,    58,   nil,   146,   967,   965,  1058,   139,
   nil,   nil,   nil,    72,   125,   231,   369,   390,   475,   608,
   661,   149,   693,   714,   746,   197,  1371,   767,   316,    19,
   904,   159,   229,   219,    40,   -11,   nil,   nil,    75,   nil,
   nil,   nil,   nil,    90,   167,   180,   nil,   119,   193,   nil,
   nil,   nil,   nil,  1412,    27,    51,   104,    93,    88,    94,
   nil,  1289,   nil,   536,   139,   115,   158,   nil,   nil,   nil,
   148,   nil,   546,   nil,   nil,   nil,   851,   nil,   568,   nil,
   nil,   nil,   nil,   nil,    73,   nil,   nil,   192,   132,  1036,
  1200,  1095,  1223,  1163,  1189,  1210,   nil,  1117,  1234,  1527,
   nil,   193,  1349,    76,   -41,    43,   nil,   992,   nil,    -3,
   nil,   229,   -20,    49,   nil,   nil,   nil,   865,   890,   nil,
   232,   nil,   231,   222,    75,   nil,   236,  1472,   nil,  1308,
   nil,   nil,   nil,   nil,   nil,   244,   nil,  1330,   nil,   nil,
   nil,   337,   nil,   164,   nil,   nil,   nil,   nil,   nil,   253,
   232,   nil,   nil,   256,   926,   nil,   nil,   nil,   nil,   249,
   nil,   252,   253,   254,   255,   nil,   272,   284,   nil,   nil,
    82,   263,   nil,  1267,   nil,   nil,   nil,   nil,   940,   283,
   284,  1390,   nil,  1431,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1453,   nil,  1494,   nil,   nil ]

racc_action_default = [
  -173,  -199,   -15,    -3,  -165,  -199,   -16,    -5,  -163,  -199,
   -17,    -6,  -199,    -7,    -8,  -199,  -164,    -9,  -199,   -10,
  -199,  -199,   -11,  -199,   -12,  -199,  -199,   -39,  -199,   -13,
    -1,   -14,    -2,  -199,  -199,  -173,  -164,   -72,  -171,  -170,
  -169,  -173,  -172,  -166,  -168,   -79,  -190,  -199,   -31,  -199,
   -33,   -32,  -199,   -63,  -102,   -21,  -104,  -103,   -22,   -62,
   -23,  -198,   -61,   -26,  -153,  -199,   -27,  -152,  -151,   -28,
   -29,   -30,  -199,   -94,  -112,   -90,  -199,  -199,   -97,   -91,
   -95,   -99,   -92,  -199,   -96,   -93,  -199,   -98,  -199,  -199,
   -72,  -173,  -173,   -42,  -154,  -156,  -199,  -173,   -40,   -38,
  -199,    -4,   -70,   -71,  -199,  -199,  -186,   -73,   -67,   -64,
   -63,   -59,   -62,  -196,   -65,   -57,   -68,  -199,   -66,  -150,
   -69,  -149,  -199,  -199,  -184,  -199,   -77,   -78,   -80,  -199,
  -196,  -199,   -20,  -199,   -82,  -199,  -199,  -199,  -199,  -199,
  -193,  -128,  -121,  -199,  -199,  -199,  -199,  -199,  -199,  -199,
  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,
  -199,  -199,  -199,  -196,  -173,  -199,   -46,   -48,  -199,   -62,
   -55,   -54,   -45,  -199,   -79,  -199,   328,  -174,  -199,  -175,
  -188,  -187,  -189,  -199,  -199,   -60,  -199,  -199,  -197,   -72,
  -185,  -199,  -167,  -199,  -199,  -197,  -199,  -147,  -139,  -140,
   -62,  -145,  -199,  -148,  -146,   -18,  -199,  -105,  -199,  -194,
  -195,   -24,   -25,  -101,  -199,  -131,  -191,  -195,  -117,  -119,
  -123,  -120,  -125,  -130,  -127,  -124,  -113,  -129,  -126,  -122,
  -114,  -109,  -199,  -115,  -116,  -118,  -137,  -199,  -133,  -199,
  -106,  -199,  -199,  -199,   -51,   -50,   -44,  -199,  -199,   -43,
  -196,  -155,  -183,  -199,  -199,  -178,  -181,  -199,  -160,  -199,
   -34,   -58,   -75,   -35,   -74,  -196,  -162,  -199,   -76,   -37,
   -81,  -199,  -142,  -196,   -19,   -83,  -100,  -192,  -108,  -199,
  -109,  -132,  -134,  -199,  -199,   -36,   -49,   -47,   -88,   -84,
   -52,   -85,   -89,   -86,   -87,   -53,  -199,  -199,  -176,  -177,
  -199,  -199,  -158,  -199,  -159,   -56,  -161,  -144,  -199,  -199,
  -195,  -199,  -107,  -199,  -138,   -41,  -182,  -179,  -180,  -157,
  -143,  -141,  -111,  -199,  -136,  -199,  -110,  -135 ]

racc_goto_table = [
    15,    21,   101,   199,    30,   196,   130,   113,   255,    43,
   238,   126,   211,   278,    35,   120,    60,    25,   115,   135,
    32,    55,   165,   173,    68,   187,   290,   295,   270,   100,
    15,    21,    48,   226,   236,    97,   308,   230,   237,   287,
    93,   198,   194,   139,   184,    68,   273,    95,   178,    60,
    66,   105,    51,   108,   133,   106,   161,    68,    41,    94,
   163,   124,   312,   123,   111,    48,   190,   253,   254,    99,
   181,   116,   nil,   109,   272,   241,   196,   nil,    88,   nil,
   nil,   nil,   211,    66,   nil,    51,   nil,   282,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   242,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   134,   236,   nil,   180,   nil,   nil,   nil,   179,   nil,   nil,
   nil,   nil,   192,   nil,   nil,   171,   171,   nil,   nil,   nil,
   nil,   317,   nil,   nil,   134,   250,   212,    60,   nil,    68,
   126,   nil,   214,   nil,    68,    68,   nil,   134,   nil,   nil,
   nil,   nil,    48,    48,   264,   nil,    15,    21,   314,   265,
   232,   126,   296,   120,   nil,   203,   261,   197,    68,   nil,
    66,    66,    51,    51,   nil,   nil,   nil,   305,   nil,   nil,
   320,   nil,   196,    15,    21,   309,   nil,   259,   nil,   nil,
   nil,    15,    21,    68,   203,   267,   197,   nil,   171,   nil,
   nil,   108,   nil,   nil,   101,   nil,   212,   nil,   nil,   nil,
    68,   251,   nil,    71,    68,   nil,    70,   nil,   nil,   116,
   nil,   109,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   101,    15,    21,   121,   nil,   203,   119,   197,   101,
    66,   nil,    51,   nil,   262,    68,    71,   nil,   nil,    70,
   nil,   268,   nil,   nil,   nil,    68,    68,    15,    21,    15,
    21,   303,   nil,   288,   288,   nil,   275,    15,    21,    69,
   nil,   203,    63,   197,   nil,   101,   nil,   171,   nil,   nil,
   nil,   292,   292,   289,   289,   nil,   nil,   nil,   nil,   nil,
   118,   nil,    68,   114,   nil,   101,   nil,   101,   nil,   nil,
   nil,   nil,    69,    15,    21,    63,   nil,   nil,   nil,   nil,
   nil,    15,    21,    15,    21,   323,    68,   325,   203,   nil,
   197,   nil,   nil,    15,    21,    15,    21,   nil,   121,   307,
   nil,   119,   nil,    71,    71,   nil,    70,    70,   nil,   nil,
   nil,   nil,   203,   nil,   197,   nil,   nil,   170,   170,   nil,
   nil,   nil,   nil,   nil,   nil,   316,   nil,   121,   nil,   318,
   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   121,   nil,   204,   119,   nil,   201,   nil,    69,
    69,   nil,    63,    63,   nil,    86,   nil,   nil,   nil,   121,
   nil,   nil,   119,    71,   nil,   nil,    70,   nil,   nil,   nil,
   102,   103,   nil,   204,   nil,   nil,   201,   nil,   nil,   nil,
   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   121,   nil,   nil,   119,   118,   nil,
   nil,   114,   nil,   nil,   121,   121,   nil,   294,   294,   138,
   nil,   nil,   nil,   nil,   141,   204,   nil,   nil,   201,    69,
   142,   nil,    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   121,   nil,   nil,   119,   nil,   nil,   nil,   nil,   nil,
   204,   nil,   nil,   201,   nil,   nil,   nil,   nil,   nil,   170,
   293,   293,   nil,   291,   291,   121,   nil,   nil,   119,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   218,   219,   220,   221,   222,   223,   224,   225,   nil,   227,
   228,   229,   nil,   nil,   233,   234,   235,   204,   nil,   nil,
   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   204,   nil,   nil,   201 ]

racc_goto_check = [
    20,    33,     4,    61,     2,    59,    34,    31,    72,    68,
    57,    48,    19,    54,    28,    46,    20,     1,    43,    52,
     3,    18,    37,    37,    45,    32,    42,    42,    51,    33,
    20,    33,    26,    55,    59,    28,    53,    55,    56,    38,
    36,    60,    32,    52,    30,    45,    62,    63,    64,    20,
    22,    65,    27,    26,    18,     3,    52,    45,    66,    27,
    31,     3,    54,    67,    29,    26,    69,    70,    71,     5,
    73,    22,   nil,    27,    61,    32,    59,   nil,    49,   nil,
   nil,   nil,    19,    22,   nil,    27,   nil,    57,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    59,   nil,    28,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil,    68,   nil,   nil,    22,    22,   nil,   nil,   nil,
   nil,    72,   nil,   nil,    49,    34,    20,    20,   nil,    45,
    48,   nil,    18,   nil,    45,    45,   nil,    49,   nil,   nil,
   nil,   nil,    26,    26,    48,   nil,    20,    33,    59,    31,
     2,    48,    32,    46,   nil,    22,    43,    27,    45,   nil,
    22,    22,    27,    27,   nil,   nil,   nil,    32,   nil,   nil,
    61,   nil,    59,    20,    33,    32,   nil,     2,   nil,   nil,
   nil,    20,    33,    45,    22,     2,    27,   nil,    22,   nil,
   nil,    26,   nil,   nil,     4,   nil,    20,   nil,   nil,   nil,
    45,    27,   nil,    25,    45,   nil,    24,   nil,   nil,    22,
   nil,    27,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,    20,    33,    25,   nil,    22,    24,    27,     4,
    22,   nil,    27,   nil,    49,    45,    25,   nil,   nil,    24,
   nil,    49,   nil,   nil,   nil,    45,    45,    20,    33,    20,
    33,     2,   nil,    26,    26,   nil,    49,    20,    33,    23,
   nil,    22,    21,    27,   nil,     4,   nil,    22,   nil,   nil,
   nil,    22,    22,    27,    27,   nil,   nil,   nil,   nil,   nil,
    23,   nil,    45,    21,   nil,     4,   nil,     4,   nil,   nil,
   nil,   nil,    23,    20,    33,    21,   nil,   nil,   nil,   nil,
   nil,    20,    33,    20,    33,     2,    45,     2,    22,   nil,
    27,   nil,   nil,    20,    33,    20,    33,   nil,    25,    49,
   nil,    24,   nil,    25,    25,   nil,    24,    24,   nil,   nil,
   nil,   nil,    22,   nil,    27,   nil,   nil,    21,    21,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,    25,   nil,    49,
    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,    23,    24,   nil,    21,   nil,    23,
    23,   nil,    21,    21,   nil,    47,   nil,   nil,   nil,    25,
   nil,   nil,    24,    25,   nil,   nil,    24,   nil,   nil,   nil,
    47,    47,   nil,    23,   nil,   nil,    21,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,    24,    23,   nil,
   nil,    21,   nil,   nil,    25,    25,   nil,    24,    24,    47,
   nil,   nil,   nil,   nil,    47,    23,   nil,   nil,    21,    23,
    47,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    21,
    23,    23,   nil,    21,    21,    25,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    47,    47,    47,    47,    47,    47,    47,   nil,    47,
    47,    47,   nil,   nil,    47,    47,    47,    23,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,    21 ]

racc_goto_pointer = [
   nil,    17,     4,    20,   -28,    41,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,  -124,
     0,   256,    34,   253,   200,   197,    16,    36,     9,    27,
   -67,   -30,   -88,     1,   -39,   nil,    19,   -69,  -204,   nil,
   nil,   nil,  -221,   -19,   nil,     8,   -22,   377,   -34,    58,
   nil,  -167,   -33,  -237,  -218,  -118,  -122,  -150,   nil,  -126,
   -90,  -128,  -156,    24,   -49,    16,    46,    22,    -3,   -56,
  -110,  -109,  -169,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,   172,     3,     7,    11,    13,    14,    17,
    19,    22,    24,    29,    31,     2,     6,    10,   nil,    58,
    78,    79,    80,    82,    85,    87,    73,    75,     9,   nil,
   nil,   nil,   nil,    65,   nil,    28,   nil,   nil,   166,   243,
   167,   168,   nil,   nil,   117,    81,    84,   nil,   107,    74,
   127,   128,   nil,   208,   nil,    64,   nil,   nil,   239,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :APPENDS => 14,
 :LESSEQUAL => 15,
 :NOTEQUAL => 16,
 :DOT => 17,
 :COLON => 18,
 :LLCOLLECT => 19,
 :RRCOLLECT => 20,
 :QMARK => 21,
 :LPAREN => 22,
 :RPAREN => 23,
 :ISEQUAL => 24,
 :GREATEREQUAL => 25,
 :GREATERTHAN => 26,
 :LESSTHAN => 27,
 :IF => 28,
 :ELSE => 29,
 :IMPORT => 30,
 :DEFINE => 31,
 :ELSIF => 32,
 :VARIABLE => 33,
 :CLASS => 34,
 :INHERITS => 35,
 :NODE => 36,
 :BOOLEAN => 37,
 :NAME => 38,
 :SEMIC => 39,
 :CASE => 40,
 :DEFAULT => 41,
 :AT => 42,
 :LCOLLECT => 43,
 :RCOLLECT => 44,
 :CLASSNAME => 45,
 :CLASSREF => 46,
 :NOT => 47,
 :OR => 48,
 :AND => 49,
 :UNDEF => 50,
 :PARROW => 51,
 :PLUS => 52,
 :MINUS => 53,
 :TIMES => 54,
 :DIV => 55,
 :LSHIFT => 56,
 :RSHIFT => 57,
 :UMINUS => 58,
 :MATCH => 59,
 :NOMATCH => 60,
 :REGEX => 61 }

racc_use_result_var = true

racc_nt_base = 62

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'qtexts',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'nodename',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 44
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 60
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 84
  def _reduce_18( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 92
  def _reduce_19( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 98
  def _reduce_20( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 106
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 114
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 123
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

module_eval <<'.,.,', 'grammar.ra', 136
  def _reduce_33( val, _values, result )
                    result = ast AST::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 158
  def _reduce_34( val, _values, result )
    @lexer.commentpop
    array = val[2]
    if array.instance_of?(AST::ResourceInstance)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInstance)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 161
  def _reduce_35( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 164
  def _reduce_36( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 170
  def _reduce_37( val, _values, result )
    @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 197
  def _reduce_38( val, _values, result )
    type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_39( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 199
  def _reduce_40( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 223
  def _reduce_41( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_42( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 252
  def _reduce_43( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_44( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 45 omitted

 # reduce 46 omitted

module_eval <<'.,.,', 'grammar.ra', 268
  def _reduce_47( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 48 omitted

module_eval <<'.,.,', 'grammar.ra', 274
  def _reduce_49( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_50( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 276
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 283
  def _reduce_52( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 288
  def _reduce_53( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 54 omitted

 # reduce 55 omitted

module_eval <<'.,.,', 'grammar.ra', 295
  def _reduce_56( val, _values, result )
    result = ast AST::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 57 omitted

module_eval <<'.,.,', 'grammar.ra', 305
  def _reduce_58( val, _values, result )
    if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

module_eval <<'.,.,', 'grammar.ra', 312
  def _reduce_61( val, _values, result )
    result = ast AST::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 316
  def _reduce_62( val, _values, result )
    result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 320
  def _reduce_63( val, _values, result )
    result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 64 omitted

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

module_eval <<'.,.,', 'grammar.ra', 336
  def _reduce_70( val, _values, result )
    if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 341
  def _reduce_71( val, _values, result )
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_72( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_73( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 355
  def _reduce_74( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 359
  def _reduce_75( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 364
  def _reduce_76( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true
   result
  end
.,.,

 # reduce 77 omitted

 # reduce 78 omitted

module_eval <<'.,.,', 'grammar.ra', 372
  def _reduce_79( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 372
  def _reduce_80( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 381
  def _reduce_81( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 82 omitted

module_eval <<'.,.,', 'grammar.ra', 390
  def _reduce_83( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

module_eval <<'.,.,', 'grammar.ra', 417
  def _reduce_100( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 422
  def _reduce_101( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 426
  def _reduce_102( val, _values, result )
    result = ast AST::String, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 428
  def _reduce_103( val, _values, result )
    result = ast AST::FlatString, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 432
  def _reduce_104( val, _values, result )
    result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_105( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 439
  def _reduce_106( val, _values, result )
    result = ast AST::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 453
  def _reduce_107( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 466
  def _reduce_108( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 109 omitted

module_eval <<'.,.,', 'grammar.ra', 472
  def _reduce_110( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_111( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)
   result
  end
.,.,

 # reduce 112 omitted

module_eval <<'.,.,', 'grammar.ra', 493
  def _reduce_113( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 496
  def _reduce_114( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 499
  def _reduce_115( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 502
  def _reduce_116( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 505
  def _reduce_117( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 508
  def _reduce_118( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 511
  def _reduce_119( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 514
  def _reduce_120( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 517
  def _reduce_121( val, _values, result )
    result = ast AST::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 520
  def _reduce_122( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 523
  def _reduce_123( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 526
  def _reduce_124( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 529
  def _reduce_125( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 532
  def _reduce_126( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 535
  def _reduce_127( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 538
  def _reduce_128( val, _values, result )
    result = ast AST::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 541
  def _reduce_129( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 544
  def _reduce_130( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 547
  def _reduce_131( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 556
  def _reduce_132( val, _values, result )
    @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 133 omitted

module_eval <<'.,.,', 'grammar.ra', 566
  def _reduce_134( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 571
  def _reduce_135( val, _values, result )
    @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_136( val, _values, result )
    @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 137 omitted

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_138( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_139( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 140 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_141( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 142 omitted

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_143( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_144( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 145 omitted

 # reduce 146 omitted

 # reduce 147 omitted

 # reduce 148 omitted

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_152( val, _values, result )
    result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 153 omitted

module_eval <<'.,.,', 'grammar.ra', 625
  def _reduce_154( val, _values, result )
 result = [val[0].value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 629
  def _reduce_155( val, _values, result )
    results = val[0] << val[2].value
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 637
  def _reduce_156( val, _values, result )
    val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 648
  def _reduce_157( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 653
  def _reduce_158( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 662
  def _reduce_159( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :code => val[4], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 668
  def _reduce_160( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 674
  def _reduce_161( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_162( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 679
  def _reduce_163( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_164( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 682
  def _reduce_165( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 166 omitted

module_eval <<'.,.,', 'grammar.ra', 692
  def _reduce_167( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 696
  def _reduce_168( val, _values, result )
    result = ast AST::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 697
  def _reduce_169( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 698
  def _reduce_170( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 699
  def _reduce_171( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 700
  def _reduce_172( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 705
  def _reduce_173( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 709
  def _reduce_174( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 175 omitted

module_eval <<'.,.,', 'grammar.ra', 714
  def _reduce_176( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 718
  def _reduce_177( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 178 omitted

module_eval <<'.,.,', 'grammar.ra', 725
  def _reduce_179( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 730
  def _reduce_180( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 734
  def _reduce_181( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 736
  def _reduce_182( val, _values, result )
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 738
  def _reduce_183( val, _values, result )
    result = [val[0][:value]]
   result
  end
.,.,

 # reduce 184 omitted

module_eval <<'.,.,', 'grammar.ra', 743
  def _reduce_185( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 186 omitted

module_eval <<'.,.,', 'grammar.ra', 748
  def _reduce_187( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 188 omitted

 # reduce 189 omitted

module_eval <<'.,.,', 'grammar.ra', 754
  def _reduce_190( val, _values, result )
    result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 762
  def _reduce_191( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 769
  def _reduce_192( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 771
  def _reduce_193( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 194 omitted

 # reduce 195 omitted

 # reduce 196 omitted

module_eval <<'.,.,', 'grammar.ra', 776
  def _reduce_197( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 781
  def _reduce_198( val, _values, result )
    result = ast AST::Regex, :value => val[0][:value]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
