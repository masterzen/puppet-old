#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..idb0672079c7', 'grammar.ra', 796

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..idb0672079c7

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 63, :_reduce_1,
 1, 63, :_reduce_none,
 1, 64, :_reduce_none,
 2, 64, :_reduce_4,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 1, 66, :_reduce_none,
 4, 74, :_reduce_18,
 5, 74, :_reduce_19,
 3, 74, :_reduce_20,
 2, 74, :_reduce_21,
 1, 80, :_reduce_none,
 1, 80, :_reduce_none,
 3, 80, :_reduce_24,
 3, 80, :_reduce_25,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 1, 81, :_reduce_33,
 5, 67, :_reduce_34,
 5, 67, :_reduce_35,
 5, 67, :_reduce_36,
 5, 78, :_reduce_37,
 2, 68, :_reduce_38,
 1, 97, :_reduce_39,
 2, 97, :_reduce_40,
 6, 69, :_reduce_41,
 2, 69, :_reduce_42,
 3, 98, :_reduce_43,
 3, 98, :_reduce_44,
 1, 99, :_reduce_none,
 1, 99, :_reduce_none,
 3, 99, :_reduce_47,
 1, 100, :_reduce_none,
 3, 100, :_reduce_49,
 1, 101, :_reduce_50,
 1, 101, :_reduce_51,
 3, 102, :_reduce_52,
 3, 102, :_reduce_53,
 1, 103, :_reduce_none,
 1, 103, :_reduce_none,
 4, 105, :_reduce_56,
 1, 91, :_reduce_none,
 3, 91, :_reduce_58,
 0, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 107, :_reduce_61,
 1, 83, :_reduce_62,
 1, 85, :_reduce_63,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 3, 70, :_reduce_70,
 3, 79, :_reduce_71,
 0, 93, :_reduce_72,
 1, 93, :_reduce_73,
 3, 93, :_reduce_74,
 3, 110, :_reduce_75,
 3, 112, :_reduce_76,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 0, 96, :_reduce_79,
 1, 96, :_reduce_80,
 3, 96, :_reduce_81,
 1, 114, :_reduce_none,
 3, 114, :_reduce_83,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 4, 87, :_reduce_100,
 3, 87, :_reduce_101,
 1, 89, :_reduce_102,
 1, 89, :_reduce_103,
 1, 86, :_reduce_104,
 4, 82, :_reduce_105,
 4, 82, :_reduce_106,
 6, 72, :_reduce_107,
 5, 72, :_reduce_108,
 0, 116, :_reduce_none,
 4, 116, :_reduce_110,
 3, 116, :_reduce_111,
 1, 109, :_reduce_none,
 3, 109, :_reduce_113,
 3, 109, :_reduce_114,
 3, 109, :_reduce_115,
 3, 109, :_reduce_116,
 3, 109, :_reduce_117,
 3, 109, :_reduce_118,
 3, 109, :_reduce_119,
 3, 109, :_reduce_120,
 2, 109, :_reduce_121,
 3, 109, :_reduce_122,
 3, 109, :_reduce_123,
 3, 109, :_reduce_124,
 3, 109, :_reduce_125,
 3, 109, :_reduce_126,
 3, 109, :_reduce_127,
 2, 109, :_reduce_128,
 3, 109, :_reduce_129,
 3, 109, :_reduce_130,
 3, 109, :_reduce_131,
 5, 71, :_reduce_132,
 1, 118, :_reduce_none,
 2, 118, :_reduce_134,
 5, 119, :_reduce_135,
 4, 119, :_reduce_136,
 1, 120, :_reduce_none,
 3, 120, :_reduce_138,
 3, 88, :_reduce_139,
 1, 122, :_reduce_none,
 4, 122, :_reduce_141,
 1, 124, :_reduce_none,
 3, 124, :_reduce_143,
 3, 123, :_reduce_144,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 1, 121, :_reduce_152,
 1, 125, :_reduce_153,
 3, 125, :_reduce_154,
 2, 73, :_reduce_155,
 6, 75, :_reduce_156,
 5, 75, :_reduce_157,
 6, 76, :_reduce_158,
 5, 76, :_reduce_159,
 6, 77, :_reduce_160,
 5, 77, :_reduce_161,
 1, 95, :_reduce_162,
 1, 90, :_reduce_163,
 1, 90, :_reduce_164,
 1, 128, :_reduce_none,
 3, 128, :_reduce_166,
 1, 130, :_reduce_167,
 1, 130, :_reduce_168,
 1, 130, :_reduce_169,
 1, 130, :_reduce_170,
 0, 65, :_reduce_171,
 0, 131, :_reduce_172,
 1, 126, :_reduce_none,
 3, 126, :_reduce_174,
 3, 126, :_reduce_175,
 1, 132, :_reduce_none,
 3, 132, :_reduce_177,
 3, 133, :_reduce_178,
 1, 133, :_reduce_179,
 3, 133, :_reduce_180,
 1, 133, :_reduce_181,
 1, 129, :_reduce_none,
 2, 129, :_reduce_183,
 1, 127, :_reduce_none,
 2, 127, :_reduce_185,
 1, 134, :_reduce_none,
 1, 134, :_reduce_none,
 1, 84, :_reduce_188,
 3, 108, :_reduce_189,
 4, 108, :_reduce_190,
 2, 108, :_reduce_191,
 1, 115, :_reduce_none,
 1, 115, :_reduce_none,
 0, 94, :_reduce_none,
 1, 94, :_reduce_195,
 1, 117, :_reduce_196 ]

racc_reduce_n = 197

racc_shift_n = 326

racc_action_table = [
   153,    38,    39,   183,   244,   246,   122,    51,   282,   146,
   151,    86,   284,   245,  -145,    87,   281,   258,   142,   144,
   147,   150,   297,  -151,    73,    53,    56,   134,    88,    38,
    39,   119,   242,   243,    36,   296,    40,   242,   243,    42,
  -148,     4,   145,   149,    69,   190,   154,   155,   156,   140,
   141,   143,    89,   148,   152,    45,    73,    53,    56,    55,
    58,    38,    39,    64,    40,   261,   250,    42,    52,    74,
   161,   253,    60,   161,   161,    80,    69,    73,    53,    56,
   203,    45,   159,   250,    45,    45,   166,    45,   253,   166,
   166,    55,    58,   202,   159,    64,    40,    69,   151,    42,
    52,    74,   183,   161,    60,   133,   142,    80,    45,    73,
    53,    56,    55,    58,    45,   134,    64,    36,   274,   166,
   179,    52,    74,  -145,     4,    60,    36,  -147,    80,    69,
    73,    53,    56,     4,   154,   155,   156,   140,   141,   143,
    45,   148,   152,   267,    55,    58,    53,    56,    64,   126,
    69,   151,   269,    52,    74,    33,    34,    60,   134,   142,
    80,    45,    73,    53,    56,    55,    58,   148,   152,    64,
    53,    56,    36,  -149,    52,    74,   148,   152,    60,     4,
     8,    80,    69,    73,    53,    56,  -150,   154,   155,   156,
   140,   141,   143,    45,   148,   152,  -146,    55,    58,   206,
   308,    64,   255,    69,   151,   275,    52,    74,   126,  -146,
    60,  -148,   142,    80,    45,    73,    53,    56,    55,    58,
   156,   140,    64,   185,  -148,   148,   152,    52,    74,    86,
  -145,    60,   183,   133,    80,    69,    73,    53,    56,  -162,
   154,   155,   156,   140,   141,   143,    45,   148,   152,  -150,
    55,    58,   277,  -147,    64,  -149,    69,   151,   157,    52,
    74,   159,   128,    60,   223,   142,    80,    45,    73,    53,
    56,    55,    58,   156,   140,    64,   283,   171,   148,   152,
    52,    74,   172,   126,    60,   186,   192,    80,    69,    73,
    53,    56,   295,   154,   155,   156,   140,   141,   143,    45,
   148,   152,   223,    55,    58,   192,   213,    64,   299,    69,
   206,   214,    52,    74,   101,  -146,    60,   185,   173,    80,
    45,    73,    53,    56,    55,    58,   238,    95,    64,   174,
   206,   207,   309,    52,    74,   277,   311,    60,    87,  -147,
    80,    69,    73,    53,    56,  -145,   154,   155,   156,   140,
  -148,  -146,    45,   148,   152,  -150,    55,    58,   313,   204,
    64,    93,    69,   206,   207,    52,    74,   180,  -147,    60,
    44,   188,    80,    45,    73,    53,    56,    55,    58,   247,
   319,    64,  -195,   242,   243,    37,    52,    74,   182,   185,
    60,   298,   nil,    80,    69,    73,    53,    56,   nil,   154,
   155,   156,   140,   141,   143,    45,   148,   152,   nil,    55,
    58,   nil,   nil,    64,   nil,    69,   nil,   nil,    52,    74,
   nil,   nil,    60,   nil,   nil,    80,    45,    73,    53,    56,
    55,    58,   nil,   nil,    64,   nil,   nil,   nil,   nil,    52,
    74,   nil,   nil,    60,   nil,   nil,    80,    69,    73,    53,
    56,   nil,   154,   155,   156,   140,   nil,   nil,    45,   148,
   152,   nil,    55,    58,   nil,   nil,    64,   nil,    69,   nil,
   nil,    52,    74,   nil,   nil,    60,   nil,   nil,    80,    45,
    73,    53,    56,    55,    58,   nil,   nil,    64,   nil,   nil,
   nil,   nil,    52,    74,   nil,   nil,    60,   nil,   nil,    80,
    69,    73,    53,    56,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    73,    53,    56,    55,    58,   nil,   nil,    64,
   nil,    69,   nil,   nil,    52,    74,   nil,   nil,    60,   nil,
   nil,    80,    45,    73,    53,    56,    55,    58,   nil,   nil,
    64,   nil,   nil,    45,   nil,    52,    74,    55,    58,    60,
   nil,    64,    80,    69,   nil,   nil,    52,    73,    53,    56,
    60,   nil,   nil,   nil,    45,   nil,   nil,   nil,    55,    58,
   nil,   nil,    64,    73,    53,    56,   nil,    52,    74,   nil,
   nil,    60,   nil,   nil,    80,   nil,   nil,   nil,    45,    73,
    53,    56,    55,    58,   nil,   nil,    64,   nil,   nil,   nil,
   nil,    52,   nil,   nil,    45,    60,   nil,   nil,    55,   197,
   nil,   nil,    64,    73,    53,    56,   nil,   107,   nil,   nil,
    45,    60,   nil,   nil,    55,    58,   nil,   nil,    64,    73,
    53,    56,   nil,    52,   nil,   nil,   nil,    60,   nil,    73,
    53,    56,   nil,   nil,    45,   nil,   nil,   nil,    55,    58,
   nil,   nil,    64,    73,    53,    56,   137,    52,   nil,   nil,
    45,    60,   nil,   nil,    55,    58,   nil,   nil,    64,   nil,
    45,   nil,   nil,    52,    55,   109,   nil,    60,    64,    51,
    53,    56,   nil,   107,    45,   nil,   nil,    60,    55,    58,
   nil,   nil,    64,    73,    53,    56,   nil,    52,   nil,    48,
   nil,    60,   nil,    73,    53,    56,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,    55,    58,   nil,   nil,    64,    73,
    53,    56,    49,    52,    45,   nil,   nil,    60,    55,    58,
   nil,   nil,    64,   nil,    45,   nil,   nil,    52,    55,    58,
   nil,    60,    64,    73,    53,    56,   nil,    52,   nil,   nil,
    45,    60,   nil,   nil,    55,    58,   nil,   nil,    64,   nil,
    53,    56,   nil,    52,   nil,   nil,   nil,    60,   nil,   nil,
    53,    56,   nil,   nil,    45,   nil,    53,    56,    55,    58,
   272,   nil,    64,   nil,   nil,   nil,   nil,    52,   nil,   nil,
    45,    60,    53,    56,    55,    58,   nil,   nil,    64,   nil,
    45,   nil,    49,    52,    55,   197,    45,    60,    64,   nil,
    55,   197,   nil,   107,    64,   nil,   nil,    60,   nil,   107,
    53,    56,    45,    60,   nil,   nil,    55,   197,   nil,   nil,
    64,    53,    56,   nil,   nil,   107,   nil,   nil,   nil,    60,
   210,    53,    56,   nil,   199,   nil,   nil,   nil,   nil,   nil,
    45,   nil,    53,    56,    55,    58,   nil,   nil,    64,   nil,
   nil,    45,    49,    52,   nil,    55,    58,    60,   nil,    64,
   nil,    45,   129,    49,    52,    55,   197,   nil,    60,    64,
    53,    56,    45,   nil,   107,   nil,    55,    58,    60,   nil,
    64,   nil,   nil,   nil,    49,    52,    53,    56,   nil,    60,
   279,   nil,    53,    56,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   nil,    53,    56,    55,   197,   nil,   nil,    64,   nil,
   nil,   nil,   nil,   107,   nil,   nil,    45,    60,   nil,   nil,
    55,   197,    45,   nil,    64,   nil,    55,   197,   nil,   107,
    64,   nil,    45,    60,   nil,   107,    55,   197,   nil,    60,
    64,   146,   151,   nil,   nil,   107,   nil,   nil,   nil,    60,
   142,   144,   147,   150,   146,   151,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   142,   144,   147,   150,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   145,   149,   nil,   nil,   154,   155,
   156,   140,   141,   143,   nil,   148,   152,   nil,   149,   nil,
   nil,   154,   155,   156,   140,   141,   143,   nil,   148,   152,
   146,   151,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,
   144,   147,   150,   146,   151,   nil,   nil,   nil,   nil,   nil,
   nil,   212,   142,   144,   147,   150,   154,   155,   156,   140,
   141,   143,   nil,   148,   152,   nil,   nil,   154,   155,   156,
   140,   141,   143,   nil,   148,   152,   145,   149,   nil,   nil,
   154,   155,   156,   140,   141,   143,   304,   148,   152,   146,
   151,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,   144,
   147,   150,   nil,   nil,   nil,   nil,   nil,    18,   nil,    23,
    26,   nil,     1,     5,   264,    12,   nil,    16,   nil,    20,
   nil,    27,   145,   149,     4,     8,   154,   155,   156,   140,
   141,   143,   nil,   148,   152,    18,   317,    23,    26,   nil,
     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,    27,
   nil,   nil,     4,     8,   nil,   229,   nil,    18,   nil,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,    18,   320,    23,    26,
   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,   nil,
    27,   nil,   nil,     4,     8,   nil,   322,   nil,    18,   nil,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,    18,   324,    23,
    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,    20,
   nil,    27,   nil,   nil,     4,     8,   nil,   256,   nil,    18,
   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,   300,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8,   nil,   302,   nil,
    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,
   278,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,   nil,   325,
   nil,    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,
   nil,    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,
    18,   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,
    16,   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,
   nil,    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,
   nil,    20,   nil,    27,   nil,   nil,     4,     8,    18,   nil,
    23,    26,   nil,     1,     5,   nil,    12,   nil,    16,   nil,
    20,   nil,    27,   nil,   nil,     4,     8 ]

racc_action_check = [
    83,   119,   119,   126,   162,   165,    41,    58,   237,    83,
    83,    21,   240,   165,   111,    21,   237,   181,    83,    83,
    83,    83,   251,    78,   149,   149,   149,    58,    21,    12,
    12,    41,   162,   162,     5,   251,   119,   240,   240,   119,
    77,     5,    83,    83,   149,   126,    83,    83,    83,    83,
    83,    83,    21,    83,    83,   149,   141,   141,   141,   149,
   149,   122,   122,   149,    12,   184,   174,    12,   149,   149,
    88,   174,   149,   161,    89,   149,   141,   142,   142,   142,
   130,    88,   185,   297,   161,    89,    88,   141,   297,   161,
    89,   141,   141,   130,   186,   141,   122,   142,   222,   122,
   141,   141,   109,   241,   141,   211,   222,   141,   142,   143,
   143,   143,   142,   142,   241,   109,   142,   101,   211,   241,
   101,   142,   142,    76,   101,   142,    26,    72,   142,   143,
   144,   144,   144,    26,   222,   222,   222,   222,   222,   222,
   143,   222,   222,   191,   143,   143,    23,    23,   143,   192,
   144,   226,   193,   143,   143,     1,     1,   143,   197,   226,
   143,   144,   145,   145,   145,   144,   144,   215,   215,   144,
   172,   172,    28,    68,   144,   144,   233,   233,   144,    28,
    28,   144,   145,    18,    18,    18,    67,   226,   226,   226,
   226,   226,   226,   145,   226,   226,    66,   145,   145,   271,
   271,   145,   175,    18,   219,   214,   145,   145,   171,    79,
   145,   113,   219,   145,    18,   146,   146,   146,    18,    18,
   232,   232,    18,   160,    63,   232,   232,    18,    18,    62,
    61,    18,   159,    54,    18,   146,   147,   147,   147,    52,
   219,   219,   219,   219,   219,   219,   146,   219,   219,    82,
   146,   146,   229,    50,   146,    84,   147,   221,    85,   146,
   146,    87,    46,   146,   152,   221,   146,   147,   140,   140,
   140,   147,   147,   231,   231,   147,   239,    90,   231,   231,
   147,   147,    92,    44,   147,   114,   248,   147,   140,   151,
   151,   151,   250,   221,   221,   221,   221,   221,   221,   140,
   221,   221,   148,   140,   140,   127,   136,   140,   254,   151,
   136,   136,   140,   140,    35,   115,   140,   263,    93,   140,
   151,   154,   154,   154,   151,   151,   158,    27,   151,    94,
   158,   158,   277,   151,   151,   278,   281,   151,    97,   287,
   151,   154,   155,   155,   155,   289,   216,   216,   216,   216,
   290,   291,   154,   216,   216,   292,   154,   154,   294,   132,
   154,    25,   155,   132,   132,   154,   154,   102,   106,   154,
    15,   120,   154,   155,   156,   156,   156,   155,   155,   170,
   307,   155,   308,   170,   170,     9,   155,   155,   108,   110,
   155,   253,   nil,   155,   156,   150,   150,   150,   nil,   217,
   217,   217,   217,   217,   217,   156,   217,   217,   nil,   156,
   156,   nil,   nil,   156,   nil,   150,   nil,   nil,   156,   156,
   nil,   nil,   156,   nil,   nil,   156,   150,    33,    33,    33,
   150,   150,   nil,   nil,   150,   nil,   nil,   nil,   nil,   150,
   150,   nil,   nil,   150,   nil,   nil,   150,    33,    69,    69,
    69,   nil,   218,   218,   218,   218,   nil,   nil,    33,   218,
   218,   nil,    33,    33,   nil,   nil,    33,   nil,    69,   nil,
   nil,    33,    33,   nil,   nil,    33,   nil,   nil,    33,    69,
    80,    80,    80,    69,    69,   nil,   nil,    69,   nil,   nil,
   nil,   nil,    69,    69,   nil,   nil,    69,   nil,   nil,    69,
    80,    74,    74,    74,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    80,   269,   269,   269,    80,    80,   nil,   nil,    80,
   nil,    74,   nil,   nil,    80,    80,   nil,   nil,    80,   nil,
   nil,    80,    74,    34,    34,    34,    74,    74,   nil,   nil,
    74,   nil,   nil,   269,   nil,    74,    74,   269,   269,    74,
   nil,   269,    74,    34,   nil,   nil,   269,    86,    86,    86,
   269,   nil,   nil,   nil,    34,   nil,   nil,   nil,    34,    34,
   nil,   nil,    34,   182,   182,   182,   nil,    34,    34,   nil,
   nil,    34,   nil,   nil,    34,   nil,   nil,   nil,    86,   183,
   183,   183,    86,    86,   nil,   nil,    86,   nil,   nil,   nil,
   nil,    86,   nil,   nil,   182,    86,   nil,   nil,   182,   182,
   nil,   nil,   182,    51,    51,    51,   nil,   182,   nil,   nil,
   183,   182,   nil,   nil,   183,   183,   nil,   nil,   183,   295,
   295,   295,   nil,   183,   nil,   nil,   nil,   183,   nil,    37,
    37,    37,   nil,   nil,    51,   nil,   nil,   nil,    51,    51,
   nil,   nil,    51,    73,    73,    73,    73,    51,   nil,   nil,
   295,    51,   nil,   nil,   295,   295,   nil,   nil,   295,   nil,
    37,   nil,   nil,   295,    37,    37,   nil,   295,    37,    16,
    16,    16,   nil,    37,    73,   nil,   nil,    37,    73,    73,
   nil,   nil,    73,    20,    20,    20,   nil,    73,   nil,    16,
   nil,    73,   nil,   298,   298,   298,   nil,   nil,   nil,   nil,
    16,   nil,   nil,   nil,    16,    16,   nil,   nil,    16,   205,
   205,   205,    16,    16,    20,   nil,   nil,    16,    20,    20,
   nil,   nil,    20,   nil,   298,   nil,   nil,    20,   298,   298,
   nil,    20,   298,   190,   190,   190,   nil,   298,   nil,   nil,
   205,   298,   nil,   nil,   205,   205,   nil,   nil,   205,   nil,
   203,   203,   nil,   205,   nil,   nil,   nil,   205,   nil,   nil,
   246,   246,   nil,   nil,   190,   nil,   199,   199,   190,   190,
   203,   nil,   190,   nil,   nil,   nil,   nil,   190,   nil,   nil,
   203,   190,   306,   306,   203,   203,   nil,   nil,   203,   nil,
   246,   nil,   203,   203,   246,   246,   199,   203,   246,   nil,
   199,   199,   nil,   246,   199,   nil,   nil,   246,   nil,   199,
   134,   134,   306,   199,   nil,   nil,   306,   306,   nil,   nil,
   306,   133,   133,   nil,   nil,   306,   nil,   nil,   nil,   306,
   134,   128,   128,   nil,   128,   nil,   nil,   nil,   nil,   nil,
   134,   nil,    48,    48,   134,   134,   nil,   nil,   134,   nil,
   nil,   133,   134,   134,   nil,   133,   133,   134,   nil,   133,
   nil,   128,    48,   133,   133,   128,   128,   nil,   133,   128,
   282,   282,    48,   nil,   128,   nil,    48,    48,   128,   nil,
    48,   nil,   nil,   nil,    48,    48,   235,   235,   nil,    48,
   235,   nil,   245,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   282,   nil,   157,   157,   282,   282,   nil,   nil,   282,   nil,
   nil,   nil,   nil,   282,   nil,   nil,   235,   282,   nil,   nil,
   235,   235,   245,   nil,   235,   nil,   245,   245,   nil,   235,
   245,   nil,   157,   235,   nil,   245,   157,   157,   nil,   245,
   157,    99,    99,   nil,   nil,   157,   nil,   nil,   nil,   157,
    99,    99,    99,    99,   220,   220,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   220,   220,   220,   220,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    99,    99,   nil,   nil,    99,    99,
    99,    99,    99,    99,   nil,    99,    99,   nil,   220,   nil,
   nil,   220,   220,   220,   220,   220,   220,   nil,   220,   220,
   225,   225,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,
   225,   225,   225,   135,   135,   nil,   nil,   nil,   nil,   nil,
   nil,   135,   135,   135,   135,   135,   227,   227,   227,   227,
   227,   227,   nil,   227,   227,   nil,   nil,   225,   225,   225,
   225,   225,   225,   nil,   225,   225,   135,   135,   nil,   nil,
   135,   135,   135,   135,   135,   135,   265,   135,   135,   100,
   100,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,   100,
   100,   100,   nil,   nil,   nil,   nil,   nil,   265,   nil,   265,
   265,   nil,   265,   265,   188,   265,   nil,   265,   nil,   265,
   nil,   265,   100,   100,   265,   265,   100,   100,   100,   100,
   100,   100,   nil,   100,   100,   188,   301,   188,   188,   nil,
   188,   188,   nil,   188,   nil,   188,   nil,   188,   nil,   188,
   nil,   nil,   188,   188,   nil,   153,   nil,   301,   nil,   301,
   301,   nil,   301,   301,   nil,   301,   nil,   301,   nil,   301,
   nil,   301,   nil,   nil,   301,   301,   153,   309,   153,   153,
   nil,   153,   153,   nil,   153,   nil,   153,   nil,   153,   nil,
   153,   nil,   nil,   153,   153,   nil,   311,   nil,   309,   nil,
   309,   309,   nil,   309,   309,   nil,   309,   nil,   309,   nil,
   309,   nil,   309,   nil,   nil,   309,   309,   311,   321,   311,
   311,   nil,   311,   311,   nil,   311,   nil,   311,   nil,   311,
   nil,   311,   nil,   nil,   311,   311,   nil,   180,   nil,   321,
   nil,   321,   321,   nil,   321,   321,   nil,   321,   nil,   321,
   nil,   321,   nil,   321,   nil,   nil,   321,   321,   180,   255,
   180,   180,   nil,   180,   180,   nil,   180,   nil,   180,   nil,
   180,   nil,   180,   nil,   nil,   180,   180,   nil,   257,   nil,
   255,   nil,   255,   255,   nil,   255,   255,   nil,   255,   nil,
   255,   nil,   255,   nil,   255,   nil,   nil,   255,   255,   257,
   230,   257,   257,   nil,   257,   257,   nil,   257,   nil,   257,
   nil,   257,   nil,   257,   nil,   nil,   257,   257,   nil,   323,
   nil,   230,   nil,   230,   230,   nil,   230,   230,   nil,   230,
   nil,   230,   nil,   230,   nil,   230,   nil,   nil,   230,   230,
   323,   nil,   323,   323,   nil,   323,   323,   nil,   323,   nil,
   323,   nil,   323,   nil,   323,   nil,   nil,   323,   323,    30,
   nil,    30,    30,   nil,    30,    30,   nil,    30,   nil,    30,
   nil,    30,   nil,    30,   nil,   nil,    30,    30,     0,   nil,
     0,     0,   nil,     0,     0,   nil,     0,   nil,     0,   nil,
     0,   nil,     0,   nil,   nil,     0,     0 ]

racc_action_pointer = [
  1330,   142,   nil,   nil,   nil,    -4,   nil,   nil,   nil,   379,
   nil,   nil,    26,   nil,   nil,   364,   677,   nil,   181,   nil,
   691,     9,   nil,   143,   nil,   361,    88,   285,   134,   nil,
  1311,   nil,   nil,   425,   531,   279,   nil,   637,   nil,   nil,
   nil,    -4,   nil,   nil,   245,   nil,   241,   nil,   849,   nil,
   232,   611,   237,   nil,   223,   nil,   nil,   nil,     5,   nil,
   nil,   209,   227,   203,   nil,   nil,   175,   165,   152,   446,
   nil,   nil,   106,   651,   499,   nil,   102,    19,     2,   188,
   478,   nil,   228,    -6,   234,   252,   555,   223,    48,    52,
   271,   nil,   272,   318,   307,   nil,   nil,   332,   nil,   936,
  1054,    79,   361,   nil,   nil,   nil,   347,   nil,   349,    93,
   379,    -7,   nil,   190,   267,   294,   nil,   nil,   nil,    -2,
   365,   nil,    58,   nil,   nil,   nil,    -6,   295,   838,   nil,
    70,   nil,   354,   828,   817,  1008,   301,   nil,   nil,   nil,
   266,    54,    75,   107,   128,   160,   213,   234,   241,    22,
   393,   287,   203,  1128,   319,   340,   372,   909,   321,   223,
   213,    51,   -16,   nil,   nil,   -11,   nil,   nil,   nil,   nil,
   335,   170,   167,   nil,    33,   196,   nil,   nil,   nil,   nil,
  1210,    10,   571,   587,    58,    44,    56,   nil,  1087,   nil,
   741,   136,   111,   143,   nil,   nil,   nil,   136,   nil,   773,
   nil,   nil,   nil,   757,   nil,   717,   nil,   nil,   nil,   nil,
   nil,    95,   nil,   nil,   200,   108,   294,   347,   400,   188,
   949,   241,    82,   nil,   nil,   995,   135,   984,   nil,   223,
  1273,   219,   166,   117,   nil,   893,   nil,    -2,   nil,   269,
   -11,    81,   nil,   nil,   nil,   899,   767,   nil,   276,   nil,
   279,    12,   nil,   378,   285,  1232,   nil,  1251,   nil,   nil,
   nil,   nil,   nil,   307,   nil,  1059,   nil,   nil,   nil,   510,
   nil,   190,   nil,   nil,   nil,   nil,   nil,   326,   306,   nil,
   nil,   330,   877,   nil,   nil,   nil,   nil,   318,   nil,   324,
   329,   330,   334,   nil,   351,   627,   nil,    50,   701,   nil,
   nil,  1109,   nil,   nil,   nil,   nil,   789,   373,   375,  1150,
   nil,  1169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1191,   nil,  1292,   nil,   nil ]

racc_action_default = [
  -171,  -197,   -15,    -3,  -164,  -197,   -16,    -5,  -162,  -197,
   -17,    -6,  -197,    -7,    -8,  -197,  -163,    -9,  -197,   -10,
  -197,  -197,   -11,  -197,   -12,  -197,  -197,   -39,  -197,   -13,
    -1,   -14,    -2,  -197,  -197,  -171,  -163,   -72,  -169,  -168,
  -167,  -171,  -170,  -165,   -79,  -188,  -197,   -31,  -197,   -33,
   -32,  -197,   -63,  -102,   -21,  -104,  -103,   -22,   -62,   -23,
   -61,   -26,  -197,   -27,  -152,  -151,   -28,   -29,   -30,  -197,
   -94,  -112,   -90,  -197,  -197,   -97,   -91,   -95,   -99,   -92,
  -197,   -96,   -93,  -197,   -98,  -197,  -197,   -72,  -171,  -171,
   -42,  -153,  -155,  -197,  -171,   -40,   -38,  -197,    -4,   -70,
   -71,  -197,  -197,  -184,   -73,   -67,   -64,   -63,   -59,   -62,
  -194,   -65,   -57,   -68,  -197,   -66,  -150,   -69,  -149,  -197,
  -197,  -182,  -197,   -77,   -78,   -80,  -197,  -194,  -197,   -20,
  -197,   -82,  -197,  -197,  -197,  -197,  -197,  -191,  -128,  -121,
  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,
  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,
  -194,  -171,  -197,   -46,   -48,  -197,   -62,   -55,   -54,   -45,
  -197,   -79,  -197,   326,  -172,  -197,  -173,  -186,  -185,  -187,
  -197,  -197,   -60,  -197,  -197,  -195,   -72,  -183,  -197,  -166,
  -197,  -197,  -195,  -197,  -147,  -139,  -140,   -62,  -145,  -197,
  -148,  -146,   -18,  -197,  -105,  -197,  -192,  -193,   -24,   -25,
  -101,  -197,  -131,  -189,  -193,  -117,  -119,  -123,  -120,  -125,
  -130,  -127,  -124,  -196,  -113,  -129,  -126,  -122,  -114,  -109,
  -197,  -115,  -116,  -118,  -137,  -197,  -133,  -197,  -106,  -197,
  -197,  -197,   -51,   -50,   -44,  -197,  -197,   -43,  -194,  -154,
  -181,  -197,  -176,  -179,  -197,  -197,  -159,  -197,   -34,   -58,
   -75,   -35,   -74,  -194,  -161,  -197,   -76,   -37,   -81,  -197,
  -142,  -194,   -19,   -83,  -100,  -190,  -108,  -197,  -109,  -132,
  -134,  -197,  -197,   -36,   -49,   -47,   -88,   -84,   -52,   -85,
   -89,   -86,   -87,   -53,  -197,  -197,  -175,  -197,  -197,  -174,
  -157,  -197,  -158,   -56,  -160,  -144,  -197,  -197,  -193,  -197,
  -107,  -197,  -138,   -41,  -180,  -177,  -178,  -156,  -143,  -141,
  -111,  -197,  -136,  -197,  -110,  -135 ]

racc_goto_table = [
    21,    15,    98,   110,    30,   184,   112,   196,   252,   193,
   117,   127,    43,    85,    54,    35,    32,    59,   236,   123,
   162,   170,   191,   276,    65,   208,   132,    25,    97,   224,
    21,    15,   268,   228,   288,   293,    94,   306,   234,   235,
   285,    90,   195,   181,   131,    65,   130,   271,   136,    59,
    92,   103,    50,   160,   175,   239,    65,   121,   102,    91,
    41,   158,   120,   108,   254,   251,   131,    96,   178,   nil,
   nil,   nil,   310,   106,   nil,   nil,   nil,   nil,   270,   131,
   193,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   240,   nil,   208,   280,    67,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   176,   177,   nil,   nil,   nil,   nil,   234,   nil,   116,   187,
   nil,   nil,   189,   nil,   nil,   nil,   nil,   nil,   nil,    67,
   nil,   315,   211,   nil,   209,    59,    65,   nil,   248,   nil,
   nil,    65,    65,   294,   nil,   nil,   123,   nil,   nil,   nil,
   nil,   259,   263,    21,    15,   117,   nil,   230,   303,   nil,
   262,   nil,   nil,   312,   194,    65,   307,   123,   nil,    50,
    50,   nil,   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,
    21,    15,   nil,   266,   257,   318,   nil,   193,    21,    15,
    65,   nil,   265,   194,   nil,   nil,   nil,   nil,   273,   nil,
   nil,   nil,    98,   nil,   209,   nil,   nil,    65,   249,   116,
   nil,    65,   nil,    63,    67,    67,   nil,   nil,   106,   nil,
    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,    98,
    21,    15,   nil,   nil,   113,   194,   nil,    98,   116,    50,
   nil,   115,   nil,    65,   nil,    63,   nil,    61,   nil,   118,
   nil,   nil,    66,    65,    65,    21,    15,    21,    15,   301,
    68,   nil,   305,   116,   nil,    21,    15,   nil,   111,   nil,
   nil,   194,   nil,    98,   nil,   nil,   nil,   nil,   nil,    61,
   116,   287,   287,   nil,    67,   168,   168,   nil,   314,   nil,
    65,   316,   nil,    98,   nil,    98,   nil,   nil,   nil,   nil,
   nil,    21,    15,   nil,   nil,   nil,   nil,   nil,   nil,    21,
    15,    21,    15,   321,    65,   323,   116,   nil,   194,   167,
   167,    21,    15,    21,    15,   200,   292,   292,   nil,   nil,
    63,    63,   201,   nil,    47,   nil,   nil,    66,    66,   nil,
   118,   nil,   194,   nil,   nil,    68,    68,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   200,   105,   nil,   nil,   168,   198,
   nil,   201,   nil,   116,    61,    61,    47,   nil,   nil,   118,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   113,
   nil,   nil,   nil,   nil,   nil,   nil,   115,   116,   198,   nil,
   nil,   nil,   167,   nil,   118,   nil,   200,   nil,   nil,   nil,
    63,   nil,   nil,   201,   nil,   nil,   nil,    66,   nil,   nil,
   nil,   118,   nil,   111,   nil,    68,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,
   198,   nil,   200,   nil,    61,   nil,   nil,   nil,   168,   201,
   nil,   nil,   290,   290,    99,   100,   nil,   118,   nil,   291,
   291,    47,    47,   nil,   nil,   nil,   nil,   118,   118,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   198,   nil,   nil,   nil,
   nil,   nil,   167,   nil,   nil,   nil,   289,   289,   nil,   200,
   135,   nil,   nil,   nil,   nil,   138,   201,   nil,   nil,   nil,
   nil,   139,   nil,   nil,   118,   nil,   nil,   nil,   nil,   nil,
   105,   nil,   nil,   200,   nil,   nil,   nil,   nil,   nil,   nil,
   201,   nil,   nil,   198,   nil,   nil,   nil,   nil,   118,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   215,   216,   217,   218,   219,   220,   221,   222,   nil,
   225,   226,   227,   286,   286,   231,   232,   233 ]

racc_goto_check = [
    33,    20,     4,    31,     2,    32,    43,    61,    71,    59,
    46,    34,    68,    49,    18,    28,     3,    20,    57,    48,
    37,    37,    32,    54,    45,    19,    52,     1,    33,    55,
    33,    20,    51,    55,    42,    42,    28,    53,    59,    56,
    38,    36,    60,    30,    49,    45,    18,    62,    52,    20,
    63,     3,    27,    31,    64,    32,    45,     3,    65,    27,
    66,    52,    67,    29,    69,    70,    49,     5,    72,   nil,
   nil,   nil,    54,    27,   nil,   nil,   nil,   nil,    61,    49,
    59,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,   nil,    19,    57,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,    28,   nil,   nil,   nil,   nil,    59,   nil,    24,    68,
   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,    71,    18,   nil,    20,    20,    45,   nil,    34,   nil,
   nil,    45,    45,    32,   nil,   nil,    48,   nil,   nil,   nil,
   nil,    43,    31,    33,    20,    46,   nil,     2,    32,   nil,
    48,   nil,   nil,    59,    27,    45,    32,    48,   nil,    27,
    27,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
    33,    20,   nil,    49,     2,    61,   nil,    59,    33,    20,
    45,   nil,     2,    27,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,     4,   nil,    20,   nil,   nil,    45,    27,    24,
   nil,    45,   nil,    22,    24,    24,   nil,   nil,    27,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,     4,
    33,    20,   nil,   nil,    22,    27,   nil,     4,    24,    27,
   nil,    23,   nil,    45,   nil,    22,   nil,    21,   nil,    25,
   nil,   nil,    23,    45,    45,    33,    20,    33,    20,     2,
    25,   nil,    49,    24,   nil,    33,    20,   nil,    21,   nil,
   nil,    27,   nil,     4,   nil,   nil,   nil,   nil,   nil,    21,
    24,    27,    27,   nil,    24,    22,    22,   nil,    49,   nil,
    45,    49,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,
   nil,    33,    20,   nil,   nil,   nil,   nil,   nil,   nil,    33,
    20,    33,    20,     2,    45,     2,    24,   nil,    27,    21,
    21,    33,    20,    33,    20,    22,    24,    24,   nil,   nil,
    22,    22,    23,   nil,    26,   nil,   nil,    23,    23,   nil,
    25,   nil,    27,   nil,   nil,    25,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    26,   nil,   nil,    22,    21,
   nil,    23,   nil,    24,    21,    21,    26,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,    23,    24,    21,   nil,
   nil,   nil,    21,   nil,    25,   nil,    22,   nil,   nil,   nil,
    22,   nil,   nil,    23,   nil,   nil,   nil,    23,   nil,   nil,
   nil,    25,   nil,    21,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    21,   nil,    22,   nil,    21,   nil,   nil,   nil,    22,    23,
   nil,   nil,    22,    22,    47,    47,   nil,    25,   nil,    23,
    23,    26,    26,   nil,   nil,   nil,   nil,    25,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,    21,    21,   nil,    22,
    47,   nil,   nil,   nil,   nil,    47,    23,   nil,   nil,   nil,
   nil,    47,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,    21,   nil,   nil,   nil,   nil,    25,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    47,    47,    47,    47,    47,    47,    47,   nil,
    47,    47,    47,    26,    26,    47,    47,    47 ]

racc_goto_pointer = [
   nil,    27,     4,    16,   -28,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -2,  -108,
     1,   231,   197,   204,    81,   212,   318,    36,    10,    26,
   -65,   -34,  -105,     0,   -33,   nil,    20,   -68,  -201,   nil,
   nil,   nil,  -211,   -31,   nil,     8,   -27,   411,   -25,    -7,
   nil,  -160,   -25,  -234,  -206,  -119,  -118,  -139,   nil,  -119,
   -86,  -121,  -152,    27,   -40,    23,    48,    21,     0,  -110,
  -109,  -166,   -33 ]

racc_goto_default = [
   nil,   nil,   nil,   169,     3,     7,    11,    13,    14,    17,
    19,    22,    24,    29,    31,     2,     6,    10,   nil,    57,
    75,    76,    77,    79,    82,    84,    70,    72,     9,   nil,
   nil,   nil,   nil,    62,   nil,    28,   nil,   nil,   163,   241,
   164,   165,   nil,   nil,   114,    78,    81,   nil,   104,    71,
   124,   125,   nil,   205,   nil,   nil,   nil,   nil,   237,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :APPENDS => 14,
 :LESSEQUAL => 15,
 :NOTEQUAL => 16,
 :DOT => 17,
 :COLON => 18,
 :LLCOLLECT => 19,
 :RRCOLLECT => 20,
 :QMARK => 21,
 :LPAREN => 22,
 :RPAREN => 23,
 :ISEQUAL => 24,
 :GREATEREQUAL => 25,
 :GREATERTHAN => 26,
 :LESSTHAN => 27,
 :IF => 28,
 :ELSE => 29,
 :IMPORT => 30,
 :DEFINE => 31,
 :ELSIF => 32,
 :VARIABLE => 33,
 :CLASS => 34,
 :INHERITS => 35,
 :NODE => 36,
 :BOOLEAN => 37,
 :NAME => 38,
 :SEMIC => 39,
 :CASE => 40,
 :DEFAULT => 41,
 :AT => 42,
 :LCOLLECT => 43,
 :RCOLLECT => 44,
 :CLASSNAME => 45,
 :CLASSREF => 46,
 :NOT => 47,
 :OR => 48,
 :AND => 49,
 :UNDEF => 50,
 :PARROW => 51,
 :PLUS => 52,
 :MINUS => 53,
 :TIMES => 54,
 :DIV => 55,
 :LSHIFT => 56,
 :RSHIFT => 57,
 :UMINUS => 58,
 :MATCH => 59,
 :NOMATCH => 60,
 :REGEX => 61 }

racc_use_result_var = true

racc_nt_base = 62

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'qtexts',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 44
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 60
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 84
  def _reduce_18( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 92
  def _reduce_19( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 98
  def _reduce_20( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 106
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 114
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 123
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

module_eval <<'.,.,', 'grammar.ra', 136
  def _reduce_33( val, _values, result )
                    result = ast AST::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 158
  def _reduce_34( val, _values, result )
    @lexer.commentpop
    array = val[2]
    if array.instance_of?(AST::ResourceInstance)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInstance)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 161
  def _reduce_35( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 164
  def _reduce_36( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 170
  def _reduce_37( val, _values, result )
    @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 197
  def _reduce_38( val, _values, result )
    type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_39( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 199
  def _reduce_40( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 223
  def _reduce_41( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_42( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 252
  def _reduce_43( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_44( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 45 omitted

 # reduce 46 omitted

module_eval <<'.,.,', 'grammar.ra', 268
  def _reduce_47( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 48 omitted

module_eval <<'.,.,', 'grammar.ra', 274
  def _reduce_49( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_50( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 276
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 283
  def _reduce_52( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 288
  def _reduce_53( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 54 omitted

 # reduce 55 omitted

module_eval <<'.,.,', 'grammar.ra', 295
  def _reduce_56( val, _values, result )
    result = ast AST::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 57 omitted

module_eval <<'.,.,', 'grammar.ra', 305
  def _reduce_58( val, _values, result )
    if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

module_eval <<'.,.,', 'grammar.ra', 312
  def _reduce_61( val, _values, result )
    result = ast AST::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 316
  def _reduce_62( val, _values, result )
    result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 320
  def _reduce_63( val, _values, result )
    result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 64 omitted

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

module_eval <<'.,.,', 'grammar.ra', 336
  def _reduce_70( val, _values, result )
    if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 341
  def _reduce_71( val, _values, result )
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_72( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_73( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 355
  def _reduce_74( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 359
  def _reduce_75( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 364
  def _reduce_76( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true
   result
  end
.,.,

 # reduce 77 omitted

 # reduce 78 omitted

module_eval <<'.,.,', 'grammar.ra', 372
  def _reduce_79( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 372
  def _reduce_80( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 381
  def _reduce_81( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 82 omitted

module_eval <<'.,.,', 'grammar.ra', 390
  def _reduce_83( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

module_eval <<'.,.,', 'grammar.ra', 417
  def _reduce_100( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 422
  def _reduce_101( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 426
  def _reduce_102( val, _values, result )
    result = ast AST::String, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 428
  def _reduce_103( val, _values, result )
    result = ast AST::FlatString, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 432
  def _reduce_104( val, _values, result )
    result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_105( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 439
  def _reduce_106( val, _values, result )
    result = ast AST::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 453
  def _reduce_107( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 466
  def _reduce_108( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 109 omitted

module_eval <<'.,.,', 'grammar.ra', 472
  def _reduce_110( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_111( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)
   result
  end
.,.,

 # reduce 112 omitted

module_eval <<'.,.,', 'grammar.ra', 493
  def _reduce_113( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 496
  def _reduce_114( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 499
  def _reduce_115( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 502
  def _reduce_116( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 505
  def _reduce_117( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 508
  def _reduce_118( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 511
  def _reduce_119( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 514
  def _reduce_120( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 517
  def _reduce_121( val, _values, result )
    result = ast AST::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 520
  def _reduce_122( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 523
  def _reduce_123( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 526
  def _reduce_124( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 529
  def _reduce_125( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 532
  def _reduce_126( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 535
  def _reduce_127( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 538
  def _reduce_128( val, _values, result )
    result = ast AST::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 541
  def _reduce_129( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 544
  def _reduce_130( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 547
  def _reduce_131( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 556
  def _reduce_132( val, _values, result )
    @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 133 omitted

module_eval <<'.,.,', 'grammar.ra', 566
  def _reduce_134( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 571
  def _reduce_135( val, _values, result )
    @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_136( val, _values, result )
    @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 137 omitted

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_138( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_139( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 140 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_141( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 142 omitted

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_143( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_144( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 145 omitted

 # reduce 146 omitted

 # reduce 147 omitted

 # reduce 148 omitted

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_152( val, _values, result )
    result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 624
  def _reduce_153( val, _values, result )
 result = [val[0].value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 628
  def _reduce_154( val, _values, result )
    results = val[0] << val[2].value
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 636
  def _reduce_155( val, _values, result )
    val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 647
  def _reduce_156( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 652
  def _reduce_157( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 661
  def _reduce_158( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :code => val[4], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 667
  def _reduce_159( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 673
  def _reduce_160( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 677
  def _reduce_161( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_162( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 680
  def _reduce_163( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_164( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 165 omitted

module_eval <<'.,.,', 'grammar.ra', 691
  def _reduce_166( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 692
  def _reduce_167( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 693
  def _reduce_168( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 694
  def _reduce_169( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 695
  def _reduce_170( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 700
  def _reduce_171( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 704
  def _reduce_172( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 173 omitted

module_eval <<'.,.,', 'grammar.ra', 709
  def _reduce_174( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 713
  def _reduce_175( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 176 omitted

module_eval <<'.,.,', 'grammar.ra', 720
  def _reduce_177( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 725
  def _reduce_178( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 729
  def _reduce_179( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 731
  def _reduce_180( val, _values, result )
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 733
  def _reduce_181( val, _values, result )
    result = [val[0][:value]]
   result
  end
.,.,

 # reduce 182 omitted

module_eval <<'.,.,', 'grammar.ra', 738
  def _reduce_183( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 184 omitted

module_eval <<'.,.,', 'grammar.ra', 743
  def _reduce_185( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 186 omitted

 # reduce 187 omitted

module_eval <<'.,.,', 'grammar.ra', 749
  def _reduce_188( val, _values, result )
    result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 757
  def _reduce_189( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 764
  def _reduce_190( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 766
  def _reduce_191( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 192 omitted

 # reduce 193 omitted

 # reduce 194 omitted

module_eval <<'.,.,', 'grammar.ra', 771
  def _reduce_195( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 776
  def _reduce_196( val, _values, result )
    result = ast AST::Regex, :value => val[0][:value]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
